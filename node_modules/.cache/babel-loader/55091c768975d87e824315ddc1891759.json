{"ast":null,"code":"/**\n * isMobile.js v0.4.1\n *\n * A simple library to detect Apple phones and tablets,\n * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),\n * and any kind of seven inch device, via user agent sniffing.\n *\n * @author: Kai Mallea (kmallea@gmail.com)\n *\n * @license: http://creativecommons.org/publicdomain/zero/1.0/\n */\n(function (global) {\n  var apple_phone = /iPhone/i,\n      apple_ipod = /iPod/i,\n      apple_tablet = /iPad/i,\n      android_phone = /(?=.*\\bAndroid\\b)(?=.*\\bMobile\\b)/i,\n      // Match 'Android' AND 'Mobile'\n  android_tablet = /Android/i,\n      amazon_phone = /(?=.*\\bAndroid\\b)(?=.*\\bSD4930UR\\b)/i,\n      amazon_tablet = /(?=.*\\bAndroid\\b)(?=.*\\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\\b)/i,\n      windows_phone = /Windows Phone/i,\n      windows_tablet = /(?=.*\\bWindows\\b)(?=.*\\bARM\\b)/i,\n      // Match 'Windows' AND 'ARM'\n  other_blackberry = /BlackBerry/i,\n      other_blackberry_10 = /BB10/i,\n      other_opera = /Opera Mini/i,\n      other_chrome = /(CriOS|Chrome)(?=.*\\bMobile\\b)/i,\n      other_firefox = /(?=.*\\bFirefox\\b)(?=.*\\bMobile\\b)/i,\n      // Match 'Firefox' AND 'Mobile'\n  seven_inch = new RegExp('(?:' + // Non-capturing group\n  'Nexus 7' + // Nexus 7\n  '|' + // OR\n  'BNTV250' + // B&N Nook Tablet 7 inch\n  '|' + // OR\n  'Kindle Fire' + // Kindle Fire\n  '|' + // OR\n  'Silk' + // Kindle Fire, Silk Accelerated\n  '|' + // OR\n  'GT-P1000' + // Galaxy Tab 7 inch\n  ')', // End non-capturing group\n  'i'); // Case-insensitive matching\n\n  var match = function (regex, userAgent) {\n    return regex.test(userAgent);\n  };\n\n  var IsMobileClass = function (userAgent) {\n    var ua = userAgent || navigator.userAgent; // Facebook mobile app's integrated browser adds a bunch of strings that\n    // match everything. Strip it out if it exists.\n\n    var tmp = ua.split('[FBAN');\n\n    if (typeof tmp[1] !== 'undefined') {\n      ua = tmp[0];\n    } // Twitter mobile app's integrated browser on iPad adds a \"Twitter for\n    // iPhone\" string. Same probable happens on other tablet platforms.\n    // This will confuse detection so strip it out if it exists.\n\n\n    tmp = ua.split('Twitter');\n\n    if (typeof tmp[1] !== 'undefined') {\n      ua = tmp[0];\n    }\n\n    this.apple = {\n      phone: match(apple_phone, ua),\n      ipod: match(apple_ipod, ua),\n      tablet: !match(apple_phone, ua) && match(apple_tablet, ua),\n      device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)\n    };\n    this.amazon = {\n      phone: match(amazon_phone, ua),\n      tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),\n      device: match(amazon_phone, ua) || match(amazon_tablet, ua)\n    };\n    this.android = {\n      phone: match(amazon_phone, ua) || match(android_phone, ua),\n      tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),\n      device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)\n    };\n    this.windows = {\n      phone: match(windows_phone, ua),\n      tablet: match(windows_tablet, ua),\n      device: match(windows_phone, ua) || match(windows_tablet, ua)\n    };\n    this.other = {\n      blackberry: match(other_blackberry, ua),\n      blackberry10: match(other_blackberry_10, ua),\n      opera: match(other_opera, ua),\n      firefox: match(other_firefox, ua),\n      chrome: match(other_chrome, ua),\n      device: match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)\n    };\n    this.seven_inch = match(seven_inch, ua);\n    this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch; // excludes 'other' devices and ipods, targeting touchscreen phones\n\n    this.phone = this.apple.phone || this.android.phone || this.windows.phone; // excludes 7 inch devices, classifying as phone or tablet is left to the user\n\n    this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;\n\n    if (typeof window === 'undefined') {\n      return this;\n    }\n  };\n\n  var instantiate = function () {\n    var IM = new IsMobileClass();\n    IM.Class = IsMobileClass;\n    return IM;\n  };\n\n  if (typeof module !== 'undefined' && module.exports && typeof window === 'undefined') {\n    //node\n    module.exports = IsMobileClass;\n  } else if (typeof module !== 'undefined' && module.exports && typeof window !== 'undefined') {\n    //browserify\n    module.exports = instantiate();\n  } else if (typeof define === 'function' && define.amd) {\n    //AMD\n    define('isMobile', [], global.isMobile = instantiate());\n  } else {\n    global.isMobile = instantiate();\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script"}