{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * A GraphicsData object.\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar GraphicsData = function () {\n  /**\n   *\n   * @param {number} lineWidth - the width of the line to draw\n   * @param {number} lineColor - the color of the line to draw\n   * @param {number} lineAlpha - the alpha of the line to draw\n   * @param {number} fillColor - the color of the fill\n   * @param {number} fillAlpha - the alpha of the fill\n   * @param {boolean} fill - whether or not the shape is filled with a colour\n   * @param {boolean} nativeLines - the method for drawing lines\n   * @param {PIXI.Circle|PIXI.Rectangle|PIXI.Ellipse|PIXI.Polygon} shape - The shape object to draw.\n   */\n  function GraphicsData(lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, nativeLines, shape) {\n    _classCallCheck(this, GraphicsData);\n    /**\n     * @member {number} the width of the line to draw\n     */\n\n\n    this.lineWidth = lineWidth;\n    /**\n     * @member {boolean} if true the liens will be draw using LINES instead of TRIANGLE_STRIP\n     */\n\n    this.nativeLines = nativeLines;\n    /**\n     * @member {number} the color of the line to draw\n     */\n\n    this.lineColor = lineColor;\n    /**\n     * @member {number} the alpha of the line to draw\n     */\n\n    this.lineAlpha = lineAlpha;\n    /**\n     * @member {number} cached tint of the line to draw\n     */\n\n    this._lineTint = lineColor;\n    /**\n     * @member {number} the color of the fill\n     */\n\n    this.fillColor = fillColor;\n    /**\n     * @member {number} the alpha of the fill\n     */\n\n    this.fillAlpha = fillAlpha;\n    /**\n     * @member {number} cached tint of the fill\n     */\n\n    this._fillTint = fillColor;\n    /**\n     * @member {boolean} whether or not the shape is filled with a colour\n     */\n\n    this.fill = fill;\n    this.holes = [];\n    /**\n     * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} The shape object to draw.\n     */\n\n    this.shape = shape;\n    /**\n     * @member {number} The type of the shape, see the Const.Shapes file for all the existing types,\n     */\n\n    this.type = shape.type;\n  }\n  /**\n   * Creates a new GraphicsData object with the same values as this one.\n   *\n   * @return {PIXI.GraphicsData} Cloned GraphicsData object\n   */\n\n\n  GraphicsData.prototype.clone = function clone() {\n    return new GraphicsData(this.lineWidth, this.lineColor, this.lineAlpha, this.fillColor, this.fillAlpha, this.fill, this.nativeLines, this.shape);\n  };\n  /**\n   * Adds a hole to the shape.\n   *\n   * @param {PIXI.Rectangle|PIXI.Circle} shape - The shape of the hole.\n   */\n\n\n  GraphicsData.prototype.addHole = function addHole(shape) {\n    this.holes.push(shape);\n  };\n  /**\n   * Destroys the Graphics data.\n   */\n\n\n  GraphicsData.prototype.destroy = function destroy() {\n    this.shape = null;\n    this.holes = null;\n  };\n\n  return GraphicsData;\n}();\n\nexports.default = GraphicsData;","map":null,"metadata":{},"sourceType":"script"}