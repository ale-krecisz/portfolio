{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.parse = parse;\n\nexports.default = function () {\n  return function bitmapFontParser(resource, next) {\n    // skip if no data or not xml data\n    if (!resource.data || resource.type !== _resourceLoader.Resource.TYPE.XML) {\n      next();\n      return;\n    } // skip if not bitmap font data, using some silly duck-typing\n\n\n    if (resource.data.getElementsByTagName('page').length === 0 || resource.data.getElementsByTagName('info').length === 0 || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null) {\n      next();\n      return;\n    }\n\n    var xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';\n\n    if (resource.isDataUrl) {\n      if (xmlUrl === '.') {\n        xmlUrl = '';\n      }\n\n      if (this.baseUrl && xmlUrl) {\n        // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n        if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/') {\n          xmlUrl += '/';\n        } // remove baseUrl from xmlUrl\n\n\n        xmlUrl = xmlUrl.replace(this.baseUrl, '');\n      }\n    } // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n\n\n    if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/') {\n      xmlUrl += '/';\n    }\n\n    var textureUrl = xmlUrl + resource.data.getElementsByTagName('page')[0].getAttribute('file');\n\n    if (_core.utils.TextureCache[textureUrl]) {\n      // reuse existing texture\n      parse(resource, _core.utils.TextureCache[textureUrl]);\n      next();\n    } else {\n      var loadOptions = {\n        crossOrigin: resource.crossOrigin,\n        loadType: _resourceLoader.Resource.LOAD_TYPE.IMAGE,\n        metadata: resource.metadata.imageMetadata,\n        parentResource: resource\n      }; // load the texture for the font\n\n      this.add(resource.name + '_image', textureUrl, loadOptions, function (res) {\n        parse(resource, res.texture);\n        next();\n      });\n    }\n  };\n};\n\nvar _path = require('path');\n\nvar path = _interopRequireWildcard(_path);\n\nvar _core = require('../core');\n\nvar _resourceLoader = require('resource-loader');\n\nvar _extras = require('../extras');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n * Register a BitmapText font from loader resource.\n *\n * @function parseBitmapFontData\n * @memberof PIXI.loaders\n * @param {PIXI.loaders.Resource} resource - Loader resource.\n * @param {PIXI.Texture} texture - Reference to texture.\n */\n\n\nfunction parse(resource, texture) {\n  resource.bitmapFont = _extras.BitmapText.registerFont(resource.data, texture);\n}","map":null,"metadata":{},"sourceType":"script"}