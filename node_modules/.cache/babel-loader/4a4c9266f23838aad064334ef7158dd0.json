{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Plane2 = require('./Plane');\n\nvar _Plane3 = _interopRequireDefault(_Plane2);\n\nvar _CanvasTinter = require('../core/sprites/canvas/CanvasTinter');\n\nvar _CanvasTinter2 = _interopRequireDefault(_CanvasTinter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DEFAULT_BORDER_SIZE = 10;\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.fromImage('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.mesh.Plane\n * @memberof PIXI.mesh\n *\n */\n\nvar NineSlicePlane = function (_Plane) {\n  _inherits(NineSlicePlane, _Plane);\n  /**\n   * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n   * @param {int} [leftWidth=10] size of the left vertical bar (A)\n   * @param {int} [topHeight=10] size of the top horizontal bar (C)\n   * @param {int} [rightWidth=10] size of the right vertical bar (B)\n   * @param {int} [bottomHeight=10] size of the bottom horizontal bar (D)\n   */\n\n\n  function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    _classCallCheck(this, NineSlicePlane);\n\n    var _this = _possibleConstructorReturn(this, _Plane.call(this, texture, 4, 4));\n\n    _this._origWidth = texture.orig.width;\n    _this._origHeight = texture.orig.height;\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._width = _this._origWidth;\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._height = _this._origHeight;\n    /**\n     * The width of the left column (a)\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n    /**\n     * The width of the right column (b)\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n    /**\n     * The height of the top row (c)\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n    /**\n     * The height of the bottom row (d)\n     *\n     * @member {number}\n     * @memberof PIXI.NineSlicePlane#\n     * @override\n     */\n\n    _this._bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE;\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     *\n     * @member {number}\n     * @protected\n     */\n\n    _this._cachedTint = 0xFFFFFF;\n    /**\n     * Cached tinted texture.\n     *\n     * @member {HTMLCanvasElement}\n     * @protected\n     */\n\n    _this._tintedTexture = null;\n    /**\n     * Temporary storage for canvas source coords\n     *\n     * @member {number[]}\n     * @private\n     */\n\n    _this._canvasUvs = null;\n\n    _this.refresh(true);\n\n    return _this;\n  }\n  /**\n   * Updates the horizontal vertices.\n   *\n   */\n\n\n  NineSlicePlane.prototype.updateHorizontalVertices = function updateHorizontalVertices() {\n    var vertices = this.vertices;\n    var h = this._topHeight + this._bottomHeight;\n    var scale = this._height > h ? 1.0 : this._height / h;\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n    vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n    vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  };\n  /**\n   * Updates the vertical vertices.\n   *\n   */\n\n\n  NineSlicePlane.prototype.updateVerticalVertices = function updateVerticalVertices() {\n    var vertices = this.vertices;\n    var w = this._leftWidth + this._rightWidth;\n    var scale = this._width > w ? 1.0 : this._width / w;\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n    vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n    vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  };\n  /**\n   * Renders the object using the Canvas renderer\n   *\n   * @private\n   * @param {PIXI.CanvasRenderer} renderer - The canvas renderer to render with.\n   */\n\n\n  NineSlicePlane.prototype._renderCanvas = function _renderCanvas(renderer) {\n    var context = renderer.context;\n    var transform = this.worldTransform;\n    var res = renderer.resolution;\n    var isTinted = this.tint !== 0xFFFFFF;\n    var texture = this._texture; // Work out tinting\n\n    if (isTinted) {\n      if (this._cachedTint !== this.tint) {\n        // Tint has changed, need to update the tinted texture and use that instead\n        this._cachedTint = this.tint;\n        this._tintedTexture = _CanvasTinter2.default.getTintedTexture(this, this.tint);\n      }\n    }\n\n    var textureSource = !isTinted ? texture.baseTexture.source : this._tintedTexture;\n\n    if (!this._canvasUvs) {\n      this._canvasUvs = [0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    var vertices = this.vertices;\n    var uvs = this._canvasUvs;\n    var u0 = isTinted ? 0 : texture.frame.x;\n    var v0 = isTinted ? 0 : texture.frame.y;\n    var u1 = u0 + texture.frame.width;\n    var v1 = v0 + texture.frame.height;\n    uvs[0] = u0;\n    uvs[1] = u0 + this._leftWidth;\n    uvs[2] = u1 - this._rightWidth;\n    uvs[3] = u1;\n    uvs[4] = v0;\n    uvs[5] = v0 + this._topHeight;\n    uvs[6] = v1 - this._bottomHeight;\n    uvs[7] = v1;\n\n    for (var i = 0; i < 8; i++) {\n      uvs[i] *= texture.baseTexture.resolution;\n    }\n\n    context.globalAlpha = this.worldAlpha;\n    renderer.setBlendMode(this.blendMode);\n\n    if (renderer.roundPixels) {\n      context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res | 0, transform.ty * res | 0);\n    } else {\n      context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res, transform.ty * res);\n    }\n\n    for (var row = 0; row < 3; row++) {\n      for (var col = 0; col < 3; col++) {\n        var ind = col * 2 + row * 8;\n        var sw = Math.max(1, uvs[col + 1] - uvs[col]);\n        var sh = Math.max(1, uvs[row + 5] - uvs[row + 4]);\n        var dw = Math.max(1, vertices[ind + 10] - vertices[ind]);\n        var dh = Math.max(1, vertices[ind + 11] - vertices[ind + 1]);\n        context.drawImage(textureSource, uvs[col], uvs[row + 4], sw, sh, vertices[ind], vertices[ind + 1], dw, dh);\n      }\n    }\n  };\n  /**\n   * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n   *\n   * @member {number}\n   */\n\n  /**\n   * Refreshes NineSlicePlane coords. All of them.\n   */\n\n\n  NineSlicePlane.prototype._refresh = function _refresh() {\n    _Plane.prototype._refresh.call(this);\n\n    var uvs = this.uvs;\n    var texture = this._texture;\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n\n    var _uvw = 1.0 / this._origWidth;\n\n    var _uvh = 1.0 / this._origHeight;\n\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.updateHorizontalVertices();\n    this.updateVerticalVertices();\n    this.dirty++;\n    this.multiplyUvs();\n  };\n\n  _createClass(NineSlicePlane, [{\n    key: 'width',\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._width = value;\n\n      this._refresh();\n    }\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'height',\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._height = value;\n\n      this._refresh();\n    }\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'leftWidth',\n    get: function get() {\n      return this._leftWidth;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._leftWidth = value;\n\n      this._refresh();\n    }\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'rightWidth',\n    get: function get() {\n      return this._rightWidth;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._rightWidth = value;\n\n      this._refresh();\n    }\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'topHeight',\n    get: function get() {\n      return this._topHeight;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._topHeight = value;\n\n      this._refresh();\n    }\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'bottomHeight',\n    get: function get() {\n      return this._bottomHeight;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._bottomHeight = value;\n\n      this._refresh();\n    }\n  }]);\n\n  return NineSlicePlane;\n}(_Plane3.default);\n\nexports.default = NineSlicePlane;","map":null,"metadata":{},"sourceType":"script"}