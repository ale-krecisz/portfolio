{"ast":null,"code":"var _jsxFileName = \"/Users/michalkrecisz/Documents/projects/portfolio/src/components/Bunny.js\";\nimport React, { useRef, useEffect } from 'react';\nimport * as PIXI from \"pixi.js\";\nimport Bg from '../assets/grunge.jpg';\nimport LoaderPic from '../assets/dis-varOne.png';\n\nconst Bunny = () => {\n  const myCanvas = useRef(null);\n  useEffect(() => {\n    setScene();\n  });\n\n  const setScene = () => {\n    // var rt = [], rts = [], bgs = [], containers = [], channelsContainer = [], displacementFilters = [], brushes = [];\n    // // CHANNEL FILTERS //\n    // var redChannelFilter = new PIXI.filters.ColorMatrixFilter();\n    // redChannelFilter.matrix = [\n    // 1, 0, 0, 0, 0, \n    // 0, 0, 0, 0, 0,\n    // 0, 0, 0, 0, 0, \n    // 0, 0, 0, 1, 0\n    // ];\n    // var greenChannelFilter = new PIXI.filters.ColorMatrixFilter();\n    // greenChannelFilter.matrix = [\n    // 0, 0, 0, 0, 0, \n    // 0, 1, 0, 0, 0, \n    // 0, 0, 0, 0, 0, \n    // 0, 0, 0, 1, 0\n    // ];\n    // var blueChannelFilter = new PIXI.filters.ColorMatrixFilter();\n    // blueChannelFilter.matrix = [\n    // 0, 0, 0, 0, 0, \n    // 0, 0, 0, 0, 0, \n    // 0, 0, 1, 0, 0, \n    // 0, 0, 0, 1, 0\n    // ];\n    // channelsContainer.push(redChannelFilter,greenChannelFilter,blueChannelFilter);\n    const picture = new PIXI.Application({\n      width: 800,\n      height: 600,\n      backgroundColor: 0x1099bb,\n      resolution: window.devicePixelRatio || 1\n    });\n    myCanvas.appendChild(picture.view);\n    const bg = PIXI.Sprite.from(Bg); // const one = PIXI.Sprite.from(LoaderPic);\n\n    bg.anchor.set(0.5); // one.anchor.set(0.5);\n\n    bg.x = picture.screen.width / 2;\n    bg.y = picture.screen.height / 2;\n    picture.stage.addChild(bg);\n    picture.ticker.add(() => {\n      bg.rotation += 0.1;\n    });\n  }; // VARS STORAGE //\n  // // CAPTURING CASHE //\n  // for (var i=0;i<3;i++) {\n  //     rt.push(PIXI.RenderTexture.create(app.screen.width, app.screen.height));\n  //     rts.push(rt);\n  // }\n  // var current = 0;\n  // // CONTAINERS //\n  // var containerRed = new PIXI.Container();\n  //     containerRed.position.x = 0;\n  // var containerGreen = new PIXI.Container();\n  //     containerGreen.position.x = 0;\n  // var containerBlue = new PIXI.Container();\n  //     containerBlue.position.x = 0;\n  // containers.push(containerRed, containerGreen, containerBlue);\n  // // LOADER //\n  // app.loader.load(function(loader, resources) {\n  // var tempBg = new PIXI.Sprite(resources.bg);\n  //     tempBg.width = app.screen.width;\n  //     tempBg.height = app.screen.height;\n  // app.renderer.render(tempBg, rt[0]);\n  // for (var i=0, len=containers.length; i<len; i++) {\n  //     app.stage.addChild(containers[i]);\n  //     brushes.push(new PIXI.Sprite(resources.one));\n  //     displacementFilters.push(new PIXI.filters.DisplacementFilter(brushes[i]));\n  //     bg = new PIXI.Sprite(rts[0][0]);\n  //     bgs.push(bg);\n  //     containers[i].filters = [channelsContainer[i],displacementFilters[i]];\n  //     containers[i].addChild(bgs[i],brushes[i]); \n  // }\n  // brushes[0].anchor.set(0.5); brushes[1].anchor.set(0.6); brushes[2].anchor.set(0.4); \n  // containers[1].filters[1].blendMode = PIXI.BLEND_MODES.ADD;\n  // containers[2].filters[1].blendMode = PIXI.BLEND_MODES.ADD;\n  // app.stage.interactive = true;\n  // app.stage.on('pointermove', onPointerMove);\n  // app.start();\n  // });\n  // function onPointerMove(event) {\n  // const x = event.data.global.x;\n  // const y = event.data.global.y;\n  //     for (var i=0, len=containers.length; i<len; i++) {\n  //         displacementFilters[i].scale.x = Math.atan(x - brushes[i].x)*50; \n  //         displacementFilters[i].scale.y = Math.atan(y - brushes[i].y)*50;\n  //         // brushes[i].position.copy(event.data.global);\n  //     }\n  // }\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    id: \"myCanvas\",\n    width: \"500\",\n    height: \"500\",\n    ref: myCanvas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    src: Bg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }));\n};\n\nexport default Bunny;","map":{"version":3,"sources":["/Users/michalkrecisz/Documents/projects/portfolio/src/components/Bunny.js"],"names":["React","useRef","useEffect","PIXI","Bg","LoaderPic","Bunny","myCanvas","setScene","picture","Application","width","height","backgroundColor","resolution","window","devicePixelRatio","appendChild","view","bg","Sprite","from","anchor","set","x","screen","y","stage","addChild","ticker","add","rotation"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,OAAOC,EAAP,MAAe,sBAAf;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAChB,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,QAAQ;AACX,GAFQ,CAAT;;AAIA,QAAMA,QAAQ,GAAG,MAAM;AACnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,UAAMC,OAAO,GAAG,IAAIN,IAAI,CAACO,WAAT,CAAqB;AACjCC,MAAAA,KAAK,EAAE,GAD0B;AACrBC,MAAAA,MAAM,EAAE,GADa;AACRC,MAAAA,eAAe,EAAE,QADT;AACmBC,MAAAA,UAAU,EAAEC,MAAM,CAACC,gBAAP,IAA2B;AAD1D,KAArB,CAAhB;AAIAT,IAAAA,QAAQ,CAACU,WAAT,CAAqBR,OAAO,CAACS,IAA7B;AAEA,UAAMC,EAAE,GAAGhB,IAAI,CAACiB,MAAL,CAAYC,IAAZ,CAAiBjB,EAAjB,CAAX,CApCmB,CAqCnB;;AAEAe,IAAAA,EAAE,CAACG,MAAH,CAAUC,GAAV,CAAc,GAAd,EAvCmB,CAwCnB;;AAEAJ,IAAAA,EAAE,CAACK,CAAH,GAAOf,OAAO,CAACgB,MAAR,CAAed,KAAf,GAAuB,CAA9B;AACAQ,IAAAA,EAAE,CAACO,CAAH,GAAOjB,OAAO,CAACgB,MAAR,CAAeb,MAAf,GAAwB,CAA/B;AAEAH,IAAAA,OAAO,CAACkB,KAAR,CAAcC,QAAd,CAAuBT,EAAvB;AAEAV,IAAAA,OAAO,CAACoB,MAAR,CAAeC,GAAf,CAAmB,MAAM;AACrBX,MAAAA,EAAE,CAACY,QAAH,IAAe,GAAf;AACH,KAFD;AAGH,GAlDD,CAPgB,CA0DhB;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,EAAE,EAAC,UAAX;AAAsB,IAAA,KAAK,EAAC,KAA5B;AAAkC,IAAA,MAAM,EAAC,KAAzC;AAA+C,IAAA,GAAG,EAAExB,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,GAAG,EAAEH,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CA7HD;;AA+HA,eAAeE,KAAf","sourcesContent":["import React, {useRef, useEffect} from 'react'\nimport * as PIXI from \"pixi.js\";\nimport Bg from '../assets/grunge.jpg'\nimport LoaderPic from '../assets/dis-varOne.png'\n\n\nconst Bunny = () => {\n    const myCanvas = useRef(null);\n\n    useEffect(() => {\n        setScene()\n    })\n\n    const setScene = () => {\n        // var rt = [], rts = [], bgs = [], containers = [], channelsContainer = [], displacementFilters = [], brushes = [];\n\n        // // CHANNEL FILTERS //\n        // var redChannelFilter = new PIXI.filters.ColorMatrixFilter();\n        // redChannelFilter.matrix = [\n        // 1, 0, 0, 0, 0, \n        // 0, 0, 0, 0, 0,\n        // 0, 0, 0, 0, 0, \n        // 0, 0, 0, 1, 0\n        // ];\n    \n        // var greenChannelFilter = new PIXI.filters.ColorMatrixFilter();\n        // greenChannelFilter.matrix = [\n        // 0, 0, 0, 0, 0, \n        // 0, 1, 0, 0, 0, \n        // 0, 0, 0, 0, 0, \n        // 0, 0, 0, 1, 0\n        // ];\n    \n        // var blueChannelFilter = new PIXI.filters.ColorMatrixFilter();\n        // blueChannelFilter.matrix = [\n        // 0, 0, 0, 0, 0, \n        // 0, 0, 0, 0, 0, \n        // 0, 0, 1, 0, 0, \n        // 0, 0, 0, 1, 0\n        // ];\n    \n        // channelsContainer.push(redChannelFilter,greenChannelFilter,blueChannelFilter);\n    \n        const picture = new PIXI.Application({\n            width: 800, height: 600, backgroundColor: 0x1099bb, resolution: window.devicePixelRatio || 1,\n        });\n\n        myCanvas.appendChild(picture.view);\n                \n        const bg = PIXI.Sprite.from(Bg);\n        // const one = PIXI.Sprite.from(LoaderPic);\n    \n        bg.anchor.set(0.5);\n        // one.anchor.set(0.5);\n    \n        bg.x = picture.screen.width / 2;\n        bg.y = picture.screen.height / 2;\n    \n        picture.stage.addChild(bg);\n    \n        picture.ticker.add(() => {\n            bg.rotation += 0.1;\n        });\n    }\n    // VARS STORAGE //\n    \n\n\n    // // CAPTURING CASHE //\n    // for (var i=0;i<3;i++) {\n    //     rt.push(PIXI.RenderTexture.create(app.screen.width, app.screen.height));\n    //     rts.push(rt);\n    // }\n    // var current = 0;\n\n    // // CONTAINERS //\n    // var containerRed = new PIXI.Container();\n    //     containerRed.position.x = 0;\n    // var containerGreen = new PIXI.Container();\n    //     containerGreen.position.x = 0;\n    // var containerBlue = new PIXI.Container();\n    //     containerBlue.position.x = 0;\n    // containers.push(containerRed, containerGreen, containerBlue);\n\n    // // LOADER //\n    // app.loader.load(function(loader, resources) {\n    // var tempBg = new PIXI.Sprite(resources.bg);\n    //     tempBg.width = app.screen.width;\n    //     tempBg.height = app.screen.height;\n\n    // app.renderer.render(tempBg, rt[0]);\n    \n    // for (var i=0, len=containers.length; i<len; i++) {\n    //     app.stage.addChild(containers[i]);\n    //     brushes.push(new PIXI.Sprite(resources.one));\n    //     displacementFilters.push(new PIXI.filters.DisplacementFilter(brushes[i]));\n        \n    //     bg = new PIXI.Sprite(rts[0][0]);\n    //     bgs.push(bg);\n    //     containers[i].filters = [channelsContainer[i],displacementFilters[i]];\n    //     containers[i].addChild(bgs[i],brushes[i]); \n    // }\n    \n    // brushes[0].anchor.set(0.5); brushes[1].anchor.set(0.6); brushes[2].anchor.set(0.4); \n    // containers[1].filters[1].blendMode = PIXI.BLEND_MODES.ADD;\n    // containers[2].filters[1].blendMode = PIXI.BLEND_MODES.ADD;\n\n    // app.stage.interactive = true;\n    // app.stage.on('pointermove', onPointerMove);\n    // app.start();\n    // });\n\n    \n    // function onPointerMove(event) {\n    // const x = event.data.global.x;\n    // const y = event.data.global.y;\n    \n    //     for (var i=0, len=containers.length; i<len; i++) {\n    //         displacementFilters[i].scale.x = Math.atan(x - brushes[i].x)*50; \n    //         displacementFilters[i].scale.y = Math.atan(y - brushes[i].y)*50;\n\n    //         // brushes[i].position.copy(event.data.global);\n    //     }\n    // }\n\n    return (\n        <div>\n            <canvas id='myCanvas' width='500' height='500' ref={myCanvas}/>\n            <img src={Bg}/>\n        </div>\n    )\n};\n\nexport default Bunny;"]},"metadata":{},"sourceType":"module"}