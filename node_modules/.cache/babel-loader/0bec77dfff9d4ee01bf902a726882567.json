{"ast":null,"code":"import { Texture, DisplayObject, Application, Container, Point, ObservablePoint, extras, Graphics, mesh, particles, Sprite, Text } from 'pixi.js';\nimport React, { useEffect, useContext } from 'react';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments to provide\n * information about what broke and what you were expecting.\n *\n * The invariant message will be stripped in production, but the invariant will\n * remain to ensure logic does not differ in production.\n */\n\n\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return String(args[argIndex++]);\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // Skip invariant's own stack frame.\n\n    throw error;\n  }\n}\n\nvar invariant_1 = invariant;\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n * @format\n */\n\n/**\n * Traverses properties on objects and arrays. If an intermediate property is\n * either null or undefined, it is instead returned. The purpose of this method\n * is to simplify extracting properties from a chain of maybe-typed properties.\n *\n * === EXAMPLE ===\n *\n * Consider the following type:\n *\n *   const props: {\n *     user: ?{\n *       name: string,\n *       friends: ?Array<User>,\n *     }\n *   };\n *\n * Getting to the friends of my first friend would resemble:\n *\n *   props.user &&\n *   props.user.friends &&\n *   props.user.friends[0] &&\n *   props.user.friends[0].friends\n *\n * Instead, `idx` allows us to safely write:\n *\n *   idx(props, _ => _.user.friends[0].friends)\n *\n * The second argument must be a function that returns one or more nested member\n * expressions. Any other expression has undefined behavior.\n *\n * === NOTE ===\n *\n * The code below exists for the purpose of illustrating expected behavior and\n * is not meant to be executed. The `idx` function is used in conjunction with a\n * Babel transform that replaces it with better performing code:\n *\n *   props.user == null ? props.user :\n *   props.user.friends == null ? props.user.friends :\n *   props.user.friends[0] == null ? props.user.friends[0] :\n *   props.user.friends[0].friends\n *\n * All this machinery exists due to the fact that an existential operator does\n * not currently exist in JavaScript.\n */\n\nfunction idx(input, accessor) {\n  try {\n    return accessor(input);\n  } catch (error) {\n    if (error instanceof TypeError) {\n      if (nullPattern.test(error)) {\n        return null;\n      } else if (undefinedPattern.test(error)) {\n        return undefined;\n      }\n    }\n\n    throw error;\n  }\n}\n/**\n * Some actual error messages for null:\n *\n * TypeError: Cannot read property 'bar' of null\n * TypeError: Cannot convert null value to object\n * TypeError: foo is null\n * TypeError: null has no properties\n * TypeError: null is not an object (evaluating 'foo.bar')\n * TypeError: null is not an object (evaluating '(\" undefined \", null).bar')\n */\n\n\nvar nullPattern = /^null | null$|^[^(]* null /i;\nvar undefinedPattern = /^undefined | undefined$|^[^(]* undefined /i;\nidx.default = idx;\nvar idx_1 = idx;\n/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\n\nfunction isNil(value) {\n  return value == null;\n}\n\nvar isNil_1 = isNil;\n/**\n * Parse PIXI point value to array of coordinates\n *\n * @param {*} value\n * @returns {Array}\n */\n\nfunction parsePoint(value) {\n  var arr = [];\n\n  if (typeof value === 'undefined') {\n    return arr;\n  } else if (typeof value === 'string') {\n    arr = value.split(',');\n  } else if (typeof value === 'number') {\n    arr = [value];\n  } else if (Array.isArray(value)) {\n    arr = _toConsumableArray(value);\n  } else if (value !== null && _typeof(value) === 'object') {\n    var x = idx_1(value, function (_) {\n      return _.x;\n    }) || 0;\n    var y = idx_1(value, function (_) {\n      return _.y;\n    }) || 0;\n    arr = [x, y];\n  } else {\n    return arr;\n  }\n\n  return arr.filter(function (p) {\n    return !isNil_1(p) && !isNaN(p);\n  }).map(Number);\n}\n/**\n * Determine value is type of Point or ObservablePoint\n * See https://github.com/michalochman/react-pixi-fiber/blob/a4dbddbef0ffbf0f563c64d30766ea28222a51ea/src/utils.js#L48\n *\n * @param {*} value\n * @returns {boolean}\n */\n\n\nfunction isPointType(value) {\n  return value instanceof Point || value instanceof ObservablePoint;\n}\n/**\n * Event handlers\n *\n * @type {string[]}\n */\n\n\nvar eventHandlers = ['click', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mouseupoutside', 'tap', 'touchstart', 'touchmove', 'touchend', 'touchendoutside', 'pointercancel', 'pointerout', 'pointerover', 'pointertap', 'pointerdown', 'pointerup', 'pointerupoutside', 'pointermove', 'rightclick', 'rightdown', 'rightup', 'rightupoutside', 'touchcancel', 'touchendoutside', 'touchmove', 'touchstart'];\n/**\n * Set value on a PIXI.DisplayObject\n * See https://github.com/Izzimach/react-pixi/blob/a25196251a13ed9bb116a8576d93e9fceac2a14c/src/ReactPIXI.js#L114\n *\n * @param {PIXI.DisplayObject} instance\n * @param {string} prop\n * @param {*} value\n */\n\nfunction setValue(instance, prop, value) {\n  if (isPointType(instance[prop]) && isPointType(value)) {\n    // copy value\n    instance[prop].copy(value);\n  } else if (isPointType(instance[prop])) {\n    // parse value if a non-Point type is being assigned to a Point type\n    var coordinates = parsePoint(value);\n    invariant_1(typeof coordinates !== 'undefined' && coordinates.length > 0 && coordinates.length < 3, 'The property `%s` is a `PIXI.Point` or `PIXI.ObservablePoint` and must be set to a comma-separated string of ' + 'either 1 or 2 coordinates, a 1 or 2 element array containing coordinates, or a PIXI Point/ObservablePoint. ' + 'If only one coordinate is given then X and Y will be set to the provided value. Received: `%s` of type `%s`.', prop, JSON.stringify(value), _typeof(value));\n    instance[prop].set(coordinates.shift(), coordinates.shift());\n  } else {\n    // just hard assign value\n    instance[prop] = value;\n  }\n}\n\nvar isFunction = function isFunction() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.reduce(function (a, b) {\n    return a && typeof b === 'function';\n  }, true);\n};\n\nvar isObject = function isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n};\n\nvar hasKey = function hasKey(collection) {\n  var coll = collection;\n\n  if (!Array.isArray(coll)) {\n    if (isObject(collection)) {\n      coll = Object.keys(collection);\n    } else {\n      throw new Error('collection needs to be an Array or Object');\n    }\n  }\n\n  return function (key) {\n    return coll.indexOf(key) !== -1;\n  };\n}; // See https://github.com/michalochman/react-pixi-fiber/blob/a4dbddbef0ffbf0f563c64d30766ea28222a51ea/src/utils.js#L7\n\n\nvar not = function not(boolFn) {\n  return function () {\n    return !boolFn.apply(void 0, arguments);\n  };\n};\n\nvar runningInBrowser = function runningInBrowser() {\n  return Boolean(window);\n};\n\nvar _PROPS_RESERVED;\n\nvar CHILDREN = 'children';\n/**\n * Reserved props\n *\n * @type {Object}\n */\n\nvar PROPS_RESERVED = (_PROPS_RESERVED = {}, _defineProperty(_PROPS_RESERVED, CHILDREN, true), _defineProperty(_PROPS_RESERVED, \"parent\", true), _defineProperty(_PROPS_RESERVED, \"worldAlpha\", true), _defineProperty(_PROPS_RESERVED, \"worldTransform\", true), _defineProperty(_PROPS_RESERVED, \"worldVisible\", true), _PROPS_RESERVED);\n/**\n * Default display object props\n * See https://github.com/michalochman/react-pixi-fiber/blob/a4dbddbef0ffbf0f563c64d30766ea28222a51ea/src/props.js#L9\n *\n * @type {Object}\n */\n\nvar PROPS_DISPLAY_OBJECT = {\n  alpha: 1,\n  buttonMode: false,\n  cacheAsBitmap: false,\n  cursor: null,\n  filterArea: null,\n  filters: null,\n  hitArea: null,\n  interactive: false,\n  mask: null,\n  pivot: 0,\n  position: 0,\n  renderable: true,\n  rotation: 0,\n  scale: 1,\n  skew: 0,\n  transform: null,\n  visible: true,\n  x: 0,\n  y: 0\n  /**\n   * Helper util for fetching the texture from props\n   * Can be either texture or image\n   *\n   * @param {string} elementType\n   * @param {PIXI.Texture} texture\n   * @param {string|undefined} image\n   * @returns {PIXI.Texture}\n   */\n\n};\n\nvar getTextureFromProps = function getTextureFromProps(elementType, _ref) {\n  var _ref$texture = _ref.texture,\n      texture = _ref$texture === void 0 ? undefined : _ref$texture,\n      _ref$image = _ref.image,\n      image = _ref$image === void 0 ? undefined : _ref$image;\n\n  if (image) {\n    invariant_1(typeof image === 'string', elementType + ' image needs to be a string, got `%s`', _typeof(image));\n    return Texture.fromImage(image);\n  }\n\n  invariant_1(texture instanceof Texture, elementType + ' texture needs to be typeof `PIXI.Texture`');\n  return texture;\n};\n/**\n * Apply default props on Display Object instance (which are all components)\n *\n * @param {PIXI.DisplayObject} instance\n * @param {Object} oldProps\n * @param {Object} newProps\n */\n\n\nfunction applyDefaultProps(instance, oldProps, newProps) {\n  invariant_1(DisplayObject.prototype.isPrototypeOf(instance), 'instance needs to be typeof `PIXI.DisplayObject`, ' + 'got `%s`', _typeof(instance)); // update event handlers\n\n  if (!newProps.ignoreEvents) {\n    eventHandlers.forEach(function (evt) {\n      isFunction(oldProps[evt], instance.removeListener) && instance.removeListener(evt, oldProps[evt]);\n      isFunction(newProps[evt], instance.on) && instance.on(evt, newProps[evt]);\n    });\n  } // hard overwrite all props? can speed up performance\n\n\n  if (newProps.overwriteProps) {\n    for (var p in newProps) {\n      if (oldProps[p] !== newProps[p]) {\n        setValue(instance, p, newProps[p]);\n      }\n    }\n\n    return;\n  }\n\n  var props = Object.keys(newProps || {}).filter(not(hasKey(PROPS_RESERVED))).filter(not(hasKey(eventHandlers)));\n  props.forEach(function (prop) {\n    var value = newProps[prop];\n\n    if (!isNil_1(value)) {\n      // set value if defined\n      setValue(instance, prop, value);\n    } else if (!isNil_1(instance[prop]) && prop in PROPS_DISPLAY_OBJECT) {\n      // is a default value, use that\n      console.warn(\"setting default value: \".concat(prop, \", from: \").concat(instance[prop], \" to: \").concat(value, \" for\"), instance);\n      setValue(instance, prop, PROPS_DISPLAY_OBJECT[prop]);\n    } else {\n      console.warn(\"ignoring prop: \".concat(prop, \", from \").concat(instance[prop], \" to \").concat(value, \" for\"), instance);\n    }\n  });\n}\n\nvar BitmapText = function BitmapText(root, props) {\n  var text = props.text,\n      style = props.style;\n  return new extras.BitmapText(text, style);\n};\n\nvar Container$1 = function Container$$1() {\n  return new Container();\n};\n\nvar Graphics$1 = function Graphics$$1(root, props) {\n  var g = new Graphics();\n\n  g.applyProps = function (instance, oldProps, newProps) {\n    var draw = newProps.draw,\n        props = _objectWithoutProperties(newProps, [\"draw\"]);\n\n    applyDefaultProps(instance, oldProps, props);\n\n    if (draw && typeof draw === 'function') {\n      draw.call(g, g);\n    }\n  };\n\n  return g;\n};\n\nvar NineSlicePlane = function NineSlicePlane(root, props) {\n  var _props$leftWidth = props.leftWidth,\n      leftWidth = _props$leftWidth === void 0 ? 10 : _props$leftWidth,\n      _props$topHeight = props.topHeight,\n      topHeight = _props$topHeight === void 0 ? 10 : _props$topHeight,\n      _props$rightWidth = props.rightWidth,\n      rightWidth = _props$rightWidth === void 0 ? 10 : _props$rightWidth,\n      _props$bottomHeight = props.bottomHeight,\n      bottomHeight = _props$bottomHeight === void 0 ? 10 : _props$bottomHeight;\n  var texture = getTextureFromProps('NineSlicePlane', props);\n  var nineSlicePlane = new mesh.NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight);\n\n  nineSlicePlane.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n        texture = newProps.texture,\n        props = _objectWithoutProperties(newProps, [\"image\", \"texture\"]);\n\n    applyDefaultProps(instance, oldProps, props);\n\n    if (image || texture) {\n      instance.texture = getTextureFromProps('NineSlicePlane', newProps);\n    }\n  };\n\n  return nineSlicePlane;\n};\n\nvar ParticleContainer = function ParticleContainer(root, props) {\n  var _props$maxSize = props.maxSize,\n      maxSize = _props$maxSize === void 0 ? 1500 : _props$maxSize,\n      _props$batchSize = props.batchSize,\n      batchSize = _props$batchSize === void 0 ? 16384 : _props$batchSize,\n      _props$autoResize = props.autoResize,\n      autoResize = _props$autoResize === void 0 ? false : _props$autoResize;\n\n  var properties = _objectSpread({}, {\n    vertices: false,\n    scale: true,\n    position: true,\n    rotation: true,\n    uvs: true,\n    tint: true\n  }, props.properties || {});\n\n  var destroyOptions = _objectSpread({}, {\n    children: false,\n    texture: false,\n    baseTexture: false\n  }, props.destroyOptions || {});\n\n  var container = new particles.ParticleContainer(maxSize, properties, batchSize, autoResize);\n\n  container.willUnmount = function (instance, child, parent) {\n    instance.destroy(destroyOptions);\n  };\n\n  return container;\n};\n\nvar Sprite$1 = function Sprite$$1(root, props) {\n  var sprite = new Sprite(getTextureFromProps('Sprite', props));\n\n  sprite.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n        texture = newProps.texture,\n        props = _objectWithoutProperties(newProps, [\"image\", \"texture\"]);\n\n    applyDefaultProps(instance, oldProps, props);\n\n    if (texture && oldProps.texture !== newProps.texture || image && oldProps.image !== newProps.image) {\n      instance.texture = getTextureFromProps('Sprite', newProps);\n    }\n  };\n\n  return sprite;\n};\n\nvar Text$1 = function Text$$1(root, props) {\n  var _props$text = props.text,\n      text = _props$text === void 0 ? '' : _props$text,\n      _props$style = props.style,\n      style = _props$style === void 0 ? {} : _props$style;\n  return new Text(text, style);\n};\n\nvar TilingSprite = function TilingSprite(root, props) {\n  var _props$width = props.width,\n      width = _props$width === void 0 ? 100 : _props$width,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 100 : _props$height;\n  var texture = getTextureFromProps('TilingSprite', props);\n  var ts = new extras.TilingSprite(texture, width, height);\n\n  ts.applyProps = function (instance, oldProps, newProps) {\n    var tileScale = newProps.tileScale,\n        tilePosition = newProps.tilePosition,\n        image = newProps.image,\n        texture = newProps.texture,\n        props = _objectWithoutProperties(newProps, [\"tileScale\", \"tilePosition\", \"image\", \"texture\"]);\n\n    applyDefaultProps(instance, oldProps, props);\n\n    if (tilePosition) {\n      var _instance$tilePositio;\n\n      (_instance$tilePositio = instance.tilePosition).set.apply(_instance$tilePositio, _toConsumableArray(parsePoint(tilePosition)));\n    }\n\n    if (tileScale) {\n      var _instance$tileScale;\n\n      (_instance$tileScale = instance.tileScale).set.apply(_instance$tileScale, _toConsumableArray(parsePoint(tileScale)));\n    }\n\n    if (image || texture) {\n      instance.texture = getTextureFromProps('Sprite', newProps);\n    }\n  };\n\n  return ts;\n};\n\nvar Mesh = function Mesh(root, props) {\n  var texture = getTextureFromProps('Mesh', props);\n  var vertices = props.vertices,\n      uvs = props.uvs,\n      indices = props.indices,\n      _props$drawMode = props.drawMode,\n      drawMode = _props$drawMode === void 0 ? mesh.Mesh.DRAW_MODES.TRIANGLES : _props$drawMode;\n  var mesh$$1 = new mesh.Mesh(texture, vertices, uvs, indices, drawMode);\n\n  mesh$$1.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n        texture = newProps.texture,\n        props = _objectWithoutProperties(newProps, [\"image\", \"texture\"]);\n\n    applyDefaultProps(instance, oldProps, props);\n\n    if (image || texture) {\n      instance.texture = getTextureFromProps('Mesh', newProps);\n    }\n  };\n\n  return mesh$$1;\n};\n\nvar Rope = function Rope(root, props) {\n  var texture = getTextureFromProps('Rope', props);\n  var points = props.points;\n  var rope = new mesh.Rope(texture, points);\n\n  rope.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n        texture = newProps.texture,\n        props = _objectWithoutProperties(newProps, [\"image\", \"texture\"]);\n\n    invariant_1(Array.isArray(newProps.points), 'Rope points needs to be %s', 'Array<PIXI.Point>');\n    applyDefaultProps(instance, oldProps, props);\n\n    if (image || texture) {\n      instance.texture = getTextureFromProps('Rope', newProps);\n    }\n  };\n\n  return rope;\n};\n\nvar components =\n/*#__PURE__*/\nObject.freeze({\n  BitmapText: BitmapText,\n  Container: Container$1,\n  Graphics: Graphics$1,\n  NineSlicePlane: NineSlicePlane,\n  ParticleContainer: ParticleContainer,\n  Sprite: Sprite$1,\n  Text: Text$1,\n  TilingSprite: TilingSprite,\n  Mesh: Mesh,\n  Rope: Rope\n});\n/**\n * Available tag types\n *\n * @type {Object}\n */\n\nvar TYPES = {\n  BitmapText: 'BitmapText',\n  Container: 'Container',\n  Graphics: 'Graphics',\n  NineSlicePlane: 'NineSlicePlane',\n  ParticleContainer: 'ParticleContainer',\n  Sprite: 'Sprite',\n  Text: 'Text',\n  TilingSprite: 'TilingSprite',\n  Mesh: 'Mesh',\n  Rope: 'Rope'\n};\nvar ELEMENTS = Object.keys(TYPES).reduce(function (elements, type) {\n  return _objectSpread({}, elements, _defineProperty({}, type, components[type]));\n}, {});\n/**\n * Inject types\n *\n * @type {Object}\n */\n\nvar TYPES_INJECTED = {};\n/**\n * Create an element based on tag type\n * Similar to react-dom's `React.createElement()`\n *\n * @param {string} type Element type\n * @param {Object} props Component props\n * @param {Object} root Root instance\n * @returns {PIXI.*|undefined}\n */\n\nfunction createElement(type) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var fn = ELEMENTS[type];\n  var instance;\n  var applyProps;\n\n  if (typeof fn === 'function') {\n    instance = fn(root, props);\n  }\n\n  if (!instance) {\n    // not found, is there any injected custom component?\n    var injected = TYPES_INJECTED[type];\n\n    if (injected) {\n      instance = injected.create(props);\n      instance.didMount = injected.didMount ? injected.didMount.bind(instance) : undefined;\n      instance.willUnmount = injected.willUnmount ? injected.willUnmount.bind(instance) : undefined;\n      instance.applyProps = injected.applyProps ? injected.applyProps.bind(instance) : undefined;\n    }\n  } // apply initial props!\n\n\n  if (instance) {\n    applyProps = idx_1(instance, function (_) {\n      return _.applyProps;\n    });\n\n    if (typeof applyProps !== 'function') {\n      applyProps = applyDefaultProps;\n    }\n\n    applyProps(instance, {}, props);\n  }\n\n  return instance;\n}\n/**\n * Create Component\n *\n * @param {string} type\n * @param {Object} lifecycle methods\n */\n\n\nfunction PixiComponent(type, lifecycle) {\n  invariant_1(!!type, 'Expect type to be defined, got `%s`', type);\n  invariant_1(!TYPES[type], 'Component `%s` could not be created, already exists in default components.', type);\n  TYPES_INJECTED[type] = lifecycle;\n  return type;\n}\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction unwrapExports(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nvar objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};\nvar scheduler_production_min = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: !0\n  });\n  var d = null,\n      f = !1,\n      h = 3,\n      k = -1,\n      l = -1,\n      m = !1,\n      n = !1;\n\n  function p() {\n    if (!m) {\n      var a = d.expirationTime;\n      n ? q() : n = !0;\n      r(t, a);\n    }\n  }\n\n  function u() {\n    var a = d,\n        b = d.next;\n    if (d === b) d = null;else {\n      var c = d.previous;\n      d = c.next = b;\n      b.previous = c;\n    }\n    a.next = a.previous = null;\n    c = a.callback;\n    b = a.expirationTime;\n    a = a.priorityLevel;\n    var e = h,\n        Q = l;\n    h = a;\n    l = b;\n\n    try {\n      var g = c();\n    } finally {\n      h = e, l = Q;\n    }\n\n    if (\"function\" === typeof g) if (g = {\n      callback: g,\n      priorityLevel: a,\n      expirationTime: b,\n      next: null,\n      previous: null\n    }, null === d) d = g.next = g.previous = g;else {\n      c = null;\n      a = d;\n\n      do {\n        if (a.expirationTime >= b) {\n          c = a;\n          break;\n        }\n\n        a = a.next;\n      } while (a !== d);\n\n      null === c ? c = d : c === d && (d = g, p());\n      b = c.previous;\n      b.next = c.previous = g;\n      g.next = c;\n      g.previous = b;\n    }\n  }\n\n  function v() {\n    if (-1 === k && null !== d && 1 === d.priorityLevel) {\n      m = !0;\n\n      try {\n        do u(); while (null !== d && 1 === d.priorityLevel);\n      } finally {\n        m = !1, null !== d ? p() : n = !1;\n      }\n    }\n  }\n\n  function t(a) {\n    m = !0;\n    var b = f;\n    f = a;\n\n    try {\n      if (a) for (; null !== d;) {\n        var c = exports.unstable_now();\n\n        if (d.expirationTime <= c) {\n          do u(); while (null !== d && d.expirationTime <= c);\n        } else break;\n      } else if (null !== d) {\n        do u(); while (null !== d && !w());\n      }\n    } finally {\n      m = !1, f = b, null !== d ? p() : n = !1, v();\n    }\n  }\n\n  var x = Date,\n      y = \"function\" === typeof setTimeout ? setTimeout : void 0,\n      z = \"function\" === typeof clearTimeout ? clearTimeout : void 0,\n      A = \"function\" === typeof requestAnimationFrame ? requestAnimationFrame : void 0,\n      B = \"function\" === typeof cancelAnimationFrame ? cancelAnimationFrame : void 0,\n      C,\n      D;\n\n  function E(a) {\n    C = A(function (b) {\n      z(D);\n      a(b);\n    });\n    D = y(function () {\n      B(C);\n      a(exports.unstable_now());\n    }, 100);\n  }\n\n  if (\"object\" === typeof performance && \"function\" === typeof performance.now) {\n    var F = performance;\n\n    exports.unstable_now = function () {\n      return F.now();\n    };\n  } else exports.unstable_now = function () {\n    return x.now();\n  };\n\n  var r, q, w;\n\n  if (\"undefined\" !== typeof window && window._schedMock) {\n    var G = window._schedMock;\n    r = G[0];\n    q = G[1];\n    w = G[2];\n  } else if (\"undefined\" === typeof window || \"function\" !== typeof window.addEventListener) {\n    var H = null,\n        I = -1,\n        J = function (a, b) {\n      if (null !== H) {\n        var c = H;\n        H = null;\n\n        try {\n          I = b, c(a);\n        } finally {\n          I = -1;\n        }\n      }\n    };\n\n    r = function (a, b) {\n      -1 !== I ? setTimeout(r, 0, a, b) : (H = a, setTimeout(J, b, !0, b), setTimeout(J, 1073741823, !1, 1073741823));\n    };\n\n    q = function () {\n      H = null;\n    };\n\n    w = function () {\n      return !1;\n    };\n\n    exports.unstable_now = function () {\n      return -1 === I ? 0 : I;\n    };\n  } else {\n    \"undefined\" !== typeof console && (\"function\" !== typeof A && console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\"), \"function\" !== typeof B && console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\"));\n    var K = null,\n        L = !1,\n        M = -1,\n        N = !1,\n        O = !1,\n        P = 0,\n        R = 33,\n        S = 33;\n\n    w = function () {\n      return P <= exports.unstable_now();\n    };\n\n    var T = \"__reactIdleCallback$\" + Math.random().toString(36).slice(2);\n    window.addEventListener(\"message\", function (a) {\n      if (a.source === window && a.data === T) {\n        L = !1;\n        a = K;\n        var b = M;\n        K = null;\n        M = -1;\n        var c = exports.unstable_now(),\n            e = !1;\n        if (0 >= P - c) if (-1 !== b && b <= c) e = !0;else {\n          N || (N = !0, E(U));\n          K = a;\n          M = b;\n          return;\n        }\n\n        if (null !== a) {\n          O = !0;\n\n          try {\n            a(e);\n          } finally {\n            O = !1;\n          }\n        }\n      }\n    }, !1);\n\n    var U = function (a) {\n      if (null !== K) {\n        E(U);\n        var b = a - P + S;\n        b < S && R < S ? (8 > b && (b = 8), S = b < R ? R : b) : R = b;\n        P = a + S;\n        L || (L = !0, window.postMessage(T, \"*\"));\n      } else N = !1;\n    };\n\n    r = function (a, b) {\n      K = a;\n      M = b;\n      O || 0 > b ? window.postMessage(T, \"*\") : N || (N = !0, E(U));\n    };\n\n    q = function () {\n      K = null;\n      L = !1;\n      M = -1;\n    };\n  }\n\n  exports.unstable_ImmediatePriority = 1;\n  exports.unstable_UserBlockingPriority = 2;\n  exports.unstable_NormalPriority = 3;\n  exports.unstable_IdlePriority = 5;\n  exports.unstable_LowPriority = 4;\n\n  exports.unstable_runWithPriority = function (a, b) {\n    switch (a) {\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n        break;\n\n      default:\n        a = 3;\n    }\n\n    var c = h,\n        e = k;\n    h = a;\n    k = exports.unstable_now();\n\n    try {\n      return b();\n    } finally {\n      h = c, k = e, v();\n    }\n  };\n\n  exports.unstable_scheduleCallback = function (a, b) {\n    var c = -1 !== k ? k : exports.unstable_now();\n    if (\"object\" === typeof b && null !== b && \"number\" === typeof b.timeout) b = c + b.timeout;else switch (h) {\n      case 1:\n        b = c + -1;\n        break;\n\n      case 2:\n        b = c + 250;\n        break;\n\n      case 5:\n        b = c + 1073741823;\n        break;\n\n      case 4:\n        b = c + 1E4;\n        break;\n\n      default:\n        b = c + 5E3;\n    }\n    a = {\n      callback: a,\n      priorityLevel: h,\n      expirationTime: b,\n      next: null,\n      previous: null\n    };\n    if (null === d) d = a.next = a.previous = a, p();else {\n      c = null;\n      var e = d;\n\n      do {\n        if (e.expirationTime > b) {\n          c = e;\n          break;\n        }\n\n        e = e.next;\n      } while (e !== d);\n\n      null === c ? c = d : c === d && (d = a, p());\n      b = c.previous;\n      b.next = c.previous = a;\n      a.next = c;\n      a.previous = b;\n    }\n    return a;\n  };\n\n  exports.unstable_cancelCallback = function (a) {\n    var b = a.next;\n\n    if (null !== b) {\n      if (b === a) d = null;else {\n        a === d && (d = b);\n        var c = a.previous;\n        c.next = b;\n        b.previous = c;\n      }\n      a.next = a.previous = null;\n    }\n  };\n\n  exports.unstable_wrapCallback = function (a) {\n    var b = h;\n    return function () {\n      var c = h,\n          e = k;\n      h = b;\n      k = exports.unstable_now();\n\n      try {\n        return a.apply(this, arguments);\n      } finally {\n        h = c, k = e, v();\n      }\n    };\n  };\n\n  exports.unstable_getCurrentPriorityLevel = function () {\n    return h;\n  };\n\n  exports.unstable_shouldYield = function () {\n    return !f && (null !== d && d.expirationTime < l || w());\n  };\n});\nunwrapExports(scheduler_production_min);\nvar scheduler_production_min_1 = scheduler_production_min.unstable_now;\nvar scheduler_production_min_2 = scheduler_production_min.unstable_ImmediatePriority;\nvar scheduler_production_min_3 = scheduler_production_min.unstable_UserBlockingPriority;\nvar scheduler_production_min_4 = scheduler_production_min.unstable_NormalPriority;\nvar scheduler_production_min_5 = scheduler_production_min.unstable_IdlePriority;\nvar scheduler_production_min_6 = scheduler_production_min.unstable_LowPriority;\nvar scheduler_production_min_7 = scheduler_production_min.unstable_runWithPriority;\nvar scheduler_production_min_8 = scheduler_production_min.unstable_scheduleCallback;\nvar scheduler_production_min_9 = scheduler_production_min.unstable_cancelCallback;\nvar scheduler_production_min_10 = scheduler_production_min.unstable_wrapCallback;\nvar scheduler_production_min_11 = scheduler_production_min.unstable_getCurrentPriorityLevel;\nvar scheduler_production_min_12 = scheduler_production_min.unstable_shouldYield;\nvar scheduler_development = createCommonjsModule(function (module, exports) {\n  {\n    (function () {\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      /* eslint-disable no-var */\n      // TODO: Use symbols?\n\n      var ImmediatePriority = 1;\n      var UserBlockingPriority = 2;\n      var NormalPriority = 3;\n      var LowPriority = 4;\n      var IdlePriority = 5; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n      // Math.pow(2, 30) - 1\n      // 0b111111111111111111111111111111\n\n      var maxSigned31BitInt = 1073741823; // Times out immediately\n\n      var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n      var USER_BLOCKING_PRIORITY = 250;\n      var NORMAL_PRIORITY_TIMEOUT = 5000;\n      var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n      var IDLE_PRIORITY = maxSigned31BitInt; // Callbacks are stored as a circular, doubly linked list.\n\n      var firstCallbackNode = null;\n      var currentDidTimeout = false;\n      var currentPriorityLevel = NormalPriority;\n      var currentEventStartTime = -1;\n      var currentExpirationTime = -1; // This is set when a callback is being executed, to prevent re-entrancy.\n\n      var isExecutingCallback = false;\n      var isHostCallbackScheduled = false;\n      var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\n      function ensureHostCallbackIsScheduled() {\n        if (isExecutingCallback) {\n          // Don't schedule work yet; wait until the next time we yield.\n          return;\n        } // Schedule the host callback using the earliest expiration in the list.\n\n\n        var expirationTime = firstCallbackNode.expirationTime;\n\n        if (!isHostCallbackScheduled) {\n          isHostCallbackScheduled = true;\n        } else {\n          // Cancel the existing host callback.\n          cancelHostCallback();\n        }\n\n        requestHostCallback(flushWork, expirationTime);\n      }\n\n      function flushFirstCallback() {\n        var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the\n        // list is in a consistent state even if the callback throws.\n\n        var next = firstCallbackNode.next;\n\n        if (firstCallbackNode === next) {\n          // This is the last callback in the list.\n          firstCallbackNode = null;\n          next = null;\n        } else {\n          var lastCallbackNode = firstCallbackNode.previous;\n          firstCallbackNode = lastCallbackNode.next = next;\n          next.previous = lastCallbackNode;\n        }\n\n        flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.\n\n        var callback = flushedNode.callback;\n        var expirationTime = flushedNode.expirationTime;\n        var priorityLevel = flushedNode.priorityLevel;\n        var previousPriorityLevel = currentPriorityLevel;\n        var previousExpirationTime = currentExpirationTime;\n        currentPriorityLevel = priorityLevel;\n        currentExpirationTime = expirationTime;\n        var continuationCallback;\n\n        try {\n          continuationCallback = callback();\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n          currentExpirationTime = previousExpirationTime;\n        } // A callback may return a continuation. The continuation should be scheduled\n        // with the same priority and expiration as the just-finished callback.\n\n\n        if (typeof continuationCallback === 'function') {\n          var continuationNode = {\n            callback: continuationCallback,\n            priorityLevel: priorityLevel,\n            expirationTime: expirationTime,\n            next: null,\n            previous: null\n          }; // Insert the new callback into the list, sorted by its expiration. This is\n          // almost the same as the code in `scheduleCallback`, except the callback\n          // is inserted into the list *before* callbacks of equal expiration instead\n          // of after.\n\n          if (firstCallbackNode === null) {\n            // This is the first callback in the list.\n            firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;\n          } else {\n            var nextAfterContinuation = null;\n            var node = firstCallbackNode;\n\n            do {\n              if (node.expirationTime >= expirationTime) {\n                // This callback expires at or after the continuation. We will insert\n                // the continuation *before* this callback.\n                nextAfterContinuation = node;\n                break;\n              }\n\n              node = node.next;\n            } while (node !== firstCallbackNode);\n\n            if (nextAfterContinuation === null) {\n              // No equal or lower priority callback was found, which means the new\n              // callback is the lowest priority callback in the list.\n              nextAfterContinuation = firstCallbackNode;\n            } else if (nextAfterContinuation === firstCallbackNode) {\n              // The new callback is the highest priority callback in the list.\n              firstCallbackNode = continuationNode;\n              ensureHostCallbackIsScheduled();\n            }\n\n            var previous = nextAfterContinuation.previous;\n            previous.next = nextAfterContinuation.previous = continuationNode;\n            continuationNode.next = nextAfterContinuation;\n            continuationNode.previous = previous;\n          }\n        }\n      }\n\n      function flushImmediateWork() {\n        if ( // Confirm we've exited the outer most event handler\n        currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {\n          isExecutingCallback = true;\n\n          try {\n            do {\n              flushFirstCallback();\n            } while ( // Keep flushing until there are no more immediate callbacks\n            firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);\n          } finally {\n            isExecutingCallback = false;\n\n            if (firstCallbackNode !== null) {\n              // There's still work remaining. Request another callback.\n              ensureHostCallbackIsScheduled();\n            } else {\n              isHostCallbackScheduled = false;\n            }\n          }\n        }\n      }\n\n      function flushWork(didTimeout) {\n        isExecutingCallback = true;\n        var previousDidTimeout = currentDidTimeout;\n        currentDidTimeout = didTimeout;\n\n        try {\n          if (didTimeout) {\n            // Flush all the expired callbacks without yielding.\n            while (firstCallbackNode !== null) {\n              // Read the current time. Flush all the callbacks that expire at or\n              // earlier than that time. Then read the current time again and repeat.\n              // This optimizes for as few performance.now calls as possible.\n              var currentTime = exports.unstable_now();\n\n              if (firstCallbackNode.expirationTime <= currentTime) {\n                do {\n                  flushFirstCallback();\n                } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);\n\n                continue;\n              }\n\n              break;\n            }\n          } else {\n            // Keep flushing callbacks until we run out of time in the frame.\n            if (firstCallbackNode !== null) {\n              do {\n                flushFirstCallback();\n              } while (firstCallbackNode !== null && !shouldYieldToHost());\n            }\n          }\n        } finally {\n          isExecutingCallback = false;\n          currentDidTimeout = previousDidTimeout;\n\n          if (firstCallbackNode !== null) {\n            // There's still work remaining. Request another callback.\n            ensureHostCallbackIsScheduled();\n          } else {\n            isHostCallbackScheduled = false;\n          } // Before exiting, flush all the immediate work that was scheduled.\n\n\n          flushImmediateWork();\n        }\n      }\n\n      function unstable_runWithPriority(priorityLevel, eventHandler) {\n        switch (priorityLevel) {\n          case ImmediatePriority:\n          case UserBlockingPriority:\n          case NormalPriority:\n          case LowPriority:\n          case IdlePriority:\n            break;\n\n          default:\n            priorityLevel = NormalPriority;\n        }\n\n        var previousPriorityLevel = currentPriorityLevel;\n        var previousEventStartTime = currentEventStartTime;\n        currentPriorityLevel = priorityLevel;\n        currentEventStartTime = exports.unstable_now();\n\n        try {\n          return eventHandler();\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n          currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.\n\n          flushImmediateWork();\n        }\n      }\n\n      function unstable_wrapCallback(callback) {\n        var parentPriorityLevel = currentPriorityLevel;\n        return function () {\n          // This is a fork of runWithPriority, inlined for performance.\n          var previousPriorityLevel = currentPriorityLevel;\n          var previousEventStartTime = currentEventStartTime;\n          currentPriorityLevel = parentPriorityLevel;\n          currentEventStartTime = exports.unstable_now();\n\n          try {\n            return callback.apply(this, arguments);\n          } finally {\n            currentPriorityLevel = previousPriorityLevel;\n            currentEventStartTime = previousEventStartTime;\n            flushImmediateWork();\n          }\n        };\n      }\n\n      function unstable_scheduleCallback(callback, deprecated_options) {\n        var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();\n        var expirationTime;\n\n        if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {\n          // FIXME: Remove this branch once we lift expiration times out of React.\n          expirationTime = startTime + deprecated_options.timeout;\n        } else {\n          switch (currentPriorityLevel) {\n            case ImmediatePriority:\n              expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;\n              break;\n\n            case UserBlockingPriority:\n              expirationTime = startTime + USER_BLOCKING_PRIORITY;\n              break;\n\n            case IdlePriority:\n              expirationTime = startTime + IDLE_PRIORITY;\n              break;\n\n            case LowPriority:\n              expirationTime = startTime + LOW_PRIORITY_TIMEOUT;\n              break;\n\n            case NormalPriority:\n            default:\n              expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;\n          }\n        }\n\n        var newNode = {\n          callback: callback,\n          priorityLevel: currentPriorityLevel,\n          expirationTime: expirationTime,\n          next: null,\n          previous: null\n        }; // Insert the new callback into the list, ordered first by expiration, then\n        // by insertion. So the new callback is inserted any other callback with\n        // equal expiration.\n\n        if (firstCallbackNode === null) {\n          // This is the first callback in the list.\n          firstCallbackNode = newNode.next = newNode.previous = newNode;\n          ensureHostCallbackIsScheduled();\n        } else {\n          var next = null;\n          var node = firstCallbackNode;\n\n          do {\n            if (node.expirationTime > expirationTime) {\n              // The new callback expires before this one.\n              next = node;\n              break;\n            }\n\n            node = node.next;\n          } while (node !== firstCallbackNode);\n\n          if (next === null) {\n            // No callback with a later expiration was found, which means the new\n            // callback has the latest expiration in the list.\n            next = firstCallbackNode;\n          } else if (next === firstCallbackNode) {\n            // The new callback has the earliest expiration in the entire list.\n            firstCallbackNode = newNode;\n            ensureHostCallbackIsScheduled();\n          }\n\n          var previous = next.previous;\n          previous.next = next.previous = newNode;\n          newNode.next = next;\n          newNode.previous = previous;\n        }\n\n        return newNode;\n      }\n\n      function unstable_cancelCallback(callbackNode) {\n        var next = callbackNode.next;\n\n        if (next === null) {\n          // Already cancelled.\n          return;\n        }\n\n        if (next === callbackNode) {\n          // This is the only scheduled callback. Clear the list.\n          firstCallbackNode = null;\n        } else {\n          // Remove the callback from its position in the list.\n          if (callbackNode === firstCallbackNode) {\n            firstCallbackNode = next;\n          }\n\n          var previous = callbackNode.previous;\n          previous.next = next;\n          next.previous = previous;\n        }\n\n        callbackNode.next = callbackNode.previous = null;\n      }\n\n      function unstable_getCurrentPriorityLevel() {\n        return currentPriorityLevel;\n      }\n\n      function unstable_shouldYield() {\n        return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());\n      } // The remaining code is essentially a polyfill for requestIdleCallback. It\n      // works by scheduling a requestAnimationFrame, storing the time for the start\n      // of the frame, then scheduling a postMessage which gets scheduled after paint.\n      // Within the postMessage handler do as much work as possible until time + frame\n      // rate. By separating the idle call into a separate event tick we ensure that\n      // layout, paint and other browser work is counted against the available time.\n      // The frame rate is dynamically adjusted.\n      // We capture a local reference to any global, in case it gets polyfilled after\n      // this module is initially evaluated. We want to be using a\n      // consistent implementation.\n\n\n      var localDate = Date; // This initialization code may run even on server environments if a component\n      // just imports ReactDOM (e.g. for findDOMNode). Some environments might not\n      // have setTimeout or clearTimeout. However, we always expect them to be defined\n      // on the client. https://github.com/facebook/react/pull/13088\n\n      var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\n      var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error\n      // later if they are missing on the client.\n\n      var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;\n      var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined; // requestAnimationFrame does not run when the tab is in the background. If\n      // we're backgrounded we prefer for that work to happen so that the page\n      // continues to load in the background. So we also schedule a 'setTimeout' as\n      // a fallback.\n      // TODO: Need a better heuristic for backgrounded work.\n\n      var ANIMATION_FRAME_TIMEOUT = 100;\n      var rAFID;\n      var rAFTimeoutID;\n\n      var requestAnimationFrameWithTimeout = function (callback) {\n        // schedule rAF and also a setTimeout\n        rAFID = localRequestAnimationFrame(function (timestamp) {\n          // cancel the setTimeout\n          localClearTimeout(rAFTimeoutID);\n          callback(timestamp);\n        });\n        rAFTimeoutID = localSetTimeout(function () {\n          // cancel the requestAnimationFrame\n          localCancelAnimationFrame(rAFID);\n          callback(exports.unstable_now());\n        }, ANIMATION_FRAME_TIMEOUT);\n      };\n\n      if (hasNativePerformanceNow) {\n        var Performance = performance;\n\n        exports.unstable_now = function () {\n          return Performance.now();\n        };\n      } else {\n        exports.unstable_now = function () {\n          return localDate.now();\n        };\n      }\n\n      var requestHostCallback;\n      var cancelHostCallback;\n      var shouldYieldToHost;\n\n      if (typeof window !== 'undefined' && window._schedMock) {\n        // Dynamic injection, only for testing purposes.\n        var impl = window._schedMock;\n        requestHostCallback = impl[0];\n        cancelHostCallback = impl[1];\n        shouldYieldToHost = impl[2];\n      } else if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n      // implementation using setTimeout.\n      typeof window === 'undefined' || // \"addEventListener\" might not be available on the window object\n      // if this is a mocked \"window\" object. So we need to validate that too.\n      typeof window.addEventListener !== 'function') {\n        var _callback = null;\n\n        var _currentTime = -1;\n\n        var _flushCallback = function (didTimeout, ms) {\n          if (_callback !== null) {\n            var cb = _callback;\n            _callback = null;\n\n            try {\n              _currentTime = ms;\n              cb(didTimeout);\n            } finally {\n              _currentTime = -1;\n            }\n          }\n        };\n\n        requestHostCallback = function (cb, ms) {\n          if (_currentTime !== -1) {\n            // Protect against re-entrancy.\n            setTimeout(requestHostCallback, 0, cb, ms);\n          } else {\n            _callback = cb;\n            setTimeout(_flushCallback, ms, true, ms);\n            setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);\n          }\n        };\n\n        cancelHostCallback = function () {\n          _callback = null;\n        };\n\n        shouldYieldToHost = function () {\n          return false;\n        };\n\n        exports.unstable_now = function () {\n          return _currentTime === -1 ? 0 : _currentTime;\n        };\n      } else {\n        if (typeof console !== 'undefined') {\n          // TODO: Remove fb.me link\n          if (typeof localRequestAnimationFrame !== 'function') {\n            console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n          }\n\n          if (typeof localCancelAnimationFrame !== 'function') {\n            console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n          }\n        }\n\n        var scheduledHostCallback = null;\n        var isMessageEventScheduled = false;\n        var timeoutTime = -1;\n        var isAnimationFrameScheduled = false;\n        var isFlushingHostCallback = false;\n        var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking\n        // will adjust this value to a faster fps if we get more frequent animation\n        // frames.\n\n        var previousFrameTime = 33;\n        var activeFrameTime = 33;\n\n        shouldYieldToHost = function () {\n          return frameDeadline <= exports.unstable_now();\n        }; // We use the postMessage trick to defer idle work until after the repaint.\n\n\n        var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);\n\n        var idleTick = function (event) {\n          if (event.source !== window || event.data !== messageKey) {\n            return;\n          }\n\n          isMessageEventScheduled = false;\n          var prevScheduledCallback = scheduledHostCallback;\n          var prevTimeoutTime = timeoutTime;\n          scheduledHostCallback = null;\n          timeoutTime = -1;\n          var currentTime = exports.unstable_now();\n          var didTimeout = false;\n\n          if (frameDeadline - currentTime <= 0) {\n            // There's no time left in this idle period. Check if the callback has\n            // a timeout and whether it's been exceeded.\n            if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {\n              // Exceeded the timeout. Invoke the callback even though there's no\n              // time left.\n              didTimeout = true;\n            } else {\n              // No timeout.\n              if (!isAnimationFrameScheduled) {\n                // Schedule another animation callback so we retry later.\n                isAnimationFrameScheduled = true;\n                requestAnimationFrameWithTimeout(animationTick);\n              } // Exit without invoking the callback.\n\n\n              scheduledHostCallback = prevScheduledCallback;\n              timeoutTime = prevTimeoutTime;\n              return;\n            }\n          }\n\n          if (prevScheduledCallback !== null) {\n            isFlushingHostCallback = true;\n\n            try {\n              prevScheduledCallback(didTimeout);\n            } finally {\n              isFlushingHostCallback = false;\n            }\n          }\n        }; // Assumes that we have addEventListener in this environment. Might need\n        // something better for old IE.\n\n\n        window.addEventListener('message', idleTick, false);\n\n        var animationTick = function (rafTime) {\n          if (scheduledHostCallback !== null) {\n            // Eagerly schedule the next animation callback at the beginning of the\n            // frame. If the scheduler queue is not empty at the end of the frame, it\n            // will continue flushing inside that callback. If the queue *is* empty,\n            // then it will exit immediately. Posting the callback at the start of the\n            // frame ensures it's fired within the earliest possible frame. If we\n            // waited until the end of the frame to post the callback, we risk the\n            // browser skipping a frame and not firing the callback until the frame\n            // after that.\n            requestAnimationFrameWithTimeout(animationTick);\n          } else {\n            // No pending work. Exit.\n            isAnimationFrameScheduled = false;\n            return;\n          }\n\n          var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\n\n          if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\n            if (nextFrameTime < 8) {\n              // Defensive coding. We don't support higher frame rates than 120hz.\n              // If the calculated frame time gets lower than 8, it is probably a bug.\n              nextFrameTime = 8;\n            } // If one frame goes long, then the next one can be short to catch up.\n            // If two frames are short in a row, then that's an indication that we\n            // actually have a higher frame rate than what we're currently optimizing.\n            // We adjust our heuristic dynamically accordingly. For example, if we're\n            // running on 120hz display or 90hz VR display.\n            // Take the max of the two in case one of them was an anomaly due to\n            // missed frame deadlines.\n\n\n            activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\n          } else {\n            previousFrameTime = nextFrameTime;\n          }\n\n          frameDeadline = rafTime + activeFrameTime;\n\n          if (!isMessageEventScheduled) {\n            isMessageEventScheduled = true;\n            window.postMessage(messageKey, '*');\n          }\n        };\n\n        requestHostCallback = function (callback, absoluteTimeout) {\n          scheduledHostCallback = callback;\n          timeoutTime = absoluteTimeout;\n\n          if (isFlushingHostCallback || absoluteTimeout < 0) {\n            // Don't wait for the next frame. Continue working ASAP, in a new event.\n            window.postMessage(messageKey, '*');\n          } else if (!isAnimationFrameScheduled) {\n            // If rAF didn't already schedule one, we need to schedule a frame.\n            // TODO: If this rAF doesn't materialize because the browser throttles, we\n            // might want to still have setTimeout trigger rIC as a backup to ensure\n            // that we keep performing work.\n            isAnimationFrameScheduled = true;\n            requestAnimationFrameWithTimeout(animationTick);\n          }\n        };\n\n        cancelHostCallback = function () {\n          scheduledHostCallback = null;\n          isMessageEventScheduled = false;\n          timeoutTime = -1;\n        };\n      }\n\n      exports.unstable_ImmediatePriority = ImmediatePriority;\n      exports.unstable_UserBlockingPriority = UserBlockingPriority;\n      exports.unstable_NormalPriority = NormalPriority;\n      exports.unstable_IdlePriority = IdlePriority;\n      exports.unstable_LowPriority = LowPriority;\n      exports.unstable_runWithPriority = unstable_runWithPriority;\n      exports.unstable_scheduleCallback = unstable_scheduleCallback;\n      exports.unstable_cancelCallback = unstable_cancelCallback;\n      exports.unstable_wrapCallback = unstable_wrapCallback;\n      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n      exports.unstable_shouldYield = unstable_shouldYield;\n    })();\n  }\n});\nunwrapExports(scheduler_development);\nvar scheduler_development_1 = scheduler_development.unstable_now;\nvar scheduler_development_2 = scheduler_development.unstable_ImmediatePriority;\nvar scheduler_development_3 = scheduler_development.unstable_UserBlockingPriority;\nvar scheduler_development_4 = scheduler_development.unstable_NormalPriority;\nvar scheduler_development_5 = scheduler_development.unstable_IdlePriority;\nvar scheduler_development_6 = scheduler_development.unstable_LowPriority;\nvar scheduler_development_7 = scheduler_development.unstable_runWithPriority;\nvar scheduler_development_8 = scheduler_development.unstable_scheduleCallback;\nvar scheduler_development_9 = scheduler_development.unstable_cancelCallback;\nvar scheduler_development_10 = scheduler_development.unstable_wrapCallback;\nvar scheduler_development_11 = scheduler_development.unstable_getCurrentPriorityLevel;\nvar scheduler_development_12 = scheduler_development.unstable_shouldYield;\nvar scheduler = createCommonjsModule(function (module) {\n  {\n    module.exports = scheduler_development;\n  }\n});\nvar reactReconciler_production_min = createCommonjsModule(function (module) {\n  /** @license React v16.7.0-alpha.2\n   * react-reconciler.production.min.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  module.exports = function $$$reconciler($$$hostConfig) {\n    var ba = objectAssign,\n        ca = React;\n    var da = scheduler;\n\n    function ea(a, b, c, d, e, f, g, k) {\n      if (!a) {\n        a = void 0;\n        if (void 0 === b) a = Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else {\n          var h = [c, d, e, f, g, k],\n              l = 0;\n          a = Error(b.replace(/%s/g, function () {\n            return h[l++];\n          }));\n          a.name = \"Invariant Violation\";\n        }\n        a.framesToPop = 1;\n        throw a;\n      }\n    }\n\n    function m(a) {\n      for (var b = arguments.length - 1, c = \"https://reactjs.org/docs/error-decoder.html?invariant=\" + a, d = 0; d < b; d++) c += \"&args[]=\" + encodeURIComponent(arguments[d + 1]);\n\n      ea(!1, \"Minified React error #\" + a + \"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \", c);\n    }\n\n    var fa = ca.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n        p = \"function\" === typeof Symbol && Symbol.for,\n        ha = p ? Symbol.for(\"react.element\") : 60103,\n        ia = p ? Symbol.for(\"react.portal\") : 60106,\n        ja = p ? Symbol.for(\"react.fragment\") : 60107,\n        ka = p ? Symbol.for(\"react.strict_mode\") : 60108,\n        la = p ? Symbol.for(\"react.profiler\") : 60114,\n        ma = p ? Symbol.for(\"react.provider\") : 60109,\n        na = p ? Symbol.for(\"react.context\") : 60110,\n        oa = p ? Symbol.for(\"react.concurrent_mode\") : 60111,\n        pa = p ? Symbol.for(\"react.forward_ref\") : 60112,\n        qa = p ? Symbol.for(\"react.suspense\") : 60113,\n        ra = p ? Symbol.for(\"react.memo\") : 60115,\n        sa = p ? Symbol.for(\"react.lazy\") : 60116,\n        ta = \"function\" === typeof Symbol && Symbol.iterator;\n\n    function ua(a) {\n      if (null === a || \"object\" !== typeof a) return null;\n      a = ta && a[ta] || a[\"@@iterator\"];\n      return \"function\" === typeof a ? a : null;\n    }\n\n    function va(a) {\n      if (null == a) return null;\n      if (\"function\" === typeof a) return a.displayName || a.name || null;\n      if (\"string\" === typeof a) return a;\n\n      switch (a) {\n        case oa:\n          return \"ConcurrentMode\";\n\n        case ja:\n          return \"Fragment\";\n\n        case ia:\n          return \"Portal\";\n\n        case la:\n          return \"Profiler\";\n\n        case ka:\n          return \"StrictMode\";\n\n        case qa:\n          return \"Suspense\";\n      }\n\n      if (\"object\" === typeof a) switch (a.$$typeof) {\n        case na:\n          return \"Context.Consumer\";\n\n        case ma:\n          return \"Context.Provider\";\n\n        case pa:\n          var b = a.render;\n          b = b.displayName || b.name || \"\";\n          return a.displayName || (\"\" !== b ? \"ForwardRef(\" + b + \")\" : \"ForwardRef\");\n\n        case ra:\n          return va(a.type);\n\n        case sa:\n          if (a = 1 === a._status ? a._result : null) return va(a);\n      }\n      return null;\n    }\n\n    function wa(a) {\n      var b = a;\n      if (a.alternate) for (; b.return;) b = b.return;else {\n        if (0 !== (b.effectTag & 2)) return 1;\n\n        for (; b.return;) if (b = b.return, 0 !== (b.effectTag & 2)) return 1;\n      }\n      return 3 === b.tag ? 2 : 3;\n    }\n\n    function xa(a) {\n      2 !== wa(a) ? m(\"188\") : void 0;\n    }\n\n    function ya(a) {\n      var b = a.alternate;\n      if (!b) return b = wa(a), 3 === b ? m(\"188\") : void 0, 1 === b ? null : a;\n\n      for (var c = a, d = b;;) {\n        var e = c.return,\n            f = e ? e.alternate : null;\n        if (!e || !f) break;\n\n        if (e.child === f.child) {\n          for (var g = e.child; g;) {\n            if (g === c) return xa(e), a;\n            if (g === d) return xa(e), b;\n            g = g.sibling;\n          }\n\n          m(\"188\");\n        }\n\n        if (c.return !== d.return) c = e, d = f;else {\n          g = !1;\n\n          for (var k = e.child; k;) {\n            if (k === c) {\n              g = !0;\n              c = e;\n              d = f;\n              break;\n            }\n\n            if (k === d) {\n              g = !0;\n              d = e;\n              c = f;\n              break;\n            }\n\n            k = k.sibling;\n          }\n\n          if (!g) {\n            for (k = f.child; k;) {\n              if (k === c) {\n                g = !0;\n                c = f;\n                d = e;\n                break;\n              }\n\n              if (k === d) {\n                g = !0;\n                d = f;\n                c = e;\n                break;\n              }\n\n              k = k.sibling;\n            }\n\n            g ? void 0 : m(\"189\");\n          }\n        }\n        c.alternate !== d ? m(\"190\") : void 0;\n      }\n\n      3 !== c.tag ? m(\"188\") : void 0;\n      return c.stateNode.current === c ? a : b;\n    }\n\n    function za(a) {\n      a = ya(a);\n      if (!a) return null;\n\n      for (var b = a;;) {\n        if (5 === b.tag || 6 === b.tag) return b;\n        if (b.child) b.child.return = b, b = b.child;else {\n          if (b === a) break;\n\n          for (; !b.sibling;) {\n            if (!b.return || b.return === a) return null;\n            b = b.return;\n          }\n\n          b.sibling.return = b.return;\n          b = b.sibling;\n        }\n      }\n\n      return null;\n    }\n\n    function Aa(a) {\n      a = ya(a);\n      if (!a) return null;\n\n      for (var b = a;;) {\n        if (5 === b.tag || 6 === b.tag) return b;\n        if (b.child && 4 !== b.tag) b.child.return = b, b = b.child;else {\n          if (b === a) break;\n\n          for (; !b.sibling;) {\n            if (!b.return || b.return === a) return null;\n            b = b.return;\n          }\n\n          b.sibling.return = b.return;\n          b = b.sibling;\n        }\n      }\n\n      return null;\n    }\n\n    var Ba = $$$hostConfig.getPublicInstance,\n        Ca = $$$hostConfig.getRootHostContext,\n        Da = $$$hostConfig.getChildHostContext,\n        Ea = $$$hostConfig.prepareForCommit,\n        Fa = $$$hostConfig.resetAfterCommit,\n        Ga = $$$hostConfig.createInstance,\n        Ha = $$$hostConfig.appendInitialChild,\n        Ia = $$$hostConfig.finalizeInitialChildren,\n        Ja = $$$hostConfig.prepareUpdate,\n        Ka = $$$hostConfig.shouldSetTextContent,\n        La = $$$hostConfig.shouldDeprioritizeSubtree,\n        Ma = $$$hostConfig.createTextInstance,\n        Na = $$$hostConfig.scheduleDeferredCallback,\n        Oa = $$$hostConfig.cancelDeferredCallback,\n        Pa = $$$hostConfig.shouldYield,\n        Qa = $$$hostConfig.setTimeout,\n        Ra = $$$hostConfig.clearTimeout,\n        Sa = $$$hostConfig.noTimeout,\n        Ta = $$$hostConfig.now,\n        Ua = $$$hostConfig.isPrimaryRenderer,\n        Va = $$$hostConfig.supportsMutation,\n        Wa = $$$hostConfig.supportsPersistence,\n        Xa = $$$hostConfig.supportsHydration,\n        Ya = $$$hostConfig.appendChild,\n        Za = $$$hostConfig.appendChildToContainer,\n        $a = $$$hostConfig.commitTextUpdate,\n        ab = $$$hostConfig.commitMount,\n        bb = $$$hostConfig.commitUpdate,\n        cb = $$$hostConfig.insertBefore,\n        db = $$$hostConfig.insertInContainerBefore,\n        eb = $$$hostConfig.removeChild,\n        fb = $$$hostConfig.removeChildFromContainer,\n        gb = $$$hostConfig.resetTextContent,\n        hb = $$$hostConfig.hideInstance,\n        ib = $$$hostConfig.hideTextInstance,\n        jb = $$$hostConfig.unhideInstance,\n        kb = $$$hostConfig.unhideTextInstance,\n        lb = $$$hostConfig.cloneInstance,\n        mb = $$$hostConfig.createContainerChildSet,\n        nb = $$$hostConfig.appendChildToContainerChildSet,\n        ob = $$$hostConfig.finalizeContainerChildren,\n        pb = $$$hostConfig.replaceContainerChildren,\n        qb = $$$hostConfig.cloneHiddenInstance,\n        rb = $$$hostConfig.cloneUnhiddenInstance,\n        sb = $$$hostConfig.createHiddenTextInstance,\n        tb = $$$hostConfig.canHydrateInstance,\n        ub = $$$hostConfig.canHydrateTextInstance,\n        vb = $$$hostConfig.getNextHydratableSibling,\n        wb = $$$hostConfig.getFirstHydratableChild,\n        xb = $$$hostConfig.hydrateInstance,\n        yb = $$$hostConfig.hydrateTextInstance,\n        zb = /^(.*)[\\\\\\/]/;\n\n    function Ab(a) {\n      var b = \"\";\n\n      do {\n        a: switch (a.tag) {\n          case 2:\n          case 16:\n          case 0:\n          case 1:\n          case 5:\n          case 8:\n          case 13:\n            var c = a._debugOwner,\n                d = a._debugSource,\n                e = va(a.type);\n            var f = null;\n            c && (f = va(c.type));\n            c = e;\n            e = \"\";\n            d ? e = \" (at \" + d.fileName.replace(zb, \"\") + \":\" + d.lineNumber + \")\" : f && (e = \" (created by \" + f + \")\");\n            f = \"\\n    in \" + (c || \"Unknown\") + e;\n            break a;\n\n          default:\n            f = \"\";\n        }\n\n        b += f;\n        a = a.return;\n      } while (a);\n\n      return b;\n    }\n\n    var Bb = [],\n        Cb = -1;\n\n    function q(a) {\n      0 > Cb || (a.current = Bb[Cb], Bb[Cb] = null, Cb--);\n    }\n\n    function y(a, b) {\n      Cb++;\n      Bb[Cb] = a.current;\n      a.current = b;\n    }\n\n    var Db = {},\n        A = {\n      current: Db\n    },\n        B = {\n      current: !1\n    },\n        Eb = Db;\n\n    function Fb(a, b) {\n      var c = a.type.contextTypes;\n      if (!c) return Db;\n      var d = a.stateNode;\n      if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;\n      var e = {},\n          f;\n\n      for (f in c) e[f] = b[f];\n\n      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);\n      return e;\n    }\n\n    function C(a) {\n      a = a.childContextTypes;\n      return null !== a && void 0 !== a;\n    }\n\n    function Gb(a) {\n      q(B, a);\n      q(A, a);\n    }\n\n    function Hb(a) {\n      q(B, a);\n      q(A, a);\n    }\n\n    function Jb(a, b, c) {\n      A.current !== Db ? m(\"168\") : void 0;\n      y(A, b, a);\n      y(B, c, a);\n    }\n\n    function Kb(a, b, c) {\n      var d = a.stateNode;\n      a = b.childContextTypes;\n      if (\"function\" !== typeof d.getChildContext) return c;\n      d = d.getChildContext();\n\n      for (var e in d) e in a ? void 0 : m(\"108\", va(b) || \"Unknown\", e);\n\n      return ba({}, c, d);\n    }\n\n    function Lb(a) {\n      var b = a.stateNode;\n      b = b && b.__reactInternalMemoizedMergedChildContext || Db;\n      Eb = A.current;\n      y(A, b, a);\n      y(B, B.current, a);\n      return !0;\n    }\n\n    function Mb(a, b, c) {\n      var d = a.stateNode;\n      d ? void 0 : m(\"169\");\n      c ? (b = Kb(a, b, Eb), d.__reactInternalMemoizedMergedChildContext = b, q(B, a), q(A, a), y(A, b, a)) : q(B, a);\n      y(B, c, a);\n    }\n\n    var Nb = null,\n        Ob = null;\n\n    function Pb(a) {\n      return function (b) {\n        try {\n          return a(b);\n        } catch (c) {}\n      };\n    }\n\n    function Qb(a) {\n      if (\"undefined\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;\n      var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n      if (b.isDisabled || !b.supportsFiber) return !0;\n\n      try {\n        var c = b.inject(a);\n        Nb = Pb(function (a) {\n          return b.onCommitFiberRoot(c, a);\n        });\n        Ob = Pb(function (a) {\n          return b.onCommitFiberUnmount(c, a);\n        });\n      } catch (d) {}\n\n      return !0;\n    }\n\n    function Rb(a, b, c, d) {\n      this.tag = a;\n      this.key = c;\n      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;\n      this.index = 0;\n      this.ref = null;\n      this.pendingProps = b;\n      this.firstContextDependency = this.memoizedState = this.updateQueue = this.memoizedProps = null;\n      this.mode = d;\n      this.effectTag = 0;\n      this.lastEffect = this.firstEffect = this.nextEffect = null;\n      this.childExpirationTime = this.expirationTime = 0;\n      this.alternate = null;\n    }\n\n    function D(a, b, c, d) {\n      return new Rb(a, b, c, d);\n    }\n\n    function Sb(a) {\n      a = a.prototype;\n      return !(!a || !a.isReactComponent);\n    }\n\n    function Tb(a) {\n      if (\"function\" === typeof a) return Sb(a) ? 1 : 0;\n\n      if (void 0 !== a && null !== a) {\n        a = a.$$typeof;\n        if (a === pa) return 11;\n        if (a === ra) return 14;\n      }\n\n      return 2;\n    }\n\n    function Ub(a, b) {\n      var c = a.alternate;\n      null === c ? (c = D(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);\n      c.childExpirationTime = a.childExpirationTime;\n      c.expirationTime = a.expirationTime;\n      c.child = a.child;\n      c.memoizedProps = a.memoizedProps;\n      c.memoizedState = a.memoizedState;\n      c.updateQueue = a.updateQueue;\n      c.firstContextDependency = a.firstContextDependency;\n      c.sibling = a.sibling;\n      c.index = a.index;\n      c.ref = a.ref;\n      return c;\n    }\n\n    function Vb(a, b, c, d, e, f) {\n      var g = 2;\n      d = a;\n      if (\"function\" === typeof a) Sb(a) && (g = 1);else if (\"string\" === typeof a) g = 5;else a: switch (a) {\n        case ja:\n          return Wb(c.children, e, f, b);\n\n        case oa:\n          return Xb(c, e | 3, f, b);\n\n        case ka:\n          return Xb(c, e | 2, f, b);\n\n        case la:\n          return a = D(12, c, b, e | 4), a.elementType = la, a.type = la, a.expirationTime = f, a;\n\n        case qa:\n          return a = D(13, c, b, e), a.elementType = qa, a.type = qa, a.expirationTime = f, a;\n\n        default:\n          if (\"object\" === typeof a && null !== a) switch (a.$$typeof) {\n            case ma:\n              g = 10;\n              break a;\n\n            case na:\n              g = 9;\n              break a;\n\n            case pa:\n              g = 11;\n              break a;\n\n            case ra:\n              g = 14;\n              break a;\n\n            case sa:\n              g = 16;\n              d = null;\n              break a;\n          }\n          m(\"130\", null == a ? a : typeof a, \"\");\n      }\n      b = D(g, c, b, e);\n      b.elementType = a;\n      b.type = d;\n      b.expirationTime = f;\n      return b;\n    }\n\n    function Wb(a, b, c, d) {\n      a = D(7, a, d, b);\n      a.expirationTime = c;\n      return a;\n    }\n\n    function Xb(a, b, c, d) {\n      a = D(8, a, d, b);\n      b = 0 === (b & 1) ? ka : oa;\n      a.elementType = b;\n      a.type = b;\n      a.expirationTime = c;\n      return a;\n    }\n\n    function Yb(a, b, c) {\n      a = D(6, a, null, b);\n      a.expirationTime = c;\n      return a;\n    }\n\n    function Zb(a, b, c) {\n      b = D(4, null !== a.children ? a.children : [], a.key, b);\n      b.expirationTime = c;\n      b.stateNode = {\n        containerInfo: a.containerInfo,\n        pendingChildren: null,\n        implementation: a.implementation\n      };\n      return b;\n    }\n\n    function $b(a, b) {\n      a.didError = !1;\n      var c = a.earliestPendingTime;\n      0 === c ? a.earliestPendingTime = a.latestPendingTime = b : c < b ? a.earliestPendingTime = b : a.latestPendingTime > b && (a.latestPendingTime = b);\n      ac(b, a);\n    }\n\n    function bc(a, b) {\n      a.didError = !1;\n      var c = a.latestPingedTime;\n      0 !== c && c >= b && (a.latestPingedTime = 0);\n      c = a.earliestPendingTime;\n      var d = a.latestPendingTime;\n      c === b ? a.earliestPendingTime = d === b ? a.latestPendingTime = 0 : d : d === b && (a.latestPendingTime = c);\n      c = a.earliestSuspendedTime;\n      d = a.latestSuspendedTime;\n      0 === c ? a.earliestSuspendedTime = a.latestSuspendedTime = b : c < b ? a.earliestSuspendedTime = b : d > b && (a.latestSuspendedTime = b);\n      ac(b, a);\n    }\n\n    function cc(a, b) {\n      var c = a.earliestPendingTime;\n      a = a.earliestSuspendedTime;\n      c > b && (b = c);\n      a > b && (b = a);\n      return b;\n    }\n\n    function ac(a, b) {\n      var c = b.earliestSuspendedTime,\n          d = b.latestSuspendedTime,\n          e = b.earliestPendingTime,\n          f = b.latestPingedTime;\n      e = 0 !== e ? e : f;\n      0 === e && (0 === a || d < a) && (e = d);\n      a = e;\n      0 !== a && c > a && (a = c);\n      b.nextExpirationTimeToWorkOn = e;\n      b.expirationTime = a;\n    }\n\n    var dc = !1;\n\n    function ec(a) {\n      return {\n        baseState: a,\n        firstUpdate: null,\n        lastUpdate: null,\n        firstCapturedUpdate: null,\n        lastCapturedUpdate: null,\n        firstEffect: null,\n        lastEffect: null,\n        firstCapturedEffect: null,\n        lastCapturedEffect: null\n      };\n    }\n\n    function fc(a) {\n      return {\n        baseState: a.baseState,\n        firstUpdate: a.firstUpdate,\n        lastUpdate: a.lastUpdate,\n        firstCapturedUpdate: null,\n        lastCapturedUpdate: null,\n        firstEffect: null,\n        lastEffect: null,\n        firstCapturedEffect: null,\n        lastCapturedEffect: null\n      };\n    }\n\n    function gc(a) {\n      return {\n        expirationTime: a,\n        tag: 0,\n        payload: null,\n        callback: null,\n        next: null,\n        nextEffect: null\n      };\n    }\n\n    function hc(a, b) {\n      null === a.lastUpdate ? a.firstUpdate = a.lastUpdate = b : (a.lastUpdate.next = b, a.lastUpdate = b);\n    }\n\n    function E(a, b) {\n      var c = a.alternate;\n\n      if (null === c) {\n        var d = a.updateQueue;\n        var e = null;\n        null === d && (d = a.updateQueue = ec(a.memoizedState));\n      } else d = a.updateQueue, e = c.updateQueue, null === d ? null === e ? (d = a.updateQueue = ec(a.memoizedState), e = c.updateQueue = ec(c.memoizedState)) : d = a.updateQueue = fc(e) : null === e && (e = c.updateQueue = fc(d));\n\n      null === e || d === e ? hc(d, b) : null === d.lastUpdate || null === e.lastUpdate ? (hc(d, b), hc(e, b)) : (hc(d, b), e.lastUpdate = b);\n    }\n\n    function ic(a, b) {\n      var c = a.updateQueue;\n      c = null === c ? a.updateQueue = ec(a.memoizedState) : jc(a, c);\n      null === c.lastCapturedUpdate ? c.firstCapturedUpdate = c.lastCapturedUpdate = b : (c.lastCapturedUpdate.next = b, c.lastCapturedUpdate = b);\n    }\n\n    function jc(a, b) {\n      var c = a.alternate;\n      null !== c && b === c.updateQueue && (b = a.updateQueue = fc(b));\n      return b;\n    }\n\n    function kc(a, b, c, d, e, f) {\n      switch (c.tag) {\n        case 1:\n          return a = c.payload, \"function\" === typeof a ? a.call(f, d, e) : a;\n\n        case 3:\n          a.effectTag = a.effectTag & -2049 | 64;\n\n        case 0:\n          a = c.payload;\n          e = \"function\" === typeof a ? a.call(f, d, e) : a;\n          if (null === e || void 0 === e) break;\n          return ba({}, d, e);\n\n        case 2:\n          dc = !0;\n      }\n\n      return d;\n    }\n\n    function lc(a, b, c, d, e) {\n      dc = !1;\n      b = jc(a, b);\n\n      for (var f = b.baseState, g = null, k = 0, h = b.firstUpdate, l = f; null !== h;) {\n        var n = h.expirationTime;\n        n < e ? (null === g && (g = h, f = l), k < n && (k = n)) : (l = kc(a, b, h, l, c, d), null !== h.callback && (a.effectTag |= 32, h.nextEffect = null, null === b.lastEffect ? b.firstEffect = b.lastEffect = h : (b.lastEffect.nextEffect = h, b.lastEffect = h)));\n        h = h.next;\n      }\n\n      n = null;\n\n      for (h = b.firstCapturedUpdate; null !== h;) {\n        var z = h.expirationTime;\n        z < e ? (null === n && (n = h, null === g && (f = l)), k < z && (k = z)) : (l = kc(a, b, h, l, c, d), null !== h.callback && (a.effectTag |= 32, h.nextEffect = null, null === b.lastCapturedEffect ? b.firstCapturedEffect = b.lastCapturedEffect = h : (b.lastCapturedEffect.nextEffect = h, b.lastCapturedEffect = h)));\n        h = h.next;\n      }\n\n      null === g && (b.lastUpdate = null);\n      null === n ? b.lastCapturedUpdate = null : a.effectTag |= 32;\n      null === g && null === n && (f = l);\n      b.baseState = f;\n      b.firstUpdate = g;\n      b.firstCapturedUpdate = n;\n      a.expirationTime = k;\n      a.memoizedState = l;\n    }\n\n    function mc(a, b, c) {\n      null !== b.firstCapturedUpdate && (null !== b.lastUpdate && (b.lastUpdate.next = b.firstCapturedUpdate, b.lastUpdate = b.lastCapturedUpdate), b.firstCapturedUpdate = b.lastCapturedUpdate = null);\n      nc(b.firstEffect, c);\n      b.firstEffect = b.lastEffect = null;\n      nc(b.firstCapturedEffect, c);\n      b.firstCapturedEffect = b.lastCapturedEffect = null;\n    }\n\n    function nc(a, b) {\n      for (; null !== a;) {\n        var c = a.callback;\n\n        if (null !== c) {\n          a.callback = null;\n          var d = b;\n          \"function\" !== typeof c ? m(\"191\", c) : void 0;\n          c.call(d);\n        }\n\n        a = a.nextEffect;\n      }\n    }\n\n    function oc(a, b) {\n      return {\n        value: a,\n        source: b,\n        stack: Ab(b)\n      };\n    }\n\n    var pc = {\n      current: null\n    },\n        qc = null,\n        rc = null,\n        sc = null;\n\n    function tc(a, b) {\n      var c = a.type._context;\n      Ua ? (y(pc, c._currentValue, a), c._currentValue = b) : (y(pc, c._currentValue2, a), c._currentValue2 = b);\n    }\n\n    function uc(a) {\n      var b = pc.current;\n      q(pc, a);\n      a = a.type._context;\n      Ua ? a._currentValue = b : a._currentValue2 = b;\n    }\n\n    function vc(a) {\n      qc = a;\n      sc = rc = null;\n      a.firstContextDependency = null;\n    }\n\n    function wc(a, b) {\n      if (sc !== a && !1 !== b && 0 !== b) {\n        if (\"number\" !== typeof b || 1073741823 === b) sc = a, b = 1073741823;\n        b = {\n          context: a,\n          observedBits: b,\n          next: null\n        };\n        null === rc ? (null === qc ? m(\"293\") : void 0, qc.firstContextDependency = rc = b) : rc = rc.next = b;\n      }\n\n      return Ua ? a._currentValue : a._currentValue2;\n    }\n\n    function xc(a, b) {\n      for (var c = 0; c < a.length; c++) {\n        var d = a[c],\n            e = b[c];\n        if ((d !== e || 0 === d && 1 / d !== 1 / e) && (d === d || e === e)) return !1;\n      }\n\n      return !0;\n    }\n\n    var yc = 0,\n        F = null,\n        zc = null,\n        G = null,\n        Bc = null,\n        H = null,\n        Cc = 0,\n        I = null,\n        Dc = !1,\n        Ec = !1,\n        J = null,\n        Fc = 0;\n\n    function Gc() {\n      null === F ? m(\"298\") : void 0;\n      return F;\n    }\n\n    function Hc(a, b, c, d) {\n      for (; Ec;) Ec = !1, Fc += 1, I = H = G = null, c = a(b, d);\n\n      J = null;\n      Fc = 0;\n      a = F;\n      a.memoizedState = Bc;\n      a.expirationTime = Cc;\n      a.updateQueue = I;\n      a = null !== G && null !== G.next;\n      yc = 0;\n      H = Bc = G = zc = F = null;\n      Cc = 0;\n      I = null;\n      a ? m(\"300\") : void 0;\n      return c;\n    }\n\n    function Ic() {\n      yc = 0;\n      H = Bc = G = zc = F = null;\n      Cc = 0;\n      I = null;\n      Ec = !1;\n      J = null;\n      Fc = 0;\n    }\n\n    function Jc() {\n      return {\n        memoizedState: null,\n        baseState: null,\n        queue: null,\n        baseUpdate: null,\n        next: null\n      };\n    }\n\n    function Kc(a) {\n      return {\n        memoizedState: a.memoizedState,\n        baseState: a.memoizedState,\n        queue: a.queue,\n        baseUpdate: a.baseUpdate,\n        next: null\n      };\n    }\n\n    function Lc() {\n      if (null === H) null === Bc ? (Dc = !1, G = zc, Bc = H = null === G ? Jc() : Kc(G)) : (Dc = !0, G = zc, H = Bc);else if (null === H.next) {\n        Dc = !1;\n        if (null === G) var a = Jc();else G = G.next, a = null === G ? Jc() : Kc(G);\n        H = H.next = a;\n      } else Dc = !0, H = H.next, G = null !== G ? G.next : null;\n      return H;\n    }\n\n    function Mc(a, b) {\n      return \"function\" === typeof b ? b(a) : b;\n    }\n\n    function Nc(a, b, c) {\n      F = Gc();\n      H = Lc();\n      var d = H.queue;\n\n      if (null !== d) {\n        if (Dc) {\n          b = d.dispatch;\n\n          if (null !== J) {\n            var e = J.get(d);\n\n            if (void 0 !== e) {\n              J.delete(d);\n              c = H.memoizedState;\n\n              do c = a(c, e.action), e = e.next; while (null !== e);\n\n              H.memoizedState = c;\n              H.baseUpdate === d.last && (H.baseState = c);\n              return [c, b];\n            }\n          }\n\n          return [H.memoizedState, b];\n        }\n\n        b = d.last;\n        var f = H.baseUpdate;\n        null !== f ? (null !== b && (b.next = null), b = f.next) : b = null !== b ? b.next : null;\n\n        if (null !== b) {\n          c = H.baseState;\n          var g = e = null,\n              k = b,\n              h = !1;\n\n          do {\n            var l = k.expirationTime;\n            l < yc ? (h || (h = !0, g = f, e = c), l > Cc && (Cc = l)) : c = a(c, k.action);\n            f = k;\n            k = k.next;\n          } while (null !== k && k !== b);\n\n          h || (g = f, e = c);\n          H.memoizedState = c;\n          H.baseUpdate = g;\n          H.baseState = e;\n        }\n\n        return [H.memoizedState, d.dispatch];\n      }\n\n      a === Mc ? \"function\" === typeof b && (b = b()) : void 0 !== c && null !== c && (b = a(b, c));\n      H.memoizedState = H.baseState = b;\n      d = H.queue = {\n        last: null,\n        dispatch: null\n      };\n      a = d.dispatch = Oc.bind(null, F, d);\n      return [H.memoizedState, a];\n    }\n\n    function Pc(a, b, c, d) {\n      a = {\n        tag: a,\n        create: b,\n        destroy: c,\n        inputs: d,\n        next: null\n      };\n      null === I ? (I = {\n        lastEffect: null\n      }, I.lastEffect = a.next = a) : (b = I.lastEffect, null === b ? I.lastEffect = a.next = a : (c = b.next, b.next = a, a.next = c, I.lastEffect = a));\n      return a;\n    }\n\n    function Qc(a, b, c, d) {\n      F = Gc();\n      H = Lc();\n      d = void 0 !== d && null !== d ? d : [c];\n      var e = null;\n\n      if (null !== G) {\n        var f = G.memoizedState;\n        e = f.destroy;\n\n        if (xc(d, f.inputs)) {\n          Pc(0, c, e, d);\n          return;\n        }\n      }\n\n      F.effectTag |= a;\n      H.memoizedState = Pc(b, c, e, d);\n    }\n\n    function Oc(a, b, c) {\n      25 > Fc ? void 0 : m(\"301\");\n      var d = a.alternate;\n      if (a === F || null !== d && d === F) {\n        if (Ec = !0, a = {\n          expirationTime: yc,\n          action: c,\n          next: null\n        }, null === J && (J = new Map()), d = J.get(b), void 0 === d) J.set(b, a);else {\n          for (b = d; null !== b.next;) b = b.next;\n\n          b.next = a;\n        }\n      } else {\n        d = K();\n        d = Rc(d, a);\n        c = {\n          expirationTime: d,\n          action: c,\n          next: null\n        };\n        Sc();\n        var e = b.last;\n        if (null === e) c.next = c;else {\n          var f = e.next;\n          null !== f && (c.next = f);\n          e.next = c;\n        }\n        b.last = c;\n        Tc(a, d);\n      }\n    }\n\n    var Uc = {},\n        Vc = {\n      current: Uc\n    },\n        Wc = {\n      current: Uc\n    },\n        Xc = {\n      current: Uc\n    };\n\n    function Yc(a) {\n      a === Uc ? m(\"174\") : void 0;\n      return a;\n    }\n\n    function Zc(a, b) {\n      y(Xc, b, a);\n      y(Wc, a, a);\n      y(Vc, Uc, a);\n      b = Ca(b);\n      q(Vc, a);\n      y(Vc, b, a);\n    }\n\n    function $c(a) {\n      q(Vc, a);\n      q(Wc, a);\n      q(Xc, a);\n    }\n\n    function ad() {\n      return Yc(Vc.current);\n    }\n\n    function bd(a) {\n      var b = Yc(Xc.current),\n          c = Yc(Vc.current);\n      b = Da(c, a.type, b);\n      c !== b && (y(Wc, a, a), y(Vc, b, a));\n    }\n\n    function cd(a) {\n      Wc.current === a && (q(Vc, a), q(Wc, a));\n    }\n\n    var dd = Object.prototype.hasOwnProperty;\n\n    function ed(a, b) {\n      return a === b ? 0 !== a || 0 !== b || 1 / a === 1 / b : a !== a && b !== b;\n    }\n\n    function fd(a, b) {\n      if (ed(a, b)) return !0;\n      if (\"object\" !== typeof a || null === a || \"object\" !== typeof b || null === b) return !1;\n      var c = Object.keys(a),\n          d = Object.keys(b);\n      if (c.length !== d.length) return !1;\n\n      for (d = 0; d < c.length; d++) if (!dd.call(b, c[d]) || !ed(a[c[d]], b[c[d]])) return !1;\n\n      return !0;\n    }\n\n    function L(a, b) {\n      if (a && a.defaultProps) {\n        b = ba({}, b);\n        a = a.defaultProps;\n\n        for (var c in a) void 0 === b[c] && (b[c] = a[c]);\n      }\n\n      return b;\n    }\n\n    function gd(a) {\n      var b = a._result;\n\n      switch (a._status) {\n        case 1:\n          return b;\n\n        case 2:\n          throw b;\n\n        case 0:\n          throw b;\n\n        default:\n          throw a._status = 0, b = a._ctor, b = b(), b.then(function (b) {\n            0 === a._status && (b = b.default, a._status = 1, a._result = b);\n          }, function (b) {\n            0 === a._status && (a._status = 2, a._result = b);\n          }), a._result = b, b;\n      }\n    }\n\n    var hd = fa.ReactCurrentOwner,\n        id = new ca.Component().refs;\n\n    function jd(a, b, c, d) {\n      b = a.memoizedState;\n      c = c(d, b);\n      c = null === c || void 0 === c ? b : ba({}, b, c);\n      a.memoizedState = c;\n      d = a.updateQueue;\n      null !== d && 0 === a.expirationTime && (d.baseState = c);\n    }\n\n    var kd = {\n      isMounted: function (a) {\n        return (a = a._reactInternalFiber) ? 2 === wa(a) : !1;\n      },\n      enqueueSetState: function (a, b, c) {\n        a = a._reactInternalFiber;\n        var d = K();\n        d = Rc(d, a);\n        var e = gc(d);\n        e.payload = b;\n        void 0 !== c && null !== c && (e.callback = c);\n        Sc();\n        E(a, e);\n        Tc(a, d);\n      },\n      enqueueReplaceState: function (a, b, c) {\n        a = a._reactInternalFiber;\n        var d = K();\n        d = Rc(d, a);\n        var e = gc(d);\n        e.tag = 1;\n        e.payload = b;\n        void 0 !== c && null !== c && (e.callback = c);\n        Sc();\n        E(a, e);\n        Tc(a, d);\n      },\n      enqueueForceUpdate: function (a, b) {\n        a = a._reactInternalFiber;\n        var c = K();\n        c = Rc(c, a);\n        var d = gc(c);\n        d.tag = 2;\n        void 0 !== b && null !== b && (d.callback = b);\n        Sc();\n        E(a, d);\n        Tc(a, c);\n      }\n    };\n\n    function ld(a, b, c, d, e, f, g) {\n      a = a.stateNode;\n      return \"function\" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !fd(c, d) || !fd(e, f) : !0;\n    }\n\n    function md(a, b, c) {\n      var d = !1,\n          e = Db;\n      var f = b.contextType;\n      \"object\" === typeof f && null !== f ? f = hd.currentDispatcher.readContext(f) : (e = C(b) ? Eb : A.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Fb(a, e) : Db);\n      b = new b(c, f);\n      a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;\n      b.updater = kd;\n      a.stateNode = b;\n      b._reactInternalFiber = a;\n      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);\n      return b;\n    }\n\n    function nd(a, b, c, d) {\n      a = b.state;\n      \"function\" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);\n      \"function\" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);\n      b.state !== a && kd.enqueueReplaceState(b, b.state, null);\n    }\n\n    function od(a, b, c, d) {\n      var e = a.stateNode;\n      e.props = c;\n      e.state = a.memoizedState;\n      e.refs = id;\n      var f = b.contextType;\n      \"object\" === typeof f && null !== f ? e.context = hd.currentDispatcher.readContext(f) : (f = C(b) ? Eb : A.current, e.context = Fb(a, f));\n      f = a.updateQueue;\n      null !== f && (lc(a, f, c, e, d), e.state = a.memoizedState);\n      f = b.getDerivedStateFromProps;\n      \"function\" === typeof f && (jd(a, b, f, c), e.state = a.memoizedState);\n      \"function\" === typeof b.getDerivedStateFromProps || \"function\" === typeof e.getSnapshotBeforeUpdate || \"function\" !== typeof e.UNSAFE_componentWillMount && \"function\" !== typeof e.componentWillMount || (b = e.state, \"function\" === typeof e.componentWillMount && e.componentWillMount(), \"function\" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && kd.enqueueReplaceState(e, e.state, null), f = a.updateQueue, null !== f && (lc(a, f, c, e, d), e.state = a.memoizedState));\n      \"function\" === typeof e.componentDidMount && (a.effectTag |= 4);\n    }\n\n    var pd = Array.isArray;\n\n    function qd(a, b, c) {\n      a = c.ref;\n\n      if (null !== a && \"function\" !== typeof a && \"object\" !== typeof a) {\n        if (c._owner) {\n          c = c._owner;\n          var d = void 0;\n          c && (1 !== c.tag ? m(\"289\") : void 0, d = c.stateNode);\n          d ? void 0 : m(\"147\", a);\n          var e = \"\" + a;\n          if (null !== b && null !== b.ref && \"function\" === typeof b.ref && b.ref._stringRef === e) return b.ref;\n\n          b = function (b) {\n            var a = d.refs;\n            a === id && (a = d.refs = {});\n            null === b ? delete a[e] : a[e] = b;\n          };\n\n          b._stringRef = e;\n          return b;\n        }\n\n        \"string\" !== typeof a ? m(\"284\") : void 0;\n        c._owner ? void 0 : m(\"290\", a);\n      }\n\n      return a;\n    }\n\n    function rd(a, b) {\n      \"textarea\" !== a.type && m(\"31\", \"[object Object]\" === Object.prototype.toString.call(b) ? \"object with keys {\" + Object.keys(b).join(\", \") + \"}\" : b, \"\");\n    }\n\n    function sd(a) {\n      function b(b, c) {\n        if (a) {\n          var d = b.lastEffect;\n          null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;\n          c.nextEffect = null;\n          c.effectTag = 8;\n        }\n      }\n\n      function c(c, d) {\n        if (!a) return null;\n\n        for (; null !== d;) b(c, d), d = d.sibling;\n\n        return null;\n      }\n\n      function d(b, a) {\n        for (b = new Map(); null !== a;) null !== a.key ? b.set(a.key, a) : b.set(a.index, a), a = a.sibling;\n\n        return b;\n      }\n\n      function e(b, a, c) {\n        b = Ub(b, a, c);\n        b.index = 0;\n        b.sibling = null;\n        return b;\n      }\n\n      function f(b, c, d) {\n        b.index = d;\n        if (!a) return c;\n        d = b.alternate;\n        if (null !== d) return d = d.index, d < c ? (b.effectTag = 2, c) : d;\n        b.effectTag = 2;\n        return c;\n      }\n\n      function g(b) {\n        a && null === b.alternate && (b.effectTag = 2);\n        return b;\n      }\n\n      function k(b, a, c, d) {\n        if (null === a || 6 !== a.tag) return a = Yb(c, b.mode, d), a.return = b, a;\n        a = e(a, c, d);\n        a.return = b;\n        return a;\n      }\n\n      function h(b, a, c, d) {\n        if (null !== a && a.elementType === c.type) return d = e(a, c.props, d), d.ref = qd(b, a, c), d.return = b, d;\n        d = Vb(c.type, c.key, c.props, null, b.mode, d);\n        d.ref = qd(b, a, c);\n        d.return = b;\n        return d;\n      }\n\n      function l(b, a, c, d) {\n        if (null === a || 4 !== a.tag || a.stateNode.containerInfo !== c.containerInfo || a.stateNode.implementation !== c.implementation) return a = Zb(c, b.mode, d), a.return = b, a;\n        a = e(a, c.children || [], d);\n        a.return = b;\n        return a;\n      }\n\n      function n(b, a, c, d, f) {\n        if (null === a || 7 !== a.tag) return a = Wb(c, b.mode, d, f), a.return = b, a;\n        a = e(a, c, d);\n        a.return = b;\n        return a;\n      }\n\n      function z(b, a, c) {\n        if (\"string\" === typeof a || \"number\" === typeof a) return a = Yb(\"\" + a, b.mode, c), a.return = b, a;\n\n        if (\"object\" === typeof a && null !== a) {\n          switch (a.$$typeof) {\n            case ha:\n              return c = Vb(a.type, a.key, a.props, null, b.mode, c), c.ref = qd(b, null, a), c.return = b, c;\n\n            case ia:\n              return a = Zb(a, b.mode, c), a.return = b, a;\n          }\n\n          if (pd(a) || ua(a)) return a = Wb(a, b.mode, c, null), a.return = b, a;\n          rd(b, a);\n        }\n\n        return null;\n      }\n\n      function w(b, a, c, d) {\n        var e = null !== a ? a.key : null;\n        if (\"string\" === typeof c || \"number\" === typeof c) return null !== e ? null : k(b, a, \"\" + c, d);\n\n        if (\"object\" === typeof c && null !== c) {\n          switch (c.$$typeof) {\n            case ha:\n              return c.key === e ? c.type === ja ? n(b, a, c.props.children, d, e) : h(b, a, c, d) : null;\n\n            case ia:\n              return c.key === e ? l(b, a, c, d) : null;\n          }\n\n          if (pd(c) || ua(c)) return null !== e ? null : n(b, a, c, d, null);\n          rd(b, c);\n        }\n\n        return null;\n      }\n\n      function v(b, a, c, d, e) {\n        if (\"string\" === typeof d || \"number\" === typeof d) return b = b.get(c) || null, k(a, b, \"\" + d, e);\n\n        if (\"object\" === typeof d && null !== d) {\n          switch (d.$$typeof) {\n            case ha:\n              return b = b.get(null === d.key ? c : d.key) || null, d.type === ja ? n(a, b, d.props.children, e, d.key) : h(a, b, d, e);\n\n            case ia:\n              return b = b.get(null === d.key ? c : d.key) || null, l(a, b, d, e);\n          }\n\n          if (pd(d) || ua(d)) return b = b.get(c) || null, n(a, b, d, e, null);\n          rd(a, d);\n        }\n\n        return null;\n      }\n\n      function N(e, g, h, k) {\n        for (var l = null, x = null, r = g, u = g = 0, n = null; null !== r && u < h.length; u++) {\n          r.index > u ? (n = r, r = null) : n = r.sibling;\n          var t = w(e, r, h[u], k);\n\n          if (null === t) {\n            null === r && (r = n);\n            break;\n          }\n\n          a && r && null === t.alternate && b(e, r);\n          g = f(t, g, u);\n          null === x ? l = t : x.sibling = t;\n          x = t;\n          r = n;\n        }\n\n        if (u === h.length) return c(e, r), l;\n\n        if (null === r) {\n          for (; u < h.length; u++) if (r = z(e, h[u], k)) g = f(r, g, u), null === x ? l = r : x.sibling = r, x = r;\n\n          return l;\n        }\n\n        for (r = d(e, r); u < h.length; u++) if (n = v(r, e, u, h[u], k)) a && null !== n.alternate && r.delete(null === n.key ? u : n.key), g = f(n, g, u), null === x ? l = n : x.sibling = n, x = n;\n\n        a && r.forEach(function (a) {\n          return b(e, a);\n        });\n        return l;\n      }\n\n      function P(e, g, h, k) {\n        var l = ua(h);\n        \"function\" !== typeof l ? m(\"150\") : void 0;\n        h = l.call(h);\n        null == h ? m(\"151\") : void 0;\n\n        for (var r = l = null, u = g, x = g = 0, n = null, t = h.next(); null !== u && !t.done; x++, t = h.next()) {\n          u.index > x ? (n = u, u = null) : n = u.sibling;\n          var aa = w(e, u, t.value, k);\n\n          if (null === aa) {\n            u || (u = n);\n            break;\n          }\n\n          a && u && null === aa.alternate && b(e, u);\n          g = f(aa, g, x);\n          null === r ? l = aa : r.sibling = aa;\n          r = aa;\n          u = n;\n        }\n\n        if (t.done) return c(e, u), l;\n\n        if (null === u) {\n          for (; !t.done; x++, t = h.next()) t = z(e, t.value, k), null !== t && (g = f(t, g, x), null === r ? l = t : r.sibling = t, r = t);\n\n          return l;\n        }\n\n        for (u = d(e, u); !t.done; x++, t = h.next()) t = v(u, e, x, t.value, k), null !== t && (a && null !== t.alternate && u.delete(null === t.key ? x : t.key), g = f(t, g, x), null === r ? l = t : r.sibling = t, r = t);\n\n        a && u.forEach(function (a) {\n          return b(e, a);\n        });\n        return l;\n      }\n\n      return function (a, d, f, h) {\n        var k = \"object\" === typeof f && null !== f && f.type === ja && null === f.key;\n        k && (f = f.props.children);\n        var l = \"object\" === typeof f && null !== f;\n        if (l) switch (f.$$typeof) {\n          case ha:\n            a: {\n              l = f.key;\n\n              for (k = d; null !== k;) {\n                if (k.key === l) {\n                  if (7 === k.tag ? f.type === ja : k.elementType === f.type) {\n                    c(a, k.sibling);\n                    d = e(k, f.type === ja ? f.props.children : f.props, h);\n                    d.ref = qd(a, k, f);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  } else {\n                    c(a, k);\n                    break;\n                  }\n                } else b(a, k);\n                k = k.sibling;\n              }\n\n              f.type === ja ? (d = Wb(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Vb(f.type, f.key, f.props, null, a.mode, h), h.ref = qd(a, d, f), h.return = a, a = h);\n            }\n\n            return g(a);\n\n          case ia:\n            a: {\n              for (k = f.key; null !== d;) {\n                if (d.key === k) {\n                  if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {\n                    c(a, d.sibling);\n                    d = e(d, f.children || [], h);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  } else {\n                    c(a, d);\n                    break;\n                  }\n                } else b(a, d);\n                d = d.sibling;\n              }\n\n              d = Zb(f, a.mode, h);\n              d.return = a;\n              a = d;\n            }\n\n            return g(a);\n        }\n        if (\"string\" === typeof f || \"number\" === typeof f) return f = \"\" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f, h), d.return = a, a = d) : (c(a, d), d = Yb(f, a.mode, h), d.return = a, a = d), g(a);\n        if (pd(f)) return N(a, d, f, h);\n        if (ua(f)) return P(a, d, f, h);\n        l && rd(a, f);\n        if (\"undefined\" === typeof f && !k) switch (a.tag) {\n          case 1:\n          case 0:\n            h = a.type, m(\"152\", h.displayName || h.name || \"Component\");\n        }\n        return c(a, d);\n      };\n    }\n\n    var td = sd(!0),\n        ud = sd(!1),\n        vd = null,\n        wd = null,\n        xd = !1;\n\n    function yd(a, b) {\n      var c = D(5, null, null, 0);\n      c.elementType = \"DELETED\";\n      c.type = \"DELETED\";\n      c.stateNode = b;\n      c.return = a;\n      c.effectTag = 8;\n      null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;\n    }\n\n    function zd(a, b) {\n      switch (a.tag) {\n        case 5:\n          return b = tb(b, a.type, a.pendingProps), null !== b ? (a.stateNode = b, !0) : !1;\n\n        case 6:\n          return b = ub(b, a.pendingProps), null !== b ? (a.stateNode = b, !0) : !1;\n\n        default:\n          return !1;\n      }\n    }\n\n    function Ad(a) {\n      if (xd) {\n        var b = wd;\n\n        if (b) {\n          var c = b;\n\n          if (!zd(a, b)) {\n            b = vb(c);\n\n            if (!b || !zd(a, b)) {\n              a.effectTag |= 2;\n              xd = !1;\n              vd = a;\n              return;\n            }\n\n            yd(vd, c);\n          }\n\n          vd = a;\n          wd = wb(b);\n        } else a.effectTag |= 2, xd = !1, vd = a;\n      }\n    }\n\n    function Bd(a) {\n      for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag;) a = a.return;\n\n      vd = a;\n    }\n\n    function Cd(a) {\n      if (!Xa || a !== vd) return !1;\n      if (!xd) return Bd(a), xd = !0, !1;\n      var b = a.type;\n      if (5 !== a.tag || \"head\" !== b && \"body\" !== b && !Ka(b, a.memoizedProps)) for (b = wd; b;) yd(a, b), b = vb(b);\n      Bd(a);\n      wd = vd ? vb(a.stateNode) : null;\n      return !0;\n    }\n\n    function Dd() {\n      Xa && (wd = vd = null, xd = !1);\n    }\n\n    var Ed = fa.ReactCurrentOwner;\n\n    function M(a, b, c, d) {\n      b.child = null === a ? ud(b, null, c, d) : td(b, a.child, c, d);\n    }\n\n    function Fd(a, b, c, d, e) {\n      c = c.render;\n      var f = b.ref;\n      vc(b, e);\n      yc = e;\n      F = b;\n      zc = null !== a ? a.memoizedState : null;\n      var g = c(d, f);\n      g = Hc(c, d, g, f);\n      b.effectTag |= 1;\n      M(a, b, g, e);\n      return b.child;\n    }\n\n    function Gd(a, b, c, d, e, f) {\n      if (null === a) {\n        var g = c.type;\n        if (\"function\" === typeof g && !Sb(g) && void 0 === g.defaultProps && null === c.compare) return b.tag = 15, b.type = g, Hd(a, b, g, d, e, f);\n        a = Vb(c.type, null, d, null, b.mode, f);\n        a.ref = b.ref;\n        a.return = b;\n        return b.child = a;\n      }\n\n      g = a.child;\n      if (e < f && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : fd, c(e, d) && a.ref === b.ref)) return Kd(a, b, f);\n      b.effectTag |= 1;\n      a = Ub(g, d, f);\n      a.ref = b.ref;\n      a.return = b;\n      return b.child = a;\n    }\n\n    function Hd(a, b, c, d, e, f) {\n      return null !== a && e < f && fd(a.memoizedProps, d) && a.ref === b.ref ? Kd(a, b, f) : Ld(a, b, c, d, f);\n    }\n\n    function Md(a, b) {\n      var c = b.ref;\n      if (null === a && null !== c || null !== a && a.ref !== c) b.effectTag |= 128;\n    }\n\n    function Ld(a, b, c, d, e) {\n      var f = C(c) ? Eb : A.current;\n      f = Fb(b, f);\n      vc(b, e);\n      yc = e;\n      F = b;\n      zc = null !== a ? a.memoizedState : null;\n      var g = c(d, f);\n      g = Hc(c, d, g, f);\n      b.effectTag |= 1;\n      M(a, b, g, e);\n      return b.child;\n    }\n\n    function Nd(a, b, c, d, e) {\n      if (C(c)) {\n        var f = !0;\n        Lb(b);\n      } else f = !1;\n\n      vc(b, e);\n      if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), md(b, c, d, e), od(b, c, d, e), d = !0;else if (null === a) {\n        var g = b.stateNode,\n            k = b.memoizedProps;\n        g.props = k;\n        var h = g.context,\n            l = c.contextType;\n        \"object\" === typeof l && null !== l ? l = hd.currentDispatcher.readContext(l) : (l = C(c) ? Eb : A.current, l = Fb(b, l));\n        var n = c.getDerivedStateFromProps,\n            z = \"function\" === typeof n || \"function\" === typeof g.getSnapshotBeforeUpdate;\n        z || \"function\" !== typeof g.UNSAFE_componentWillReceiveProps && \"function\" !== typeof g.componentWillReceiveProps || (k !== d || h !== l) && nd(b, g, d, l);\n        dc = !1;\n        var w = b.memoizedState;\n        h = g.state = w;\n        var v = b.updateQueue;\n        null !== v && (lc(b, v, d, g, e), h = b.memoizedState);\n        k !== d || w !== h || B.current || dc ? (\"function\" === typeof n && (jd(b, c, n, d), h = b.memoizedState), (k = dc || ld(b, c, k, d, w, h, l)) ? (z || \"function\" !== typeof g.UNSAFE_componentWillMount && \"function\" !== typeof g.componentWillMount || (\"function\" === typeof g.componentWillMount && g.componentWillMount(), \"function\" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), \"function\" === typeof g.componentDidMount && (b.effectTag |= 4)) : (\"function\" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = h), g.props = d, g.state = h, g.context = l, d = k) : (\"function\" === typeof g.componentDidMount && (b.effectTag |= 4), d = !1);\n      } else g = b.stateNode, k = b.memoizedProps, g.props = b.type === b.elementType ? k : L(b.type, k), h = g.context, l = c.contextType, \"object\" === typeof l && null !== l ? l = hd.currentDispatcher.readContext(l) : (l = C(c) ? Eb : A.current, l = Fb(b, l)), n = c.getDerivedStateFromProps, (z = \"function\" === typeof n || \"function\" === typeof g.getSnapshotBeforeUpdate) || \"function\" !== typeof g.UNSAFE_componentWillReceiveProps && \"function\" !== typeof g.componentWillReceiveProps || (k !== d || h !== l) && nd(b, g, d, l), dc = !1, h = b.memoizedState, w = g.state = h, v = b.updateQueue, null !== v && (lc(b, v, d, g, e), w = b.memoizedState), k !== d || h !== w || B.current || dc ? (\"function\" === typeof n && (jd(b, c, n, d), w = b.memoizedState), (n = dc || ld(b, c, k, d, h, w, l)) ? (z || \"function\" !== typeof g.UNSAFE_componentWillUpdate && \"function\" !== typeof g.componentWillUpdate || (\"function\" === typeof g.componentWillUpdate && g.componentWillUpdate(d, w, l), \"function\" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, w, l)), \"function\" === typeof g.componentDidUpdate && (b.effectTag |= 4), \"function\" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : (\"function\" !== typeof g.componentDidUpdate || k === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 4), \"function\" !== typeof g.getSnapshotBeforeUpdate || k === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = w), g.props = d, g.state = w, g.context = l, d = n) : (\"function\" !== typeof g.componentDidUpdate || k === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 4), \"function\" !== typeof g.getSnapshotBeforeUpdate || k === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 256), d = !1);\n      return Od(a, b, c, d, f, e);\n    }\n\n    function Od(a, b, c, d, e, f) {\n      Md(a, b);\n      var g = 0 !== (b.effectTag & 64);\n      if (!d && !g) return e && Mb(b, c, !1), Kd(a, b, f);\n      d = b.stateNode;\n      Ed.current = b;\n      var k = g && \"function\" !== typeof c.getDerivedStateFromError ? null : d.render();\n      b.effectTag |= 1;\n      null !== a && g ? (b.child = td(b, a.child, null, f), b.child = td(b, null, k, f)) : M(a, b, k, f);\n      b.memoizedState = d.state;\n      e && Mb(b, c, !0);\n      return b.child;\n    }\n\n    function Pd(a) {\n      var b = a.stateNode;\n      b.pendingContext ? Jb(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Jb(a, b.context, !1);\n      Zc(a, b.containerInfo);\n    }\n\n    function Qd(a, b, c) {\n      var d = b.mode,\n          e = b.pendingProps,\n          f = b.memoizedState;\n\n      if (0 === (b.effectTag & 64)) {\n        f = null;\n        var g = !1;\n      } else f = {\n        timedOutAt: null !== f ? f.timedOutAt : 0\n      }, g = !0, b.effectTag &= -65;\n\n      null === a ? g ? (g = e.fallback, e = Wb(null, d, 0, null), 0 === (b.mode & 1) && (e.child = null !== b.memoizedState ? b.child.child : b.child), d = Wb(g, d, c, null), e.sibling = d, c = e, c.return = d.return = b) : c = d = ud(b, null, e.children, c) : null !== a.memoizedState ? (d = a.child, a = d.sibling, g ? (c = e.fallback, e = Ub(d, d.pendingProps, 0), 0 === (b.mode & 1) && (g = null !== b.memoizedState ? b.child.child : b.child, g !== d.child && (e.child = g)), d = e.sibling = Ub(a, c, a.expirationTime), c = e, e.childExpirationTime = 0, c.return = d.return = b) : c = d = td(b, d.child, e.children, c)) : (a = a.child, g ? (g = e.fallback, e = Wb(null, d, 0, null), e.child = a, 0 === (b.mode & 1) && (e.child = null !== b.memoizedState ? b.child.child : b.child), d = e.sibling = Wb(g, d, c, null), d.effectTag |= 2, c = e, e.childExpirationTime = 0, c.return = d.return = b) : d = c = td(b, a, e.children, c));\n      b.memoizedState = f;\n      b.child = c;\n      return d;\n    }\n\n    function Kd(a, b, c) {\n      null !== a && (b.firstContextDependency = a.firstContextDependency);\n      if (b.childExpirationTime < c) return null;\n      null !== a && b.child !== a.child ? m(\"153\") : void 0;\n\n      if (null !== b.child) {\n        a = b.child;\n        c = Ub(a, a.pendingProps, a.expirationTime);\n        b.child = c;\n\n        for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = Ub(a, a.pendingProps, a.expirationTime), c.return = b;\n\n        c.sibling = null;\n      }\n\n      return b.child;\n    }\n\n    function Rd(a, b, c) {\n      var d = b.expirationTime;\n\n      if (null !== a && a.memoizedProps === b.pendingProps && !B.current && d < c) {\n        switch (b.tag) {\n          case 3:\n            Pd(b);\n            Dd();\n            break;\n\n          case 5:\n            bd(b);\n            break;\n\n          case 1:\n            C(b.type) && Lb(b);\n            break;\n\n          case 4:\n            Zc(b, b.stateNode.containerInfo);\n            break;\n\n          case 10:\n            tc(b, b.memoizedProps.value);\n            break;\n\n          case 13:\n            if (null !== b.memoizedState) {\n              d = b.child.childExpirationTime;\n              if (0 !== d && d >= c) return Qd(a, b, c);\n              b = Kd(a, b, c);\n              return null !== b ? b.sibling : null;\n            }\n\n        }\n\n        return Kd(a, b, c);\n      }\n\n      b.expirationTime = 0;\n\n      switch (b.tag) {\n        case 2:\n          d = b.elementType;\n          null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);\n          a = b.pendingProps;\n          var e = Fb(b, A.current);\n          vc(b, c);\n          yc = c;\n          F = b;\n          zc = null;\n          var f = d(a, e);\n          b.effectTag |= 1;\n\n          if (\"object\" === typeof f && null !== f && \"function\" === typeof f.render && void 0 === f.$$typeof) {\n            b.tag = 1;\n            Ic();\n            C(d) ? (e = !0, Lb(b)) : e = !1;\n            b.memoizedState = null !== f.state && void 0 !== f.state ? f.state : null;\n            var g = d.getDerivedStateFromProps;\n            \"function\" === typeof g && jd(b, d, g, a);\n            f.updater = kd;\n            b.stateNode = f;\n            f._reactInternalFiber = b;\n            od(b, d, a, c);\n            b = Od(null, b, d, !0, e, c);\n          } else b.tag = 0, f = Hc(d, a, f, e), M(null, b, f, c), b = b.child;\n\n          return b;\n\n        case 16:\n          f = b.elementType;\n          null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);\n          e = b.pendingProps;\n          a = gd(f);\n          b.type = a;\n          f = b.tag = Tb(a);\n          e = L(a, e);\n          g = void 0;\n\n          switch (f) {\n            case 0:\n              g = Ld(null, b, a, e, c);\n              break;\n\n            case 1:\n              g = Nd(null, b, a, e, c);\n              break;\n\n            case 11:\n              g = Fd(null, b, a, e, c);\n              break;\n\n            case 14:\n              g = Gd(null, b, a, L(a.type, e), d, c);\n              break;\n\n            default:\n              m(\"283\", a);\n          }\n\n          return g;\n\n        case 0:\n          return d = b.type, f = b.pendingProps, f = b.elementType === d ? f : L(d, f), Ld(a, b, d, f, c);\n\n        case 1:\n          return d = b.type, f = b.pendingProps, f = b.elementType === d ? f : L(d, f), Nd(a, b, d, f, c);\n\n        case 3:\n          Pd(b);\n          d = b.updateQueue;\n          null === d ? m(\"282\") : void 0;\n          f = b.memoizedState;\n          f = null !== f ? f.element : null;\n          lc(b, d, b.pendingProps, null, c);\n          d = b.memoizedState.element;\n          if (d === f) Dd(), b = Kd(a, b, c);else {\n            f = b.stateNode;\n            if (f = (null === a || null === a.child) && f.hydrate) Xa ? (wd = wb(b.stateNode.containerInfo), vd = b, f = xd = !0) : f = !1;\n            f ? (b.effectTag |= 2, b.child = ud(b, null, d, c)) : (M(a, b, d, c), Dd());\n            b = b.child;\n          }\n          return b;\n\n        case 5:\n          return bd(b), null === a && Ad(b), d = b.type, f = b.pendingProps, e = null !== a ? a.memoizedProps : null, g = f.children, Ka(d, f) ? g = null : null !== e && Ka(d, e) && (b.effectTag |= 16), Md(a, b), 1 !== c && b.mode & 1 && La(d, f) ? (b.expirationTime = 1, b = null) : (M(a, b, g, c), b = b.child), b;\n\n        case 6:\n          return null === a && Ad(b), null;\n\n        case 13:\n          return Qd(a, b, c);\n\n        case 4:\n          return Zc(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = td(b, null, d, c) : M(a, b, d, c), b.child;\n\n        case 11:\n          return d = b.type, f = b.pendingProps, f = b.elementType === d ? f : L(d, f), Fd(a, b, d, f, c);\n\n        case 7:\n          return M(a, b, b.pendingProps, c), b.child;\n\n        case 8:\n          return M(a, b, b.pendingProps.children, c), b.child;\n\n        case 12:\n          return M(a, b, b.pendingProps.children, c), b.child;\n\n        case 10:\n          a: {\n            d = b.type._context;\n            f = b.pendingProps;\n            g = b.memoizedProps;\n            e = f.value;\n            tc(b, e);\n\n            if (null !== g) {\n              var k = g.value;\n              e = k === e && (0 !== k || 1 / k === 1 / e) || k !== k && e !== e ? 0 : (\"function\" === typeof d._calculateChangedBits ? d._calculateChangedBits(k, e) : 1073741823) | 0;\n\n              if (0 === e) {\n                if (g.children === f.children && !B.current) {\n                  b = Kd(a, b, c);\n                  break a;\n                }\n              } else for (g = b.child, null !== g && (g.return = b); null !== g;) {\n                k = g.firstContextDependency;\n\n                if (null !== k) {\n                  do {\n                    if (k.context === d && 0 !== (k.observedBits & e)) {\n                      if (1 === g.tag) {\n                        var h = gc(c);\n                        h.tag = 2;\n                        E(g, h);\n                      }\n\n                      g.expirationTime < c && (g.expirationTime = c);\n                      h = g.alternate;\n                      null !== h && h.expirationTime < c && (h.expirationTime = c);\n\n                      for (var l = g.return; null !== l;) {\n                        h = l.alternate;\n                        if (l.childExpirationTime < c) l.childExpirationTime = c, null !== h && h.childExpirationTime < c && (h.childExpirationTime = c);else if (null !== h && h.childExpirationTime < c) h.childExpirationTime = c;else break;\n                        l = l.return;\n                      }\n                    }\n\n                    h = g.child;\n                    k = k.next;\n                  } while (null !== k);\n                } else h = 10 === g.tag ? g.type === b.type ? null : g.child : g.child;\n\n                if (null !== h) h.return = g;else for (h = g; null !== h;) {\n                  if (h === b) {\n                    h = null;\n                    break;\n                  }\n\n                  g = h.sibling;\n\n                  if (null !== g) {\n                    g.return = h.return;\n                    h = g;\n                    break;\n                  }\n\n                  h = h.return;\n                }\n                g = h;\n              }\n            }\n\n            M(a, b, f.children, c);\n            b = b.child;\n          }\n\n          return b;\n\n        case 9:\n          return f = b.type, e = b.pendingProps, d = e.children, vc(b, c), f = wc(f, e.unstable_observedBits), d = d(f), b.effectTag |= 1, M(a, b, d, c), b.child;\n\n        case 14:\n          return f = b.type, e = L(f.type, b.pendingProps), Gd(a, b, f, e, d, c);\n\n        case 15:\n          return Hd(a, b, b.type, b.pendingProps, d, c);\n\n        case 17:\n          return d = b.type, f = b.pendingProps, f = b.elementType === d ? f : L(d, f), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, C(d) ? (a = !0, Lb(b)) : a = !1, vc(b, c), md(b, d, f, c), od(b, d, f, c), Od(null, b, d, !0, a, c);\n\n        default:\n          m(\"156\");\n      }\n    }\n\n    function Sd(a) {\n      a.effectTag |= 4;\n    }\n\n    var Td = void 0,\n        Ud = void 0,\n        Vd = void 0,\n        Wd = void 0;\n    if (Va) Td = function (a, b) {\n      for (var c = b.child; null !== c;) {\n        if (5 === c.tag || 6 === c.tag) Ha(a, c.stateNode);else if (4 !== c.tag && null !== c.child) {\n          c.child.return = c;\n          c = c.child;\n          continue;\n        }\n        if (c === b) break;\n\n        for (; null === c.sibling;) {\n          if (null === c.return || c.return === b) return;\n          c = c.return;\n        }\n\n        c.sibling.return = c.return;\n        c = c.sibling;\n      }\n    }, Ud = function () {}, Vd = function (a, b, c, d, e) {\n      a = a.memoizedProps;\n\n      if (a !== d) {\n        var f = b.stateNode,\n            g = ad();\n        c = Ja(f, c, a, d, e, g);\n        (b.updateQueue = c) && Sd(b);\n      }\n    }, Wd = function (a, b, c, d) {\n      c !== d && Sd(b);\n    };else if (Wa) {\n      Td = function (a, b, c, d) {\n        for (var e = b.child; null !== e;) {\n          a: if (5 === e.tag) {\n            var f = e.stateNode;\n\n            if (c) {\n              var g = e.memoizedProps,\n                  k = e.type;\n              f = d ? qb(f, k, g, e) : rb(f, k, g, e);\n              e.stateNode = f;\n            }\n\n            Ha(a, f);\n          } else if (6 === e.tag) f = e.stateNode, c && (f = e.memoizedProps, g = Yc(Xc.current), k = ad(), f = d ? sb(f, g, k, b) : Ma(f, g, k, b), e.stateNode = f), Ha(a, f);else if (4 !== e.tag) {\n            if (13 === e.tag && (g = e.alternate, null !== g && (f = null !== e.memoizedState, null !== g.memoizedState !== f))) {\n              g = f ? e.child : e;\n              null !== g && Td(a, g, !0, f);\n              break a;\n            }\n\n            if (null !== e.child) {\n              e.child.return = e;\n              e = e.child;\n              continue;\n            }\n          }\n\n          if (e === b) break;\n\n          for (; null === e.sibling;) {\n            if (null === e.return || e.return === b) return;\n            e = e.return;\n          }\n\n          e.sibling.return = e.return;\n          e = e.sibling;\n        }\n      };\n\n      var Xd = function (a, b, c, d) {\n        for (var e = b.child; null !== e;) {\n          a: if (5 === e.tag) {\n            var f = e.stateNode;\n\n            if (c) {\n              var g = e.memoizedProps,\n                  k = e.type;\n              f = d ? qb(f, k, g, e) : rb(f, k, g, e);\n              e.stateNode = f;\n            }\n\n            nb(a, f);\n          } else if (6 === e.tag) f = e.stateNode, c && (f = e.memoizedProps, g = Yc(Xc.current), k = ad(), f = d ? sb(f, g, k, b) : Ma(f, g, k, b), e.stateNode = f), nb(a, f);else if (4 !== e.tag) {\n            if (13 === e.tag && (g = e.alternate, null !== g && (f = null !== e.memoizedState, null !== g.memoizedState !== f))) {\n              g = f ? e.child : e;\n              null !== g && Xd(a, g, !0, f);\n              break a;\n            }\n\n            if (null !== e.child) {\n              e.child.return = e;\n              e = e.child;\n              continue;\n            }\n          }\n\n          if (e === b) break;\n\n          for (; null === e.sibling;) {\n            if (null === e.return || e.return === b) return;\n            e = e.return;\n          }\n\n          e.sibling.return = e.return;\n          e = e.sibling;\n        }\n      };\n\n      Ud = function (a) {\n        var b = a.stateNode;\n\n        if (null !== a.firstEffect) {\n          var c = b.containerInfo,\n              d = mb(c);\n          Xd(d, a, !1, !1);\n          b.pendingChildren = d;\n          Sd(a);\n          ob(c, d);\n        }\n      };\n\n      Vd = function (a, b, c, d, e) {\n        var f = a.stateNode,\n            g = a.memoizedProps;\n        if ((a = null === b.firstEffect) && g === d) b.stateNode = f;else {\n          var k = b.stateNode,\n              h = ad(),\n              l = null;\n          g !== d && (l = Ja(k, c, g, d, e, h));\n          a && null === l ? b.stateNode = f : (f = lb(f, l, c, g, d, b, a, k), Ia(f, c, d, e, h) && Sd(b), b.stateNode = f, a ? Sd(b) : Td(f, b, !1, !1));\n        }\n      };\n\n      Wd = function (a, b, c, d) {\n        c !== d && (a = Yc(Xc.current), c = ad(), b.stateNode = Ma(d, a, c, b), Sd(b));\n      };\n    } else Ud = function () {}, Vd = function () {}, Wd = function () {};\n\n    function Yd(a, b) {\n      var c = b.source,\n          d = b.stack;\n      null === d && null !== c && (d = Ab(c));\n      null !== c && va(c.type);\n      b = b.value;\n      null !== a && 1 === a.tag && va(a.type);\n\n      try {\n        console.error(b);\n      } catch (e) {\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n\n    function Zd(a) {\n      var b = a.ref;\n      if (null !== b) if (\"function\" === typeof b) try {\n        b(null);\n      } catch (c) {\n        $d(a, c);\n      } else b.current = null;\n    }\n\n    function ae(a, b, c) {\n      c = c.updateQueue;\n      c = null !== c ? c.lastEffect : null;\n\n      if (null !== c) {\n        var d = c = c.next;\n\n        do {\n          if (0 !== (d.tag & a)) {\n            var e = d.destroy;\n            d.destroy = null;\n            null !== e && e();\n          }\n\n          0 !== (d.tag & b) && (e = d.create, e = e(), \"function\" !== typeof e && (e = null), d.destroy = e);\n          d = d.next;\n        } while (d !== c);\n      }\n    }\n\n    function be(a) {\n      \"function\" === typeof Ob && Ob(a);\n\n      switch (a.tag) {\n        case 0:\n        case 11:\n        case 14:\n        case 15:\n          var b = a.updateQueue;\n\n          if (null !== b && (b = b.lastEffect, null !== b)) {\n            var c = b = b.next;\n\n            do {\n              var d = c.destroy;\n\n              if (null !== d) {\n                var e = a;\n\n                try {\n                  d();\n                } catch (f) {\n                  $d(e, f);\n                }\n              }\n\n              c = c.next;\n            } while (c !== b);\n          }\n\n          break;\n\n        case 1:\n          Zd(a);\n          b = a.stateNode;\n          if (\"function\" === typeof b.componentWillUnmount) try {\n            b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();\n          } catch (f) {\n            $d(a, f);\n          }\n          break;\n\n        case 5:\n          Zd(a);\n          break;\n\n        case 4:\n          Va ? ce(a) : Wa && Wa && (a = a.stateNode.containerInfo, b = mb(a), pb(a, b));\n      }\n    }\n\n    function de(a) {\n      for (var b = a;;) if (be(b), null === b.child || Va && 4 === b.tag) {\n        if (b === a) break;\n\n        for (; null === b.sibling;) {\n          if (null === b.return || b.return === a) return;\n          b = b.return;\n        }\n\n        b.sibling.return = b.return;\n        b = b.sibling;\n      } else b.child.return = b, b = b.child;\n    }\n\n    function ee(a) {\n      return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n    }\n\n    function fe(a) {\n      if (Va) {\n        a: {\n          for (var b = a.return; null !== b;) {\n            if (ee(b)) {\n              var c = b;\n              break a;\n            }\n\n            b = b.return;\n          }\n\n          m(\"160\");\n          c = void 0;\n        }\n\n        var d = b = void 0;\n\n        switch (c.tag) {\n          case 5:\n            b = c.stateNode;\n            d = !1;\n            break;\n\n          case 3:\n            b = c.stateNode.containerInfo;\n            d = !0;\n            break;\n\n          case 4:\n            b = c.stateNode.containerInfo;\n            d = !0;\n            break;\n\n          default:\n            m(\"161\");\n        }\n\n        c.effectTag & 16 && (gb(b), c.effectTag &= -17);\n\n        a: b: for (c = a;;) {\n          for (; null === c.sibling;) {\n            if (null === c.return || ee(c.return)) {\n              c = null;\n              break a;\n            }\n\n            c = c.return;\n          }\n\n          c.sibling.return = c.return;\n\n          for (c = c.sibling; 5 !== c.tag && 6 !== c.tag;) {\n            if (c.effectTag & 2) continue b;\n            if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;\n          }\n\n          if (!(c.effectTag & 2)) {\n            c = c.stateNode;\n            break a;\n          }\n        }\n\n        for (var e = a;;) {\n          if (5 === e.tag || 6 === e.tag) c ? d ? db(b, e.stateNode, c) : cb(b, e.stateNode, c) : d ? Za(b, e.stateNode) : Ya(b, e.stateNode);else if (4 !== e.tag && null !== e.child) {\n            e.child.return = e;\n            e = e.child;\n            continue;\n          }\n          if (e === a) break;\n\n          for (; null === e.sibling;) {\n            if (null === e.return || e.return === a) return;\n            e = e.return;\n          }\n\n          e.sibling.return = e.return;\n          e = e.sibling;\n        }\n      }\n    }\n\n    function ce(a) {\n      for (var b = a, c = !1, d = void 0, e = void 0;;) {\n        if (!c) {\n          c = b.return;\n\n          a: for (;;) {\n            null === c ? m(\"160\") : void 0;\n\n            switch (c.tag) {\n              case 5:\n                d = c.stateNode;\n                e = !1;\n                break a;\n\n              case 3:\n                d = c.stateNode.containerInfo;\n                e = !0;\n                break a;\n\n              case 4:\n                d = c.stateNode.containerInfo;\n                e = !0;\n                break a;\n            }\n\n            c = c.return;\n          }\n\n          c = !0;\n        }\n\n        if (5 === b.tag || 6 === b.tag) de(b), e ? fb(d, b.stateNode) : eb(d, b.stateNode);else if (4 === b.tag ? (d = b.stateNode.containerInfo, e = !0) : be(b), null !== b.child) {\n          b.child.return = b;\n          b = b.child;\n          continue;\n        }\n        if (b === a) break;\n\n        for (; null === b.sibling;) {\n          if (null === b.return || b.return === a) return;\n          b = b.return;\n          4 === b.tag && (c = !1);\n        }\n\n        b.sibling.return = b.return;\n        b = b.sibling;\n      }\n    }\n\n    function ge(a, b) {\n      if (Va) switch (b.tag) {\n        case 0:\n        case 11:\n        case 14:\n        case 15:\n          ae(4, 8, b);\n          break;\n\n        case 1:\n          break;\n\n        case 5:\n          var c = b.stateNode;\n\n          if (null != c) {\n            var d = b.memoizedProps;\n            a = null !== a ? a.memoizedProps : d;\n            var e = b.type,\n                f = b.updateQueue;\n            b.updateQueue = null;\n            null !== f && bb(c, f, e, a, d, b);\n          }\n\n          break;\n\n        case 6:\n          null === b.stateNode ? m(\"162\") : void 0;\n          c = b.memoizedProps;\n          $a(b.stateNode, null !== a ? a.memoizedProps : c, c);\n          break;\n\n        case 3:\n          break;\n\n        case 12:\n          break;\n\n        case 13:\n          d = b.memoizedState;\n          a = b;\n          null === d ? c = !1 : (c = !0, a = b.child, 0 === d.timedOutAt && (d.timedOutAt = K()));\n          if (null !== a) a: if (b = a, Va) for (d = b;;) {\n            if (5 === d.tag) a = d.stateNode, c ? hb(a) : jb(d.stateNode, d.memoizedProps);else if (6 === d.tag) a = d.stateNode, c ? ib(a) : kb(a, d.memoizedProps);else if (13 === d.tag && null !== d.memoizedState) {\n              a = d.child.sibling;\n              a.return = d;\n              d = a;\n              continue;\n            } else if (null !== d.child) {\n              d.child.return = d;\n              d = d.child;\n              continue;\n            }\n            if (d === b) break a;\n\n            for (; null === d.sibling;) {\n              if (null === d.return || d.return === b) break a;\n              d = d.return;\n            }\n\n            d.sibling.return = d.return;\n            d = d.sibling;\n          }\n          break;\n\n        case 17:\n          break;\n\n        default:\n          m(\"163\");\n      } else {\n        switch (b.tag) {\n          case 0:\n          case 11:\n          case 14:\n          case 15:\n            ae(4, 8, b);\n            return;\n        }\n\n        if (Wa) switch (b.tag) {\n          case 1:\n            break;\n\n          case 5:\n            break;\n\n          case 6:\n            break;\n\n          case 3:\n          case 4:\n            b = b.stateNode;\n            pb(b.containerInfo, b.pendingChildren);\n            break;\n\n          default:\n            m(\"163\");\n        }\n      }\n    }\n\n    function he(a, b, c) {\n      c = gc(c);\n      c.tag = 3;\n      c.payload = {\n        element: null\n      };\n      var d = b.value;\n\n      c.callback = function () {\n        ie(d);\n        Yd(a, b);\n      };\n\n      return c;\n    }\n\n    function je(a, b, c) {\n      c = gc(c);\n      c.tag = 3;\n      var d = a.type.getDerivedStateFromError;\n\n      if (\"function\" === typeof d) {\n        var e = b.value;\n\n        c.payload = function () {\n          return d(e);\n        };\n      }\n\n      var f = a.stateNode;\n      null !== f && \"function\" === typeof f.componentDidCatch && (c.callback = function () {\n        \"function\" !== typeof d && (null === ke ? ke = new Set([this]) : ke.add(this));\n        var c = b.value,\n            e = b.stack;\n        Yd(a, b);\n        this.componentDidCatch(c, {\n          componentStack: null !== e ? e : \"\"\n        });\n      });\n      return c;\n    }\n\n    function le(a) {\n      switch (a.tag) {\n        case 1:\n          C(a.type) && Gb(a);\n          var b = a.effectTag;\n          return b & 2048 ? (a.effectTag = b & -2049 | 64, a) : null;\n\n        case 3:\n          return $c(a), Hb(a), b = a.effectTag, 0 !== (b & 64) ? m(\"285\") : void 0, a.effectTag = b & -2049 | 64, a;\n\n        case 5:\n          return cd(a), null;\n\n        case 13:\n          return b = a.effectTag, b & 2048 ? (a.effectTag = b & -2049 | 64, a) : null;\n\n        case 4:\n          return $c(a), null;\n\n        case 10:\n          return uc(a), null;\n\n        default:\n          return null;\n      }\n    }\n\n    var me = {\n      readContext: wc,\n      useCallback: function (a, b) {\n        F = Gc();\n        H = Lc();\n        b = void 0 !== b && null !== b ? b : [a];\n        var c = H.memoizedState;\n        if (null !== c && xc(b, c[1])) return c[0];\n        H.memoizedState = [a, b];\n        return a;\n      },\n      useContext: function (a, b) {\n        Gc();\n        return wc(a, b);\n      },\n      useEffect: function (a, b) {\n        Qc(516, 192, a, b);\n      },\n      useImperativeMethods: function (a, b, c) {\n        c = null !== c && void 0 !== c ? c.concat([a]) : [a, b];\n        Qc(4, 36, function () {\n          if (\"function\" === typeof a) {\n            var c = b();\n            a(c);\n            return function () {\n              return a(null);\n            };\n          }\n\n          if (null !== a && void 0 !== a) return c = b(), a.current = c, function () {\n            a.current = null;\n          };\n        }, c);\n      },\n      useLayoutEffect: function (a, b) {\n        Qc(4, 36, a, b);\n      },\n      useMemo: function (a, b) {\n        F = Gc();\n        H = Lc();\n        b = void 0 !== b && null !== b ? b : [a];\n        var c = H.memoizedState;\n        if (null !== c && xc(b, c[1])) return c[0];\n        a = a();\n        H.memoizedState = [a, b];\n        return a;\n      },\n      useMutationEffect: function (a, b) {\n        Qc(260, 10, a, b);\n      },\n      useReducer: Nc,\n      useRef: function (a) {\n        F = Gc();\n        H = Lc();\n        null === H.memoizedState ? (a = {\n          current: a\n        }, H.memoizedState = a) : a = H.memoizedState;\n        return a;\n      },\n      useState: function (a) {\n        return Nc(Mc, a);\n      }\n    },\n        ne = fa.ReactCurrentOwner,\n        oe = 1073741822,\n        pe = 0,\n        qe = !1,\n        O = null,\n        Q = null,\n        R = 0,\n        re = -1,\n        se = !1,\n        S = null,\n        te = !1,\n        ue = null,\n        ve = null,\n        we = null,\n        ke = null;\n\n    function xe() {\n      if (null !== O) for (var a = O.return; null !== a;) {\n        var b = a;\n\n        switch (b.tag) {\n          case 1:\n            var c = b.type.childContextTypes;\n            null !== c && void 0 !== c && Gb(b);\n            break;\n\n          case 3:\n            $c(b);\n            Hb(b);\n            break;\n\n          case 5:\n            cd(b);\n            break;\n\n          case 4:\n            $c(b);\n            break;\n\n          case 10:\n            uc(b);\n        }\n\n        a = a.return;\n      }\n      Q = null;\n      R = 0;\n      re = -1;\n      se = !1;\n      O = null;\n    }\n\n    function ye(a, b) {\n      we = ve = ue = null;\n      var c = T;\n      T = !0;\n\n      do {\n        if (b.effectTag & 512) {\n          var d = !1,\n              e = void 0;\n\n          try {\n            var f = b;\n            ae(128, 0, f);\n            ae(0, 64, f);\n          } catch (g) {\n            d = !0, e = g;\n          }\n\n          d && $d(b, e);\n        }\n\n        b = b.nextEffect;\n      } while (null !== b);\n\n      T = c;\n      c = a.expirationTime;\n      0 !== c && ze(a, c);\n    }\n\n    function Sc() {\n      null !== we && (da.unstable_cancelCallback(ve), we());\n    }\n\n    function Ae(a) {\n      for (;;) {\n        var b = a.alternate,\n            c = a.return,\n            d = a.sibling;\n\n        if (0 === (a.effectTag & 1024)) {\n          O = a;\n\n          a: {\n            var e = b;\n            b = a;\n            var f = R,\n                g = b.pendingProps;\n\n            switch (b.tag) {\n              case 2:\n                break;\n\n              case 16:\n                break;\n\n              case 15:\n              case 0:\n                break;\n\n              case 1:\n                C(b.type) && Gb(b);\n                break;\n\n              case 3:\n                $c(b);\n                Hb(b);\n                g = b.stateNode;\n                g.pendingContext && (g.context = g.pendingContext, g.pendingContext = null);\n                if (null === e || null === e.child) Cd(b), b.effectTag &= -3;\n                Ud(b);\n                break;\n\n              case 5:\n                cd(b);\n                f = Yc(Xc.current);\n                var k = b.type;\n                if (null !== e && null != b.stateNode) Vd(e, b, k, g, f), e.ref !== b.ref && (b.effectTag |= 128);else if (g) {\n                  e = ad();\n                  if (Cd(b)) g = b, Xa || m(\"175\"), e = xb(g.stateNode, g.type, g.memoizedProps, f, e, g), g.updateQueue = e, e = null !== e ? !0 : !1, e && Sd(b);else {\n                    var h = Ga(k, g, f, e, b);\n                    Td(h, b, !1, !1);\n                    Ia(h, k, g, f, e) && Sd(b);\n                    b.stateNode = h;\n                  }\n                  null !== b.ref && (b.effectTag |= 128);\n                } else null === b.stateNode ? m(\"166\") : void 0;\n                break;\n\n              case 6:\n                e && null != b.stateNode ? Wd(e, b, e.memoizedProps, g) : (\"string\" !== typeof g && (null === b.stateNode ? m(\"166\") : void 0), e = Yc(Xc.current), f = ad(), Cd(b) ? (e = b, Xa || m(\"176\"), (e = yb(e.stateNode, e.memoizedProps, e)) && Sd(b)) : b.stateNode = Ma(g, e, f, b));\n                break;\n\n              case 11:\n                break;\n\n              case 13:\n                g = b.memoizedState;\n\n                if (0 !== (b.effectTag & 64)) {\n                  b.expirationTime = f;\n                  O = b;\n                  break a;\n                }\n\n                g = null !== g;\n                f = null !== e && null !== e.memoizedState;\n                null !== e && !g && f && (e = e.child.sibling, null !== e && (k = b.firstEffect, null !== k ? (b.firstEffect = e, e.nextEffect = k) : (b.firstEffect = b.lastEffect = e, e.nextEffect = null), e.effectTag = 8));\n                if (g !== f || 0 === (b.effectTag & 1) && g) b.effectTag |= 4;\n                break;\n\n              case 7:\n                break;\n\n              case 8:\n                break;\n\n              case 12:\n                break;\n\n              case 4:\n                $c(b);\n                Ud(b);\n                break;\n\n              case 10:\n                uc(b);\n                break;\n\n              case 9:\n                break;\n\n              case 14:\n                break;\n\n              case 17:\n                C(b.type) && Gb(b);\n                break;\n\n              default:\n                m(\"156\");\n            }\n\n            O = null;\n          }\n\n          b = a;\n\n          if (1 === R || 1 !== b.childExpirationTime) {\n            e = 0;\n\n            for (g = b.child; null !== g;) f = g.expirationTime, k = g.childExpirationTime, f > e && (e = f), k > e && (e = k), g = g.sibling;\n\n            b.childExpirationTime = e;\n          }\n\n          if (null !== O) return O;\n          null !== c && 0 === (c.effectTag & 1024) && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), 1 < a.effectTag && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));\n        } else {\n          a = le(a, R);\n          if (null !== a) return a.effectTag &= 1023, a;\n          null !== c && (c.firstEffect = c.lastEffect = null, c.effectTag |= 1024);\n        }\n\n        if (null !== d) return d;\n        if (null !== c) a = c;else break;\n      }\n\n      return null;\n    }\n\n    function Be(a) {\n      var b = Rd(a.alternate, a, R);\n      a.memoizedProps = a.pendingProps;\n      null === b && (b = Ae(a));\n      ne.current = null;\n      return b;\n    }\n\n    function Ce(a, b) {\n      qe ? m(\"243\") : void 0;\n      Sc();\n      qe = !0;\n      ne.currentDispatcher = me;\n      var c = a.nextExpirationTimeToWorkOn;\n      if (c !== R || a !== Q || null === O) xe(), Q = a, R = c, O = Ub(Q.current, null, R), a.pendingCommitExpirationTime = 0;\n      var d = !1;\n\n      do {\n        try {\n          if (b) for (; null !== O && !De();) O = Be(O);else for (; null !== O;) O = Be(O);\n        } catch (N) {\n          if (sc = rc = qc = null, Ic(), null === O) d = !0, ie(N);else {\n            null === O ? m(\"271\") : void 0;\n            var e = O,\n                f = e.return;\n            if (null === f) d = !0, ie(N);else {\n              a: {\n                var g = a,\n                    k = f,\n                    h = e,\n                    l = N;\n                f = R;\n                h.effectTag |= 1024;\n                h.firstEffect = h.lastEffect = null;\n\n                if (null !== l && \"object\" === typeof l && \"function\" === typeof l.then) {\n                  var n = l;\n                  l = k;\n                  var z = -1,\n                      w = -1;\n\n                  do {\n                    if (13 === l.tag) {\n                      var v = l.alternate;\n\n                      if (null !== v && (v = v.memoizedState, null !== v)) {\n                        w = 10 * (1073741822 - v.timedOutAt);\n                        break;\n                      }\n\n                      v = l.pendingProps.maxDuration;\n                      if (\"number\" === typeof v) if (0 >= v) z = 0;else if (-1 === z || v < z) z = v;\n                    }\n\n                    l = l.return;\n                  } while (null !== l);\n\n                  l = k;\n\n                  do {\n                    if (v = 13 === l.tag) v = void 0 === l.memoizedProps.fallback ? !1 : null === l.memoizedState;\n\n                    if (v) {\n                      k = Ee.bind(null, g, l, h, 0 === (l.mode & 1) ? 1073741823 : f);\n                      n.then(k, k);\n\n                      if (0 === (l.mode & 1)) {\n                        l.effectTag |= 64;\n                        h.effectTag &= -1957;\n                        1 === h.tag && null === h.alternate && (h.tag = 17);\n                        h.expirationTime = f;\n                        break a;\n                      }\n\n                      -1 === z ? g = 1073741823 : (-1 === w && (w = 10 * (1073741822 - cc(g, f)) - 5E3), g = w + z);\n                      0 <= g && re < g && (re = g);\n                      l.effectTag |= 2048;\n                      l.expirationTime = f;\n                      break a;\n                    }\n\n                    l = l.return;\n                  } while (null !== l);\n\n                  l = Error((va(h.type) || \"A React component\") + \" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\" + Ab(h));\n                }\n\n                se = !0;\n                l = oc(l, h);\n                g = k;\n\n                do {\n                  switch (g.tag) {\n                    case 3:\n                      h = l;\n                      g.effectTag |= 2048;\n                      g.expirationTime = f;\n                      f = he(g, h, f);\n                      ic(g, f);\n                      break a;\n\n                    case 1:\n                      if (h = l, k = g.type, n = g.stateNode, 0 === (g.effectTag & 64) && (\"function\" === typeof k.getDerivedStateFromError || null !== n && \"function\" === typeof n.componentDidCatch && (null === ke || !ke.has(n)))) {\n                        g.effectTag |= 2048;\n                        g.expirationTime = f;\n                        f = je(g, h, f);\n                        ic(g, f);\n                        break a;\n                      }\n\n                  }\n\n                  g = g.return;\n                } while (null !== g);\n              }\n\n              O = Ae(e);\n              continue;\n            }\n          }\n        }\n\n        break;\n      } while (1);\n\n      qe = !1;\n      sc = rc = qc = ne.currentDispatcher = null;\n      Ic();\n      if (d) Q = null, a.finishedWork = null;else if (null !== O) a.finishedWork = null;else {\n        d = a.current.alternate;\n        null === d ? m(\"281\") : void 0;\n        Q = null;\n\n        if (se) {\n          e = a.latestPendingTime;\n          f = a.latestSuspendedTime;\n          g = a.latestPingedTime;\n\n          if (0 !== e && e < c || 0 !== f && f < c || 0 !== g && g < c) {\n            bc(a, c);\n            Fe(a, d, c, a.expirationTime, -1);\n            return;\n          }\n\n          if (!a.didError && b) {\n            a.didError = !0;\n            c = a.nextExpirationTimeToWorkOn = c;\n            b = a.expirationTime = 1073741823;\n            Fe(a, d, c, b, -1);\n            return;\n          }\n        }\n\n        b && -1 !== re ? (bc(a, c), b = 10 * (1073741822 - cc(a, c)), b < re && (re = b), b = 10 * (1073741822 - K()), b = re - b, Fe(a, d, c, a.expirationTime, 0 > b ? 0 : b)) : (a.pendingCommitExpirationTime = c, a.finishedWork = d);\n      }\n    }\n\n    function $d(a, b) {\n      for (var c = a.return; null !== c;) {\n        switch (c.tag) {\n          case 1:\n            var d = c.stateNode;\n\n            if (\"function\" === typeof c.type.getDerivedStateFromError || \"function\" === typeof d.componentDidCatch && (null === ke || !ke.has(d))) {\n              a = oc(b, a);\n              a = je(c, a, 1073741823);\n              E(c, a);\n              Tc(c, 1073741823);\n              return;\n            }\n\n            break;\n\n          case 3:\n            a = oc(b, a);\n            a = he(c, a, 1073741823);\n            E(c, a);\n            Tc(c, 1073741823);\n            return;\n        }\n\n        c = c.return;\n      }\n\n      3 === a.tag && (c = oc(b, a), c = he(a, c, 1073741823), E(a, c), Tc(a, 1073741823));\n    }\n\n    function Rc(a, b) {\n      0 !== pe ? a = pe : qe ? a = te ? 1073741823 : R : b.mode & 1 ? (a = Ge ? 1073741822 - 10 * (((1073741822 - a + 15) / 10 | 0) + 1) : 1073741822 - 25 * (((1073741822 - a + 500) / 25 | 0) + 1), null !== Q && a === R && --a) : a = 1073741823;\n      Ge && (0 === He || a < He) && (He = a);\n      return a;\n    }\n\n    function Ee(a, b, c, d) {\n      var e = a.earliestSuspendedTime;\n      var f = a.latestSuspendedTime;\n\n      if (0 !== e && d <= e && d >= f) {\n        f = e = d;\n        a.didError = !1;\n        var g = a.latestPingedTime;\n        if (0 === g || g > f) a.latestPingedTime = f;\n        ac(f, a);\n      } else e = K(), e = Rc(e, b), $b(a, e);\n\n      0 !== (b.mode & 1) && a === Q && R === d && (Q = null);\n      Ie(b, e);\n      0 === (b.mode & 1) && (Ie(c, e), 1 === c.tag && null !== c.stateNode && (b = gc(e), b.tag = 2, E(c, b)));\n      c = a.expirationTime;\n      0 !== c && ze(a, c);\n    }\n\n    function Ie(a, b) {\n      a.expirationTime < b && (a.expirationTime = b);\n      var c = a.alternate;\n      null !== c && c.expirationTime < b && (c.expirationTime = b);\n      var d = a.return,\n          e = null;\n      if (null === d && 3 === a.tag) e = a.stateNode;else for (; null !== d;) {\n        c = d.alternate;\n        d.childExpirationTime < b && (d.childExpirationTime = b);\n        null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);\n\n        if (null === d.return && 3 === d.tag) {\n          e = d.stateNode;\n          break;\n        }\n\n        d = d.return;\n      }\n      return e;\n    }\n\n    function Tc(a, b) {\n      a = Ie(a, b);\n      null !== a && (!qe && 0 !== R && b > R && xe(), $b(a, b), qe && !te && Q === a || ze(a, a.expirationTime), Je > Ke && (Je = 0, m(\"185\")));\n    }\n\n    function Le(a, b, c, d, e) {\n      var f = pe;\n      pe = 1073741823;\n\n      try {\n        return a(b, c, d, e);\n      } finally {\n        pe = f;\n      }\n    }\n\n    var U = null,\n        V = null,\n        Me = 0,\n        Ne = void 0,\n        T = !1,\n        W = null,\n        X = 0,\n        He = 0,\n        Oe = !1,\n        Pe = null,\n        Y = !1,\n        Qe = !1,\n        Ge = !1,\n        Re = null,\n        Se = Ta(),\n        Z = 1073741822 - (Se / 10 | 0),\n        Te = Z,\n        Ke = 50,\n        Je = 0,\n        Ue = null;\n\n    function Ve() {\n      Z = 1073741822 - ((Ta() - Se) / 10 | 0);\n    }\n\n    function We(a, b) {\n      if (0 !== Me) {\n        if (b < Me) return;\n        null !== Ne && Oa(Ne);\n      }\n\n      Me = b;\n      a = Ta() - Se;\n      Ne = Na(Xe, {\n        timeout: 10 * (1073741822 - b) - a\n      });\n    }\n\n    function Fe(a, b, c, d, e) {\n      a.expirationTime = d;\n      0 !== e || De() ? 0 < e && (a.timeoutHandle = Qa(Ye.bind(null, a, b, c), e)) : (a.pendingCommitExpirationTime = c, a.finishedWork = b);\n    }\n\n    function Ye(a, b, c) {\n      a.pendingCommitExpirationTime = c;\n      a.finishedWork = b;\n      Ve();\n      Te = Z;\n      $e(a, c);\n    }\n\n    function K() {\n      if (T) return Te;\n      af();\n      if (0 === X || 1 === X) Ve(), Te = Z;\n      return Te;\n    }\n\n    function ze(a, b) {\n      null === a.nextScheduledRoot ? (a.expirationTime = b, null === V ? (U = V = a, a.nextScheduledRoot = a) : (V = V.nextScheduledRoot = a, V.nextScheduledRoot = U)) : b > a.expirationTime && (a.expirationTime = b);\n      T || (Y ? Qe && (W = a, X = 1073741823, bf(a, 1073741823, !1)) : 1073741823 === b ? cf(1073741823, !1) : We(a, b));\n    }\n\n    function af() {\n      var a = 0,\n          b = null;\n      if (null !== V) for (var c = V, d = U; null !== d;) {\n        var e = d.expirationTime;\n\n        if (0 === e) {\n          null === c || null === V ? m(\"244\") : void 0;\n\n          if (d === d.nextScheduledRoot) {\n            U = V = d.nextScheduledRoot = null;\n            break;\n          } else if (d === U) U = e = d.nextScheduledRoot, V.nextScheduledRoot = e, d.nextScheduledRoot = null;else if (d === V) {\n            V = c;\n            V.nextScheduledRoot = U;\n            d.nextScheduledRoot = null;\n            break;\n          } else c.nextScheduledRoot = d.nextScheduledRoot, d.nextScheduledRoot = null;\n\n          d = c.nextScheduledRoot;\n        } else {\n          e > a && (a = e, b = d);\n          if (d === V) break;\n          if (1073741823 === a) break;\n          c = d;\n          d = d.nextScheduledRoot;\n        }\n      }\n      W = b;\n      X = a;\n    }\n\n    var df = !1;\n\n    function De() {\n      return df ? !0 : Pa() ? df = !0 : !1;\n    }\n\n    function Xe() {\n      try {\n        if (!De() && null !== U) {\n          Ve();\n          var a = U;\n\n          do {\n            var b = a.expirationTime;\n            0 !== b && Z <= b && (a.nextExpirationTimeToWorkOn = Z);\n            a = a.nextScheduledRoot;\n          } while (a !== U);\n        }\n\n        cf(0, !0);\n      } finally {\n        df = !1;\n      }\n    }\n\n    function cf(a, b) {\n      af();\n      if (b) for (Ve(), Te = Z; null !== W && 0 !== X && a <= X && !(df && Z > X);) bf(W, X, Z > X), af(), Ve(), Te = Z;else for (; null !== W && 0 !== X && a <= X;) bf(W, X, !1), af();\n      b && (Me = 0, Ne = null);\n      0 !== X && We(W, X);\n      Je = 0;\n      Ue = null;\n      if (null !== Re) for (a = Re, Re = null, b = 0; b < a.length; b++) {\n        var c = a[b];\n\n        try {\n          c._onComplete();\n        } catch (d) {\n          Oe || (Oe = !0, Pe = d);\n        }\n      }\n      if (Oe) throw a = Pe, Pe = null, Oe = !1, a;\n    }\n\n    function $e(a, b) {\n      T ? m(\"253\") : void 0;\n      W = a;\n      X = b;\n      bf(a, b, !1);\n      cf(1073741823, !1);\n    }\n\n    function bf(a, b, c) {\n      T ? m(\"245\") : void 0;\n      T = !0;\n\n      if (c) {\n        var d = a.finishedWork;\n        null !== d ? ef(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, d !== Sa && (a.timeoutHandle = Sa, Ra(d)), Ce(a, c), d = a.finishedWork, null !== d && (De() ? a.finishedWork = d : ef(a, d, b)));\n      } else d = a.finishedWork, null !== d ? ef(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, d !== Sa && (a.timeoutHandle = Sa, Ra(d)), Ce(a, c), d = a.finishedWork, null !== d && ef(a, d, b));\n\n      T = !1;\n    }\n\n    function ef(a, b, c) {\n      var d = a.firstBatch;\n\n      if (null !== d && d._expirationTime >= c && (null === Re ? Re = [d] : Re.push(d), d._defer)) {\n        a.finishedWork = b;\n        a.expirationTime = 0;\n        return;\n      }\n\n      a.finishedWork = null;\n      a === Ue ? Je++ : (Ue = a, Je = 0);\n      te = qe = !0;\n      a.current === b ? m(\"177\") : void 0;\n      c = a.pendingCommitExpirationTime;\n      0 === c ? m(\"261\") : void 0;\n      a.pendingCommitExpirationTime = 0;\n      d = b.expirationTime;\n      var e = b.childExpirationTime;\n      d = e > d ? e : d;\n      a.didError = !1;\n      0 === d ? (a.earliestPendingTime = 0, a.latestPendingTime = 0, a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0) : (e = a.latestPendingTime, 0 !== e && (e > d ? a.earliestPendingTime = a.latestPendingTime = 0 : a.earliestPendingTime > d && (a.earliestPendingTime = a.latestPendingTime)), e = a.earliestSuspendedTime, 0 === e ? $b(a, d) : d < a.latestSuspendedTime ? (a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0, $b(a, d)) : d > e && $b(a, d));\n      ac(0, a);\n      ne.current = null;\n      1 < b.effectTag ? null !== b.lastEffect ? (b.lastEffect.nextEffect = b, d = b.firstEffect) : d = b : d = b.firstEffect;\n      Ea(a.containerInfo);\n\n      for (S = d; null !== S;) {\n        e = !1;\n        var f = void 0;\n\n        try {\n          for (; null !== S;) {\n            if (S.effectTag & 256) a: {\n              var g = S.alternate,\n                  k = S;\n\n              switch (k.tag) {\n                case 0:\n                case 11:\n                case 15:\n                  ae(2, 0, k);\n                  break a;\n\n                case 1:\n                  if (k.effectTag & 256 && null !== g) {\n                    var h = g.memoizedProps,\n                        l = g.memoizedState,\n                        n = k.stateNode,\n                        z = n.getSnapshotBeforeUpdate(k.elementType === k.type ? h : L(k.type, h), l);\n                    n.__reactInternalSnapshotBeforeUpdate = z;\n                  }\n\n                  break a;\n\n                case 3:\n                case 5:\n                case 6:\n                case 4:\n                case 17:\n                  break a;\n\n                default:\n                  m(\"163\");\n              }\n            }\n            S = S.nextEffect;\n          }\n        } catch (t) {\n          e = !0, f = t;\n        }\n\n        e && (null === S ? m(\"178\") : void 0, $d(S, f), null !== S && (S = S.nextEffect));\n      }\n\n      for (S = d; null !== S;) {\n        g = !1;\n        h = void 0;\n\n        try {\n          for (; null !== S;) {\n            var w = S.effectTag;\n            w & 16 && Va && gb(S.stateNode);\n\n            if (w & 128) {\n              var v = S.alternate;\n\n              if (null !== v) {\n                var N = v.ref;\n                null !== N && (\"function\" === typeof N ? N(null) : N.current = null);\n              }\n            }\n\n            switch (w & 14) {\n              case 2:\n                fe(S);\n                S.effectTag &= -3;\n                break;\n\n              case 6:\n                fe(S);\n                S.effectTag &= -3;\n                ge(S.alternate, S);\n                break;\n\n              case 4:\n                ge(S.alternate, S);\n                break;\n\n              case 8:\n                l = S, Va ? ce(l) : de(l), l.return = null, l.child = null, l.alternate && (l.alternate.child = null, l.alternate.return = null);\n            }\n\n            S = S.nextEffect;\n          }\n        } catch (t) {\n          g = !0, h = t;\n        }\n\n        g && (null === S ? m(\"178\") : void 0, $d(S, h), null !== S && (S = S.nextEffect));\n      }\n\n      Fa(a.containerInfo);\n      a.current = b;\n\n      for (S = d; null !== S;) {\n        w = !1;\n        v = void 0;\n\n        try {\n          for (N = a, g = c; null !== S;) {\n            var P = S.effectTag;\n\n            if (P & 36) {\n              var r = S.alternate;\n              h = S;\n              l = g;\n\n              switch (h.tag) {\n                case 0:\n                case 11:\n                case 15:\n                  ae(16, 32, h);\n                  break;\n\n                case 1:\n                  var x = h.stateNode;\n                  if (h.effectTag & 4) if (null === r) x.componentDidMount();else {\n                    var u = h.elementType === h.type ? r.memoizedProps : L(h.type, r.memoizedProps);\n                    x.componentDidUpdate(u, r.memoizedState, x.__reactInternalSnapshotBeforeUpdate);\n                  }\n                  var aa = h.updateQueue;\n                  null !== aa && mc(h, aa, x, l);\n                  break;\n\n                case 3:\n                  var Id = h.updateQueue;\n\n                  if (null !== Id) {\n                    n = null;\n                    if (null !== h.child) switch (h.child.tag) {\n                      case 5:\n                        n = Ba(h.child.stateNode);\n                        break;\n\n                      case 1:\n                        n = h.child.stateNode;\n                    }\n                    mc(h, Id, n, l);\n                  }\n\n                  break;\n\n                case 5:\n                  var Ze = h.stateNode;\n                  null === r && h.effectTag & 4 && ab(Ze, h.type, h.memoizedProps, h);\n                  break;\n\n                case 6:\n                  break;\n\n                case 4:\n                  break;\n\n                case 12:\n                  break;\n\n                case 13:\n                  break;\n\n                case 17:\n                  break;\n\n                default:\n                  m(\"163\");\n              }\n            }\n\n            if (P & 128) {\n              var Ib = S.ref;\n\n              if (null !== Ib) {\n                var Jd = S.stateNode;\n\n                switch (S.tag) {\n                  case 5:\n                    var Ac = Ba(Jd);\n                    break;\n\n                  default:\n                    Ac = Jd;\n                }\n\n                \"function\" === typeof Ib ? Ib(Ac) : Ib.current = Ac;\n              }\n            }\n\n            P & 512 && (ue = N);\n            S = S.nextEffect;\n          }\n        } catch (t) {\n          w = !0, v = t;\n        }\n\n        w && (null === S ? m(\"178\") : void 0, $d(S, v), null !== S && (S = S.nextEffect));\n      }\n\n      null !== d && null !== ue && (P = ye.bind(null, a, d), ve = da.unstable_scheduleCallback(P), we = P);\n      qe = te = !1;\n      \"function\" === typeof Nb && Nb(b.stateNode);\n      P = b.expirationTime;\n      b = b.childExpirationTime;\n      b = b > P ? b : P;\n      0 === b && (ke = null);\n      a.expirationTime = b;\n      a.finishedWork = null;\n    }\n\n    function ie(a) {\n      null === W ? m(\"246\") : void 0;\n      W.expirationTime = 0;\n      Oe || (Oe = !0, Pe = a);\n    }\n\n    function ff(a, b, c, d, e) {\n      var f = b.current;\n\n      a: if (c) {\n        c = c._reactInternalFiber;\n\n        b: {\n          2 === wa(c) && 1 === c.tag ? void 0 : m(\"170\");\n          var g = c;\n\n          do {\n            switch (g.tag) {\n              case 3:\n                g = g.stateNode.context;\n                break b;\n\n              case 1:\n                if (C(g.type)) {\n                  g = g.stateNode.__reactInternalMemoizedMergedChildContext;\n                  break b;\n                }\n\n            }\n\n            g = g.return;\n          } while (null !== g);\n\n          m(\"171\");\n          g = void 0;\n        }\n\n        if (1 === c.tag) {\n          var k = c.type;\n\n          if (C(k)) {\n            c = Kb(c, k, g);\n            break a;\n          }\n        }\n\n        c = g;\n      } else c = Db;\n\n      null === b.context ? b.context = c : b.pendingContext = c;\n      b = e;\n      e = gc(d);\n      e.payload = {\n        element: a\n      };\n      b = void 0 === b ? null : b;\n      null !== b && (e.callback = b);\n      Sc();\n      E(f, e);\n      Tc(f, d);\n      return d;\n    }\n\n    function gf(a) {\n      var b = a._reactInternalFiber;\n      void 0 === b && (\"function\" === typeof a.render ? m(\"188\") : m(\"268\", Object.keys(a)));\n      a = za(b);\n      return null === a ? null : a.stateNode;\n    }\n\n    var hf = {\n      updateContainerAtExpirationTime: ff,\n      createContainer: function (a, b, c) {\n        b = D(3, null, null, b ? 3 : 0);\n        a = {\n          current: b,\n          containerInfo: a,\n          pendingChildren: null,\n          earliestPendingTime: 0,\n          latestPendingTime: 0,\n          earliestSuspendedTime: 0,\n          latestSuspendedTime: 0,\n          latestPingedTime: 0,\n          didError: !1,\n          pendingCommitExpirationTime: 0,\n          finishedWork: null,\n          timeoutHandle: Sa,\n          context: null,\n          pendingContext: null,\n          hydrate: c,\n          nextExpirationTimeToWorkOn: 0,\n          expirationTime: 0,\n          firstBatch: null,\n          nextScheduledRoot: null\n        };\n        return b.stateNode = a;\n      },\n      updateContainer: function (a, b, c, d) {\n        var e = b.current,\n            f = K();\n        e = Rc(f, e);\n        return ff(a, b, c, e, d);\n      },\n      flushRoot: $e,\n      requestWork: ze,\n      computeUniqueAsyncExpiration: function () {\n        var a = 1073741822 - 25 * (((1073741822 - K() + 500) / 25 | 0) + 1);\n        a >= oe && (a = oe - 1);\n        return oe = a;\n      },\n      batchedUpdates: function (a, b) {\n        var c = Y;\n        Y = !0;\n\n        try {\n          return a(b);\n        } finally {\n          (Y = c) || T || cf(1073741823, !1);\n        }\n      },\n      unbatchedUpdates: function (a, b) {\n        if (Y && !Qe) {\n          Qe = !0;\n\n          try {\n            return a(b);\n          } finally {\n            Qe = !1;\n          }\n        }\n\n        return a(b);\n      },\n      deferredUpdates: function (a) {\n        var b = K(),\n            c = pe,\n            d = Ge;\n        pe = 1073741822 - 25 * (((1073741822 - b + 500) / 25 | 0) + 1);\n        Ge = !1;\n\n        try {\n          return a();\n        } finally {\n          pe = c, Ge = d;\n        }\n      },\n      syncUpdates: Le,\n      interactiveUpdates: function (a, b, c) {\n        if (Ge) return a(b, c);\n        Y || T || 0 === He || (cf(He, !1), He = 0);\n        var d = Ge,\n            e = Y;\n        Y = Ge = !0;\n\n        try {\n          return a(b, c);\n        } finally {\n          Ge = d, (Y = e) || T || cf(1073741823, !1);\n        }\n      },\n      flushInteractiveUpdates: function () {\n        T || 0 === He || (cf(He, !1), He = 0);\n      },\n      flushControlled: function (a) {\n        var b = Y;\n        Y = !0;\n\n        try {\n          Le(a);\n        } finally {\n          (Y = b) || T || cf(1073741823, !1);\n        }\n      },\n      flushSync: function (a, b) {\n        T ? m(\"187\") : void 0;\n        var c = Y;\n        Y = !0;\n\n        try {\n          return Le(a, b);\n        } finally {\n          Y = c, cf(1073741823, !1);\n        }\n      },\n      getPublicRootInstance: function (a) {\n        a = a.current;\n        if (!a.child) return null;\n\n        switch (a.child.tag) {\n          case 5:\n            return Ba(a.child.stateNode);\n\n          default:\n            return a.child.stateNode;\n        }\n      },\n      findHostInstance: gf,\n      findHostInstanceWithWarning: function (a) {\n        return gf(a);\n      },\n      findHostInstanceWithNoPortals: function (a) {\n        a = Aa(a);\n        return null === a ? null : a.stateNode;\n      },\n      injectIntoDevTools: function (a) {\n        var b = a.findFiberByHostInstance;\n        return Qb(ba({}, a, {\n          findHostInstanceByFiber: function (a) {\n            a = za(a);\n            return null === a ? null : a.stateNode;\n          },\n          findFiberByHostInstance: function (a) {\n            return b ? b(a) : null;\n          }\n        }));\n      }\n    };\n    module.exports = hf.default || hf;\n    var $$$renderer = module.exports;\n    module.exports = $$$reconciler;\n    return $$$renderer;\n  };\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret;\n\nvar printWarning = function () {};\n\n{\n  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;\n  var loggedTypeFailures = {};\n\n  printWarning = function (text) {\n    var message = 'Warning: ' + text;\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);\n        } catch (ex) {\n          error = ex;\n        }\n\n        if (error && !(error instanceof Error)) {\n          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');\n        }\n\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          var stack = getStack ? getStack() : '';\n          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));\n        }\n      }\n    }\n  }\n}\n\nvar checkPropTypes_1 = checkPropTypes;\nvar schedulerTracing_production_min = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: !0\n  });\n  var b = 0;\n  exports.__interactionsRef = null;\n  exports.__subscriberRef = null;\n\n  exports.unstable_clear = function (a) {\n    return a();\n  };\n\n  exports.unstable_getCurrent = function () {\n    return null;\n  };\n\n  exports.unstable_getThreadID = function () {\n    return ++b;\n  };\n\n  exports.unstable_trace = function (a, d, c) {\n    return c();\n  };\n\n  exports.unstable_wrap = function (a) {\n    return a;\n  };\n\n  exports.unstable_subscribe = function () {};\n\n  exports.unstable_unsubscribe = function () {};\n});\nunwrapExports(schedulerTracing_production_min);\nvar schedulerTracing_production_min_1 = schedulerTracing_production_min.__interactionsRef;\nvar schedulerTracing_production_min_2 = schedulerTracing_production_min.__subscriberRef;\nvar schedulerTracing_production_min_3 = schedulerTracing_production_min.unstable_clear;\nvar schedulerTracing_production_min_4 = schedulerTracing_production_min.unstable_getCurrent;\nvar schedulerTracing_production_min_5 = schedulerTracing_production_min.unstable_getThreadID;\nvar schedulerTracing_production_min_6 = schedulerTracing_production_min.unstable_trace;\nvar schedulerTracing_production_min_7 = schedulerTracing_production_min.unstable_wrap;\nvar schedulerTracing_production_min_8 = schedulerTracing_production_min.unstable_subscribe;\nvar schedulerTracing_production_min_9 = schedulerTracing_production_min.unstable_unsubscribe;\nvar schedulerTracing_development = createCommonjsModule(function (module, exports) {\n  {\n    (function () {\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      }); // Only used in www builds.\n      // Only used in www builds.\n      // React Fire: prevent the value and checked attributes from syncing\n      // with their related DOM properties\n      // These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n      // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\n\n      var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.\n\n      var interactionIDCounter = 0;\n      var threadIDCounter = 0; // Set of currently traced interactions.\n      // Interactions \"stack\"–\n      // Meaning that newly traced interactions are appended to the previously active set.\n      // When an interaction goes out of scope, the previous set (if any) is restored.\n\n      exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.\n\n      exports.__subscriberRef = null;\n      {\n        exports.__interactionsRef = {\n          current: new Set()\n        };\n        exports.__subscriberRef = {\n          current: null\n        };\n      }\n\n      function unstable_clear(callback) {\n        var prevInteractions = exports.__interactionsRef.current;\n        exports.__interactionsRef.current = new Set();\n\n        try {\n          return callback();\n        } finally {\n          exports.__interactionsRef.current = prevInteractions;\n        }\n      }\n\n      function unstable_getCurrent() {\n        {\n          return exports.__interactionsRef.current;\n        }\n      }\n\n      function unstable_getThreadID() {\n        return ++threadIDCounter;\n      }\n\n      function unstable_trace(name, timestamp, callback) {\n        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;\n        var interaction = {\n          __count: 1,\n          id: interactionIDCounter++,\n          name: name,\n          timestamp: timestamp\n        };\n        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.\n        // To do that, clone the current interactions.\n        // The previous set will be restored upon completion.\n\n        var interactions = new Set(prevInteractions);\n        interactions.add(interaction);\n        exports.__interactionsRef.current = interactions;\n        var subscriber = exports.__subscriberRef.current;\n        var returnValue = void 0;\n\n        try {\n          if (subscriber !== null) {\n            subscriber.onInteractionTraced(interaction);\n          }\n        } finally {\n          try {\n            if (subscriber !== null) {\n              subscriber.onWorkStarted(interactions, threadID);\n            }\n          } finally {\n            try {\n              returnValue = callback();\n            } finally {\n              exports.__interactionsRef.current = prevInteractions;\n\n              try {\n                if (subscriber !== null) {\n                  subscriber.onWorkStopped(interactions, threadID);\n                }\n              } finally {\n                interaction.__count--; // If no async work was scheduled for this interaction,\n                // Notify subscribers that it's completed.\n\n                if (subscriber !== null && interaction.__count === 0) {\n                  subscriber.onInteractionScheduledWorkCompleted(interaction);\n                }\n              }\n            }\n          }\n        }\n\n        return returnValue;\n      }\n\n      function unstable_wrap(callback) {\n        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;\n        var wrappedInteractions = exports.__interactionsRef.current;\n        var subscriber = exports.__subscriberRef.current;\n\n        if (subscriber !== null) {\n          subscriber.onWorkScheduled(wrappedInteractions, threadID);\n        } // Update the pending async work count for the current interactions.\n        // Update after calling subscribers in case of error.\n\n\n        wrappedInteractions.forEach(function (interaction) {\n          interaction.__count++;\n        });\n        var hasRun = false;\n\n        function wrapped() {\n          var prevInteractions = exports.__interactionsRef.current;\n          exports.__interactionsRef.current = wrappedInteractions;\n          subscriber = exports.__subscriberRef.current;\n\n          try {\n            var returnValue = void 0;\n\n            try {\n              if (subscriber !== null) {\n                subscriber.onWorkStarted(wrappedInteractions, threadID);\n              }\n            } finally {\n              try {\n                returnValue = callback.apply(undefined, arguments);\n              } finally {\n                exports.__interactionsRef.current = prevInteractions;\n\n                if (subscriber !== null) {\n                  subscriber.onWorkStopped(wrappedInteractions, threadID);\n                }\n              }\n            }\n\n            return returnValue;\n          } finally {\n            if (!hasRun) {\n              // We only expect a wrapped function to be executed once,\n              // But in the event that it's executed more than once–\n              // Only decrement the outstanding interaction counts once.\n              hasRun = true; // Update pending async counts for all wrapped interactions.\n              // If this was the last scheduled async work for any of them,\n              // Mark them as completed.\n\n              wrappedInteractions.forEach(function (interaction) {\n                interaction.__count--;\n\n                if (subscriber !== null && interaction.__count === 0) {\n                  subscriber.onInteractionScheduledWorkCompleted(interaction);\n                }\n              });\n            }\n          }\n        }\n\n        wrapped.cancel = function cancel() {\n          subscriber = exports.__subscriberRef.current;\n\n          try {\n            if (subscriber !== null) {\n              subscriber.onWorkCanceled(wrappedInteractions, threadID);\n            }\n          } finally {\n            // Update pending async counts for all wrapped interactions.\n            // If this was the last scheduled async work for any of them,\n            // Mark them as completed.\n            wrappedInteractions.forEach(function (interaction) {\n              interaction.__count--;\n\n              if (subscriber && interaction.__count === 0) {\n                subscriber.onInteractionScheduledWorkCompleted(interaction);\n              }\n            });\n          }\n        };\n\n        return wrapped;\n      }\n\n      var subscribers = null;\n      {\n        subscribers = new Set();\n      }\n\n      function unstable_subscribe(subscriber) {\n        {\n          subscribers.add(subscriber);\n\n          if (subscribers.size === 1) {\n            exports.__subscriberRef.current = {\n              onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,\n              onInteractionTraced: onInteractionTraced,\n              onWorkCanceled: onWorkCanceled,\n              onWorkScheduled: onWorkScheduled,\n              onWorkStarted: onWorkStarted,\n              onWorkStopped: onWorkStopped\n            };\n          }\n        }\n      }\n\n      function unstable_unsubscribe(subscriber) {\n        {\n          subscribers.delete(subscriber);\n\n          if (subscribers.size === 0) {\n            exports.__subscriberRef.current = null;\n          }\n        }\n      }\n\n      function onInteractionTraced(interaction) {\n        var didCatchError = false;\n        var caughtError = null;\n        subscribers.forEach(function (subscriber) {\n          try {\n            subscriber.onInteractionTraced(interaction);\n          } catch (error) {\n            if (!didCatchError) {\n              didCatchError = true;\n              caughtError = error;\n            }\n          }\n        });\n\n        if (didCatchError) {\n          throw caughtError;\n        }\n      }\n\n      function onInteractionScheduledWorkCompleted(interaction) {\n        var didCatchError = false;\n        var caughtError = null;\n        subscribers.forEach(function (subscriber) {\n          try {\n            subscriber.onInteractionScheduledWorkCompleted(interaction);\n          } catch (error) {\n            if (!didCatchError) {\n              didCatchError = true;\n              caughtError = error;\n            }\n          }\n        });\n\n        if (didCatchError) {\n          throw caughtError;\n        }\n      }\n\n      function onWorkScheduled(interactions, threadID) {\n        var didCatchError = false;\n        var caughtError = null;\n        subscribers.forEach(function (subscriber) {\n          try {\n            subscriber.onWorkScheduled(interactions, threadID);\n          } catch (error) {\n            if (!didCatchError) {\n              didCatchError = true;\n              caughtError = error;\n            }\n          }\n        });\n\n        if (didCatchError) {\n          throw caughtError;\n        }\n      }\n\n      function onWorkStarted(interactions, threadID) {\n        var didCatchError = false;\n        var caughtError = null;\n        subscribers.forEach(function (subscriber) {\n          try {\n            subscriber.onWorkStarted(interactions, threadID);\n          } catch (error) {\n            if (!didCatchError) {\n              didCatchError = true;\n              caughtError = error;\n            }\n          }\n        });\n\n        if (didCatchError) {\n          throw caughtError;\n        }\n      }\n\n      function onWorkStopped(interactions, threadID) {\n        var didCatchError = false;\n        var caughtError = null;\n        subscribers.forEach(function (subscriber) {\n          try {\n            subscriber.onWorkStopped(interactions, threadID);\n          } catch (error) {\n            if (!didCatchError) {\n              didCatchError = true;\n              caughtError = error;\n            }\n          }\n        });\n\n        if (didCatchError) {\n          throw caughtError;\n        }\n      }\n\n      function onWorkCanceled(interactions, threadID) {\n        var didCatchError = false;\n        var caughtError = null;\n        subscribers.forEach(function (subscriber) {\n          try {\n            subscriber.onWorkCanceled(interactions, threadID);\n          } catch (error) {\n            if (!didCatchError) {\n              didCatchError = true;\n              caughtError = error;\n            }\n          }\n        });\n\n        if (didCatchError) {\n          throw caughtError;\n        }\n      }\n\n      exports.unstable_clear = unstable_clear;\n      exports.unstable_getCurrent = unstable_getCurrent;\n      exports.unstable_getThreadID = unstable_getThreadID;\n      exports.unstable_trace = unstable_trace;\n      exports.unstable_wrap = unstable_wrap;\n      exports.unstable_subscribe = unstable_subscribe;\n      exports.unstable_unsubscribe = unstable_unsubscribe;\n    })();\n  }\n});\nunwrapExports(schedulerTracing_development);\nvar schedulerTracing_development_1 = schedulerTracing_development.__interactionsRef;\nvar schedulerTracing_development_2 = schedulerTracing_development.__subscriberRef;\nvar schedulerTracing_development_3 = schedulerTracing_development.unstable_clear;\nvar schedulerTracing_development_4 = schedulerTracing_development.unstable_getCurrent;\nvar schedulerTracing_development_5 = schedulerTracing_development.unstable_getThreadID;\nvar schedulerTracing_development_6 = schedulerTracing_development.unstable_trace;\nvar schedulerTracing_development_7 = schedulerTracing_development.unstable_wrap;\nvar schedulerTracing_development_8 = schedulerTracing_development.unstable_subscribe;\nvar schedulerTracing_development_9 = schedulerTracing_development.unstable_unsubscribe;\nvar tracing = createCommonjsModule(function (module) {\n  {\n    module.exports = schedulerTracing_development;\n  }\n});\nvar reactReconciler_development = createCommonjsModule(function (module) {\n  {\n    module.exports = function $$$reconciler($$$hostConfig) {\n      var _assign = objectAssign;\n      var React$$1 = React;\n      var checkPropTypes = checkPropTypes_1;\n      var tracing$$1 = tracing;\n      var scheduler$$1 = scheduler;\n      /**\n       * Use invariant() to assert state which your program assumes to be true.\n       *\n       * Provide sprintf-style format (only %s is supported) and arguments\n       * to provide information about what broke and what you were\n       * expecting.\n       *\n       * The invariant message will be stripped in production, but the invariant\n       * will remain to ensure logic does not differ in production.\n       */\n\n      var validateFormat = function () {};\n\n      {\n        validateFormat = function (format) {\n          if (format === undefined) {\n            throw new Error('invariant requires an error message argument');\n          }\n        };\n      }\n\n      function invariant(condition, format, a, b, c, d, e, f) {\n        validateFormat(format);\n\n        if (!condition) {\n          var error = void 0;\n\n          if (format === undefined) {\n            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n          } else {\n            var args = [a, b, c, d, e, f];\n            var argIndex = 0;\n            error = new Error(format.replace(/%s/g, function () {\n              return args[argIndex++];\n            }));\n            error.name = 'Invariant Violation';\n          }\n\n          error.framesToPop = 1; // we don't care about invariant's own frame\n\n          throw error;\n        }\n      } // Relying on the `invariant()` implementation lets us\n      // preserve the format and params in the www builds.\n\n      /**\n       * Similar to invariant but only logs a warning if the condition is not met.\n       * This can be used to log issues in development environments in critical\n       * paths. Removing the logging code for production environments will keep the\n       * same logic and follow the same code paths.\n       */\n\n\n      var warningWithoutStack = function () {};\n\n      {\n        warningWithoutStack = function (condition, format) {\n          for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = arguments[_key];\n          }\n\n          if (format === undefined) {\n            throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n          }\n\n          if (args.length > 8) {\n            // Check before the condition to catch violations early.\n            throw new Error('warningWithoutStack() currently supports at most 8 arguments.');\n          }\n\n          if (condition) {\n            return;\n          }\n\n          if (typeof console !== 'undefined') {\n            var argsWithFormat = args.map(function (item) {\n              return '' + item;\n            });\n            argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n            // breaks IE9: https://github.com/facebook/react/issues/13610\n\n            Function.prototype.apply.call(console.error, console, argsWithFormat);\n          }\n\n          try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            var argIndex = 0;\n            var message = 'Warning: ' + format.replace(/%s/g, function () {\n              return args[argIndex++];\n            });\n            throw new Error(message);\n          } catch (x) {}\n        };\n      }\n      var warningWithoutStack$1 = warningWithoutStack;\n      /**\n       * `ReactInstanceMap` maintains a mapping from a public facing stateful\n       * instance (key) and the internal representation (value). This allows public\n       * methods to accept the user facing instance as an argument and map them back\n       * to internal methods.\n       *\n       * Note that this module is currently shared and assumed to be stateless.\n       * If this becomes an actual Map, that will break.\n       */\n\n      /**\n       * This API should be called `delete` but we'd have to make sure to always\n       * transform these to strings for IE support. When this transform is fully\n       * supported we can rename it.\n       */\n\n      function get(key) {\n        return key._reactInternalFiber;\n      }\n\n      function set(key, value) {\n        key._reactInternalFiber = value;\n      }\n\n      var ReactSharedInternals = React$$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n      // nor polyfill, then a plain number is used for performance.\n\n      var hasSymbol = typeof Symbol === 'function' && Symbol.for;\n      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\n      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\n      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\n      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\n      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\n      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\n      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;\n      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\n      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\n      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n      var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n      function getIteratorFn(maybeIterable) {\n        if (maybeIterable === null || typeof maybeIterable !== 'object') {\n          return null;\n        }\n\n        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n        if (typeof maybeIterator === 'function') {\n          return maybeIterator;\n        }\n\n        return null;\n      }\n\n      var Pending = 0;\n      var Resolved = 1;\n      var Rejected = 2;\n\n      function refineResolvedLazyComponent(lazyComponent) {\n        return lazyComponent._status === Resolved ? lazyComponent._result : null;\n      }\n\n      function getWrappedName(outerType, innerType, wrapperName) {\n        var functionName = innerType.displayName || innerType.name || '';\n        return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);\n      }\n\n      function getComponentName(type) {\n        if (type == null) {\n          // Host root, text node or just invalid type.\n          return null;\n        }\n\n        {\n          if (typeof type.tag === 'number') {\n            warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n          }\n        }\n\n        if (typeof type === 'function') {\n          return type.displayName || type.name || null;\n        }\n\n        if (typeof type === 'string') {\n          return type;\n        }\n\n        switch (type) {\n          case REACT_CONCURRENT_MODE_TYPE:\n            return 'ConcurrentMode';\n\n          case REACT_FRAGMENT_TYPE:\n            return 'Fragment';\n\n          case REACT_PORTAL_TYPE:\n            return 'Portal';\n\n          case REACT_PROFILER_TYPE:\n            return 'Profiler';\n\n          case REACT_STRICT_MODE_TYPE:\n            return 'StrictMode';\n\n          case REACT_SUSPENSE_TYPE:\n            return 'Suspense';\n        }\n\n        if (typeof type === 'object') {\n          switch (type.$$typeof) {\n            case REACT_CONTEXT_TYPE:\n              return 'Context.Consumer';\n\n            case REACT_PROVIDER_TYPE:\n              return 'Context.Provider';\n\n            case REACT_FORWARD_REF_TYPE:\n              return getWrappedName(type, type.render, 'ForwardRef');\n\n            case REACT_MEMO_TYPE:\n              return getComponentName(type.type);\n\n            case REACT_LAZY_TYPE:\n              {\n                var thenable = type;\n                var resolvedThenable = refineResolvedLazyComponent(thenable);\n\n                if (resolvedThenable) {\n                  return getComponentName(resolvedThenable);\n                }\n              }\n          }\n        }\n\n        return null;\n      }\n\n      var FunctionComponent = 0;\n      var ClassComponent = 1;\n      var IndeterminateComponent = 2; // Before we know whether it is function or class\n\n      var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\n      var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\n      var HostComponent = 5;\n      var HostText = 6;\n      var Fragment = 7;\n      var Mode = 8;\n      var ContextConsumer = 9;\n      var ContextProvider = 10;\n      var ForwardRef = 11;\n      var Profiler = 12;\n      var SuspenseComponent = 13;\n      var MemoComponent = 14;\n      var SimpleMemoComponent = 15;\n      var LazyComponent = 16;\n      var IncompleteClassComponent = 17; // Don't change these two values. They're used by React Dev Tools.\n\n      var NoEffect =\n      /*              */\n      0;\n      var PerformedWork =\n      /*         */\n      1; // You can change the rest (and add more).\n\n      var Placement =\n      /*             */\n      2;\n      var Update =\n      /*                */\n      4;\n      var PlacementAndUpdate =\n      /*    */\n      6;\n      var Deletion =\n      /*              */\n      8;\n      var ContentReset =\n      /*          */\n      16;\n      var Callback =\n      /*              */\n      32;\n      var DidCapture =\n      /*            */\n      64;\n      var Ref =\n      /*                   */\n      128;\n      var Snapshot =\n      /*              */\n      256;\n      var Passive =\n      /*               */\n      512; // Passive & Update & Callback & Ref & Snapshot\n\n      var LifecycleEffectMask =\n      /*   */\n      932; // Union of all host effects\n\n      var HostEffectMask =\n      /*        */\n      1023;\n      var Incomplete =\n      /*            */\n      1024;\n      var ShouldCapture =\n      /*         */\n      2048;\n      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n      var MOUNTING = 1;\n      var MOUNTED = 2;\n      var UNMOUNTED = 3;\n\n      function isFiberMountedImpl(fiber) {\n        var node = fiber;\n\n        if (!fiber.alternate) {\n          // If there is no alternate, this might be a new tree that isn't inserted\n          // yet. If it is, then it will have a pending insertion effect on it.\n          if ((node.effectTag & Placement) !== NoEffect) {\n            return MOUNTING;\n          }\n\n          while (node.return) {\n            node = node.return;\n\n            if ((node.effectTag & Placement) !== NoEffect) {\n              return MOUNTING;\n            }\n          }\n        } else {\n          while (node.return) {\n            node = node.return;\n          }\n        }\n\n        if (node.tag === HostRoot) {\n          // TODO: Check if this was a nested HostRoot when used with\n          // renderContainerIntoSubtree.\n          return MOUNTED;\n        } // If we didn't hit the root, that means that we're in an disconnected tree\n        // that has been unmounted.\n\n\n        return UNMOUNTED;\n      }\n\n      function isFiberMounted(fiber) {\n        return isFiberMountedImpl(fiber) === MOUNTED;\n      }\n\n      function isMounted(component) {\n        {\n          var owner = ReactCurrentOwner.current;\n\n          if (owner !== null && owner.tag === ClassComponent) {\n            var ownerFiber = owner;\n            var instance = ownerFiber.stateNode;\n            !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;\n            instance._warnedAboutRefsInRender = true;\n          }\n        }\n        var fiber = get(component);\n\n        if (!fiber) {\n          return false;\n        }\n\n        return isFiberMountedImpl(fiber) === MOUNTED;\n      }\n\n      function assertIsMounted(fiber) {\n        !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;\n      }\n\n      function findCurrentFiberUsingSlowPath(fiber) {\n        var alternate = fiber.alternate;\n\n        if (!alternate) {\n          // If there is no alternate, then we only need to check if it is mounted.\n          var state = isFiberMountedImpl(fiber);\n          !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;\n\n          if (state === MOUNTING) {\n            return null;\n          }\n\n          return fiber;\n        } // If we have two possible branches, we'll walk backwards up to the root\n        // to see what path the root points to. On the way we may hit one of the\n        // special cases and we'll deal with them.\n\n\n        var a = fiber;\n        var b = alternate;\n\n        while (true) {\n          var parentA = a.return;\n          var parentB = parentA ? parentA.alternate : null;\n\n          if (!parentA || !parentB) {\n            // We're at the root.\n            break;\n          } // If both copies of the parent fiber point to the same child, we can\n          // assume that the child is current. This happens when we bailout on low\n          // priority: the bailed out fiber's child reuses the current child.\n\n\n          if (parentA.child === parentB.child) {\n            var child = parentA.child;\n\n            while (child) {\n              if (child === a) {\n                // We've determined that A is the current branch.\n                assertIsMounted(parentA);\n                return fiber;\n              }\n\n              if (child === b) {\n                // We've determined that B is the current branch.\n                assertIsMounted(parentA);\n                return alternate;\n              }\n\n              child = child.sibling;\n            } // We should never have an alternate for any mounting node. So the only\n            // way this could possibly happen is if this was unmounted, if at all.\n\n\n            invariant(false, 'Unable to find node on an unmounted component.');\n          }\n\n          if (a.return !== b.return) {\n            // The return pointer of A and the return pointer of B point to different\n            // fibers. We assume that return pointers never criss-cross, so A must\n            // belong to the child set of A.return, and B must belong to the child\n            // set of B.return.\n            a = parentA;\n            b = parentB;\n          } else {\n            // The return pointers point to the same fiber. We'll have to use the\n            // default, slow path: scan the child sets of each parent alternate to see\n            // which child belongs to which set.\n            //\n            // Search parent A's child set\n            var didFindChild = false;\n            var _child = parentA.child;\n\n            while (_child) {\n              if (_child === a) {\n                didFindChild = true;\n                a = parentA;\n                b = parentB;\n                break;\n              }\n\n              if (_child === b) {\n                didFindChild = true;\n                b = parentA;\n                a = parentB;\n                break;\n              }\n\n              _child = _child.sibling;\n            }\n\n            if (!didFindChild) {\n              // Search parent B's child set\n              _child = parentB.child;\n\n              while (_child) {\n                if (_child === a) {\n                  didFindChild = true;\n                  a = parentB;\n                  b = parentA;\n                  break;\n                }\n\n                if (_child === b) {\n                  didFindChild = true;\n                  b = parentB;\n                  a = parentA;\n                  break;\n                }\n\n                _child = _child.sibling;\n              }\n\n              !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;\n            }\n          }\n\n          !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        } // If the root is not a host container, we're in a disconnected tree. I.e.\n        // unmounted.\n\n\n        !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;\n\n        if (a.stateNode.current === a) {\n          // We've determined that A is the current branch.\n          return fiber;\n        } // Otherwise B has to be current branch.\n\n\n        return alternate;\n      }\n\n      function findCurrentHostFiber(parent) {\n        var currentParent = findCurrentFiberUsingSlowPath(parent);\n\n        if (!currentParent) {\n          return null;\n        } // Next we'll drill down this component to find the first HostComponent/Text.\n\n\n        var node = currentParent;\n\n        while (true) {\n          if (node.tag === HostComponent || node.tag === HostText) {\n            return node;\n          } else if (node.child) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === currentParent) {\n            return null;\n          }\n\n          while (!node.sibling) {\n            if (!node.return || node.return === currentParent) {\n              return null;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        } // Flow needs the return null here, but ESLint complains about it.\n        // eslint-disable-next-line no-unreachable\n\n\n        return null;\n      }\n\n      function findCurrentHostFiberWithNoPortals(parent) {\n        var currentParent = findCurrentFiberUsingSlowPath(parent);\n\n        if (!currentParent) {\n          return null;\n        } // Next we'll drill down this component to find the first HostComponent/Text.\n\n\n        var node = currentParent;\n\n        while (true) {\n          if (node.tag === HostComponent || node.tag === HostText) {\n            return node;\n          } else if (node.child && node.tag !== HostPortal) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === currentParent) {\n            return null;\n          }\n\n          while (!node.sibling) {\n            if (!node.return || node.return === currentParent) {\n              return null;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        } // Flow needs the return null here, but ESLint complains about it.\n        // eslint-disable-next-line no-unreachable\n\n\n        return null;\n      } // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n\n\n      var getPublicInstance = $$$hostConfig.getPublicInstance; // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // This is a host config that's used for the `react-reconciler` package on npm.\n      // It is only used by third-party renderers.\n      //\n      // Its API lets you pass the host config as an argument.\n      // However, inside the `react-reconciler` we treat host config as a module.\n      // This file is a shim between two worlds.\n      //\n      // It works because the `react-reconciler` bundle is wrapped in something like:\n      //\n      // module.exports = function ($$$config) {\n      //   /* reconciler code */\n      // }\n      //\n      // So `$$$config` looks like a global variable, but it's\n      // really an argument to a top-level wrapping function.\n\n      var getRootHostContext = $$$hostConfig.getRootHostContext;\n      var getChildHostContext = $$$hostConfig.getChildHostContext;\n      var prepareForCommit = $$$hostConfig.prepareForCommit;\n      var resetAfterCommit = $$$hostConfig.resetAfterCommit;\n      var createInstance = $$$hostConfig.createInstance;\n      var appendInitialChild = $$$hostConfig.appendInitialChild;\n      var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\n      var prepareUpdate = $$$hostConfig.prepareUpdate;\n      var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\n      var shouldDeprioritizeSubtree = $$$hostConfig.shouldDeprioritizeSubtree;\n      var createTextInstance = $$$hostConfig.createTextInstance;\n      var scheduleDeferredCallback = $$$hostConfig.scheduleDeferredCallback;\n      var cancelDeferredCallback = $$$hostConfig.cancelDeferredCallback;\n      var shouldYield = $$$hostConfig.shouldYield;\n      var scheduleTimeout = $$$hostConfig.setTimeout;\n      var cancelTimeout = $$$hostConfig.clearTimeout;\n      var noTimeout = $$$hostConfig.noTimeout;\n      var now = $$$hostConfig.now;\n      var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\n      var supportsMutation = $$$hostConfig.supportsMutation;\n      var supportsPersistence = $$$hostConfig.supportsPersistence;\n      var supportsHydration = $$$hostConfig.supportsHydration; // -------------------\n      //      Mutation\n      //     (optional)\n      // -------------------\n\n      var appendChild = $$$hostConfig.appendChild;\n      var appendChildToContainer = $$$hostConfig.appendChildToContainer;\n      var commitTextUpdate = $$$hostConfig.commitTextUpdate;\n      var commitMount = $$$hostConfig.commitMount;\n      var commitUpdate = $$$hostConfig.commitUpdate;\n      var insertBefore = $$$hostConfig.insertBefore;\n      var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\n      var removeChild = $$$hostConfig.removeChild;\n      var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\n      var resetTextContent = $$$hostConfig.resetTextContent;\n      var hideInstance = $$$hostConfig.hideInstance;\n      var hideTextInstance = $$$hostConfig.hideTextInstance;\n      var unhideInstance = $$$hostConfig.unhideInstance;\n      var unhideTextInstance = $$$hostConfig.unhideTextInstance; // -------------------\n      //     Persistence\n      //     (optional)\n      // -------------------\n\n      var cloneInstance = $$$hostConfig.cloneInstance;\n      var createContainerChildSet = $$$hostConfig.createContainerChildSet;\n      var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\n      var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\n      var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\n      var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\n      var cloneUnhiddenInstance = $$$hostConfig.cloneUnhiddenInstance;\n      var createHiddenTextInstance = $$$hostConfig.createHiddenTextInstance; // -------------------\n      //     Hydration\n      //     (optional)\n      // -------------------\n\n      var canHydrateInstance = $$$hostConfig.canHydrateInstance;\n      var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\n      var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\n      var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\n      var hydrateInstance = $$$hostConfig.hydrateInstance;\n      var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\n      var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\n      var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\n      var didNotHydrateContainerInstance = $$$hostConfig.didNotHydrateContainerInstance;\n      var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\n      var didNotFindHydratableContainerInstance = $$$hostConfig.didNotFindHydratableContainerInstance;\n      var didNotFindHydratableContainerTextInstance = $$$hostConfig.didNotFindHydratableContainerTextInstance;\n      var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\n      var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\n      var BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\n      var describeComponentFrame = function (name, source, ownerName) {\n        var sourceInfo = '';\n\n        if (source) {\n          var path = source.fileName;\n          var fileName = path.replace(BEFORE_SLASH_RE, '');\n          {\n            // In DEV, include code for a common special case:\n            // prefer \"folder/index.js\" instead of just \"index.js\".\n            if (/^index\\./.test(fileName)) {\n              var match = path.match(BEFORE_SLASH_RE);\n\n              if (match) {\n                var pathBeforeSlash = match[1];\n\n                if (pathBeforeSlash) {\n                  var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n                  fileName = folderName + '/' + fileName;\n                }\n              }\n            }\n          }\n          sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n        } else if (ownerName) {\n          sourceInfo = ' (created by ' + ownerName + ')';\n        }\n\n        return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n      };\n\n      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\n      function describeFiber(fiber) {\n        switch (fiber.tag) {\n          case IndeterminateComponent:\n          case LazyComponent:\n          case FunctionComponent:\n          case ClassComponent:\n          case HostComponent:\n          case Mode:\n          case SuspenseComponent:\n            var owner = fiber._debugOwner;\n            var source = fiber._debugSource;\n            var name = getComponentName(fiber.type);\n            var ownerName = null;\n\n            if (owner) {\n              ownerName = getComponentName(owner.type);\n            }\n\n            return describeComponentFrame(name, source, ownerName);\n\n          default:\n            return '';\n        }\n      }\n\n      function getStackByFiberInDevAndProd(workInProgress) {\n        var info = '';\n        var node = workInProgress;\n\n        do {\n          info += describeFiber(node);\n          node = node.return;\n        } while (node);\n\n        return info;\n      }\n\n      var current = null;\n      var phase = null;\n\n      function getCurrentFiberOwnerNameInDevOrNull() {\n        {\n          if (current === null) {\n            return null;\n          }\n\n          var owner = current._debugOwner;\n\n          if (owner !== null && typeof owner !== 'undefined') {\n            return getComponentName(owner.type);\n          }\n        }\n        return null;\n      }\n\n      function getCurrentFiberStackInDev() {\n        {\n          if (current === null) {\n            return '';\n          } // Safe because if current fiber exists, we are reconciling,\n          // and it is guaranteed to be the work-in-progress version.\n\n\n          return getStackByFiberInDevAndProd(current);\n        }\n        return '';\n      }\n\n      function resetCurrentFiber() {\n        {\n          ReactDebugCurrentFrame.getCurrentStack = null;\n          current = null;\n          phase = null;\n        }\n      }\n\n      function setCurrentFiber(fiber) {\n        {\n          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n          current = fiber;\n          phase = null;\n        }\n      }\n\n      function setCurrentPhase(lifeCyclePhase) {\n        {\n          phase = lifeCyclePhase;\n        }\n      } // Only used in www builds.\n      // Only used in www builds.\n      // React Fire: prevent the value and checked attributes from syncing\n      // with their related DOM properties\n      // These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n      // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\n      // Prefix measurements so that it's possible to filter them.\n      // Longer prefixes are hard to read in DevTools.\n\n\n      var reactEmoji = '\\u269B';\n      var warningEmoji = '\\u26D4';\n      var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.\n      // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?\n\n      var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?\n      // Reusing `currentFiber` would be confusing for this because user code fiber\n      // can change during commit phase too, but we don't need to unwind it (since\n      // lifecycles in the commit phase don't resemble a tree).\n\n      var currentPhase = null;\n      var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,\n      // so we will keep track of it, and include it in the report.\n      // Track commits caused by cascading updates.\n\n      var isCommitting = false;\n      var hasScheduledUpdateInCurrentCommit = false;\n      var hasScheduledUpdateInCurrentPhase = false;\n      var commitCountInCurrentWorkLoop = 0;\n      var effectCountInCurrentCommit = 0;\n      var isWaitingForCallback = false; // During commits, we only show a measurement once per method name\n      // to avoid stretch the commit phase with measurement overhead.\n\n      var labelsInCurrentCommit = new Set();\n\n      var formatMarkName = function (markName) {\n        return reactEmoji + ' ' + markName;\n      };\n\n      var formatLabel = function (label, warning) {\n        var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';\n        var suffix = warning ? ' Warning: ' + warning : '';\n        return '' + prefix + label + suffix;\n      };\n\n      var beginMark = function (markName) {\n        performance.mark(formatMarkName(markName));\n      };\n\n      var clearMark = function (markName) {\n        performance.clearMarks(formatMarkName(markName));\n      };\n\n      var endMark = function (label, markName, warning) {\n        var formattedMarkName = formatMarkName(markName);\n        var formattedLabel = formatLabel(label, warning);\n\n        try {\n          performance.measure(formattedLabel, formattedMarkName);\n        } catch (err) {} // If previous mark was missing for some reason, this will throw.\n        // This could only happen if React crashed in an unexpected place earlier.\n        // Don't pile on with more errors.\n        // Clear marks immediately to avoid growing buffer.\n\n\n        performance.clearMarks(formattedMarkName);\n        performance.clearMeasures(formattedLabel);\n      };\n\n      var getFiberMarkName = function (label, debugID) {\n        return label + ' (#' + debugID + ')';\n      };\n\n      var getFiberLabel = function (componentName, isMounted, phase) {\n        if (phase === null) {\n          // These are composite component total time measurements.\n          return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';\n        } else {\n          // Composite component methods.\n          return componentName + '.' + phase;\n        }\n      };\n\n      var beginFiberMark = function (fiber, phase) {\n        var componentName = getComponentName(fiber.type) || 'Unknown';\n        var debugID = fiber._debugID;\n        var isMounted = fiber.alternate !== null;\n        var label = getFiberLabel(componentName, isMounted, phase);\n\n        if (isCommitting && labelsInCurrentCommit.has(label)) {\n          // During the commit phase, we don't show duplicate labels because\n          // there is a fixed overhead for every measurement, and we don't\n          // want to stretch the commit phase beyond necessary.\n          return false;\n        }\n\n        labelsInCurrentCommit.add(label);\n        var markName = getFiberMarkName(label, debugID);\n        beginMark(markName);\n        return true;\n      };\n\n      var clearFiberMark = function (fiber, phase) {\n        var componentName = getComponentName(fiber.type) || 'Unknown';\n        var debugID = fiber._debugID;\n        var isMounted = fiber.alternate !== null;\n        var label = getFiberLabel(componentName, isMounted, phase);\n        var markName = getFiberMarkName(label, debugID);\n        clearMark(markName);\n      };\n\n      var endFiberMark = function (fiber, phase, warning) {\n        var componentName = getComponentName(fiber.type) || 'Unknown';\n        var debugID = fiber._debugID;\n        var isMounted = fiber.alternate !== null;\n        var label = getFiberLabel(componentName, isMounted, phase);\n        var markName = getFiberMarkName(label, debugID);\n        endMark(label, markName, warning);\n      };\n\n      var shouldIgnoreFiber = function (fiber) {\n        // Host components should be skipped in the timeline.\n        // We could check typeof fiber.type, but does this work with RN?\n        switch (fiber.tag) {\n          case HostRoot:\n          case HostComponent:\n          case HostText:\n          case HostPortal:\n          case Fragment:\n          case ContextProvider:\n          case ContextConsumer:\n          case Mode:\n            return true;\n\n          default:\n            return false;\n        }\n      };\n\n      var clearPendingPhaseMeasurement = function () {\n        if (currentPhase !== null && currentPhaseFiber !== null) {\n          clearFiberMark(currentPhaseFiber, currentPhase);\n        }\n\n        currentPhaseFiber = null;\n        currentPhase = null;\n        hasScheduledUpdateInCurrentPhase = false;\n      };\n\n      var pauseTimers = function () {\n        // Stops all currently active measurements so that they can be resumed\n        // if we continue in a later deferred loop from the same unit of work.\n        var fiber = currentFiber;\n\n        while (fiber) {\n          if (fiber._debugIsCurrentlyTiming) {\n            endFiberMark(fiber, null, null);\n          }\n\n          fiber = fiber.return;\n        }\n      };\n\n      var resumeTimersRecursively = function (fiber) {\n        if (fiber.return !== null) {\n          resumeTimersRecursively(fiber.return);\n        }\n\n        if (fiber._debugIsCurrentlyTiming) {\n          beginFiberMark(fiber, null);\n        }\n      };\n\n      var resumeTimers = function () {\n        // Resumes all measurements that were active during the last deferred loop.\n        if (currentFiber !== null) {\n          resumeTimersRecursively(currentFiber);\n        }\n      };\n\n      function recordEffect() {\n        {\n          effectCountInCurrentCommit++;\n        }\n      }\n\n      function recordScheduleUpdate() {\n        {\n          if (isCommitting) {\n            hasScheduledUpdateInCurrentCommit = true;\n          }\n\n          if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {\n            hasScheduledUpdateInCurrentPhase = true;\n          }\n        }\n      }\n\n      function startRequestCallbackTimer() {\n        {\n          if (supportsUserTiming && !isWaitingForCallback) {\n            isWaitingForCallback = true;\n            beginMark('(Waiting for async callback...)');\n          }\n        }\n      }\n\n      function stopRequestCallbackTimer(didExpire, expirationTime) {\n        {\n          if (supportsUserTiming) {\n            isWaitingForCallback = false;\n            var warning = didExpire ? 'React was blocked by main thread' : null;\n            endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);\n          }\n        }\n      }\n\n      function startWorkTimer(fiber) {\n        {\n          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n            return;\n          } // If we pause, this is the fiber to unwind from.\n\n\n          currentFiber = fiber;\n\n          if (!beginFiberMark(fiber, null)) {\n            return;\n          }\n\n          fiber._debugIsCurrentlyTiming = true;\n        }\n      }\n\n      function cancelWorkTimer(fiber) {\n        {\n          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n            return;\n          } // Remember we shouldn't complete measurement for this fiber.\n          // Otherwise flamechart will be deep even for small updates.\n\n\n          fiber._debugIsCurrentlyTiming = false;\n          clearFiberMark(fiber, null);\n        }\n      }\n\n      function stopWorkTimer(fiber) {\n        {\n          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n            return;\n          } // If we pause, its parent is the fiber to unwind from.\n\n\n          currentFiber = fiber.return;\n\n          if (!fiber._debugIsCurrentlyTiming) {\n            return;\n          }\n\n          fiber._debugIsCurrentlyTiming = false;\n          endFiberMark(fiber, null, null);\n        }\n      }\n\n      function stopFailedWorkTimer(fiber) {\n        {\n          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n            return;\n          } // If we pause, its parent is the fiber to unwind from.\n\n\n          currentFiber = fiber.return;\n\n          if (!fiber._debugIsCurrentlyTiming) {\n            return;\n          }\n\n          fiber._debugIsCurrentlyTiming = false;\n          var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';\n          endFiberMark(fiber, null, warning);\n        }\n      }\n\n      function startPhaseTimer(fiber, phase) {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          clearPendingPhaseMeasurement();\n\n          if (!beginFiberMark(fiber, phase)) {\n            return;\n          }\n\n          currentPhaseFiber = fiber;\n          currentPhase = phase;\n        }\n      }\n\n      function stopPhaseTimer() {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          if (currentPhase !== null && currentPhaseFiber !== null) {\n            var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;\n            endFiberMark(currentPhaseFiber, currentPhase, warning);\n          }\n\n          currentPhase = null;\n          currentPhaseFiber = null;\n        }\n      }\n\n      function startWorkLoopTimer(nextUnitOfWork) {\n        {\n          currentFiber = nextUnitOfWork;\n\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          commitCountInCurrentWorkLoop = 0; // This is top level call.\n          // Any other measurements are performed within.\n\n          beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.\n\n          resumeTimers();\n        }\n      }\n\n      function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          var warning = null;\n\n          if (interruptedBy !== null) {\n            if (interruptedBy.tag === HostRoot) {\n              warning = 'A top-level update interrupted the previous render';\n            } else {\n              var componentName = getComponentName(interruptedBy.type) || 'Unknown';\n              warning = 'An update to ' + componentName + ' interrupted the previous render';\n            }\n          } else if (commitCountInCurrentWorkLoop > 1) {\n            warning = 'There were cascading updates';\n          }\n\n          commitCountInCurrentWorkLoop = 0;\n          var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.\n\n          pauseTimers();\n          endMark(label, '(React Tree Reconciliation)', warning);\n        }\n      }\n\n      function startCommitTimer() {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          isCommitting = true;\n          hasScheduledUpdateInCurrentCommit = false;\n          labelsInCurrentCommit.clear();\n          beginMark('(Committing Changes)');\n        }\n      }\n\n      function stopCommitTimer() {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          var warning = null;\n\n          if (hasScheduledUpdateInCurrentCommit) {\n            warning = 'Lifecycle hook scheduled a cascading update';\n          } else if (commitCountInCurrentWorkLoop > 0) {\n            warning = 'Caused by a cascading update in earlier commit';\n          }\n\n          hasScheduledUpdateInCurrentCommit = false;\n          commitCountInCurrentWorkLoop++;\n          isCommitting = false;\n          labelsInCurrentCommit.clear();\n          endMark('(Committing Changes)', '(Committing Changes)', warning);\n        }\n      }\n\n      function startCommitSnapshotEffectsTimer() {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          effectCountInCurrentCommit = 0;\n          beginMark('(Committing Snapshot Effects)');\n        }\n      }\n\n      function stopCommitSnapshotEffectsTimer() {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          var count = effectCountInCurrentCommit;\n          effectCountInCurrentCommit = 0;\n          endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);\n        }\n      }\n\n      function startCommitHostEffectsTimer() {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          effectCountInCurrentCommit = 0;\n          beginMark('(Committing Host Effects)');\n        }\n      }\n\n      function stopCommitHostEffectsTimer() {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          var count = effectCountInCurrentCommit;\n          effectCountInCurrentCommit = 0;\n          endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);\n        }\n      }\n\n      function startCommitLifeCyclesTimer() {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          effectCountInCurrentCommit = 0;\n          beginMark('(Calling Lifecycle Methods)');\n        }\n      }\n\n      function stopCommitLifeCyclesTimer() {\n        {\n          if (!supportsUserTiming) {\n            return;\n          }\n\n          var count = effectCountInCurrentCommit;\n          effectCountInCurrentCommit = 0;\n          endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);\n        }\n      }\n\n      var valueStack = [];\n      var fiberStack = void 0;\n      {\n        fiberStack = [];\n      }\n      var index = -1;\n\n      function createCursor(defaultValue) {\n        return {\n          current: defaultValue\n        };\n      }\n\n      function pop(cursor, fiber) {\n        if (index < 0) {\n          {\n            warningWithoutStack$1(false, 'Unexpected pop.');\n          }\n          return;\n        }\n\n        {\n          if (fiber !== fiberStack[index]) {\n            warningWithoutStack$1(false, 'Unexpected Fiber popped.');\n          }\n        }\n        cursor.current = valueStack[index];\n        valueStack[index] = null;\n        {\n          fiberStack[index] = null;\n        }\n        index--;\n      }\n\n      function push(cursor, value, fiber) {\n        index++;\n        valueStack[index] = cursor.current;\n        {\n          fiberStack[index] = fiber;\n        }\n        cursor.current = value;\n      }\n\n      function checkThatStackIsEmpty() {\n        {\n          if (index !== -1) {\n            warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');\n          }\n        }\n      }\n\n      function resetStackAfterFatalErrorInDev() {\n        {\n          index = -1;\n          valueStack.length = 0;\n          fiberStack.length = 0;\n        }\n      }\n\n      var warnedAboutMissingGetChildContext = void 0;\n      {\n        warnedAboutMissingGetChildContext = {};\n      }\n      var emptyContextObject = {};\n      {\n        Object.freeze(emptyContextObject);\n      } // A cursor to the current merged context object on the stack.\n\n      var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\n      var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n      // We use this to get access to the parent context after we have already\n      // pushed the next context provider, and now need to merge their contexts.\n\n      var previousContext = emptyContextObject;\n\n      function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n        if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n          // If the fiber is a context provider itself, when we read its context\n          // we may have already pushed its own child context on the stack. A context\n          // provider should not \"see\" its own child context. Therefore we read the\n          // previous (parent) context instead for a context provider.\n          return previousContext;\n        }\n\n        return contextStackCursor.current;\n      }\n\n      function cacheContext(workInProgress, unmaskedContext, maskedContext) {\n        var instance = workInProgress.stateNode;\n        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n      }\n\n      function getMaskedContext(workInProgress, unmaskedContext) {\n        var type = workInProgress.type;\n        var contextTypes = type.contextTypes;\n\n        if (!contextTypes) {\n          return emptyContextObject;\n        } // Avoid recreating masked context unless unmasked context has changed.\n        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n        // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n        var instance = workInProgress.stateNode;\n\n        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n          return instance.__reactInternalMemoizedMaskedChildContext;\n        }\n\n        var context = {};\n\n        for (var key in contextTypes) {\n          context[key] = unmaskedContext[key];\n        }\n\n        {\n          var name = getComponentName(type) || 'Unknown';\n          checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);\n        } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n        // Context is created before the class component is instantiated so check for instance.\n\n        if (instance) {\n          cacheContext(workInProgress, unmaskedContext, context);\n        }\n\n        return context;\n      }\n\n      function hasContextChanged() {\n        return didPerformWorkStackCursor.current;\n      }\n\n      function isContextProvider(type) {\n        var childContextTypes = type.childContextTypes;\n        return childContextTypes !== null && childContextTypes !== undefined;\n      }\n\n      function popContext(fiber) {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor, fiber);\n      }\n\n      function popTopLevelContextObject(fiber) {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor, fiber);\n      }\n\n      function pushTopLevelContextObject(fiber, context, didChange) {\n        !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        push(contextStackCursor, context, fiber);\n        push(didPerformWorkStackCursor, didChange, fiber);\n      }\n\n      function processChildContext(fiber, type, parentContext) {\n        var instance = fiber.stateNode;\n        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n        // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n        if (typeof instance.getChildContext !== 'function') {\n          {\n            var componentName = getComponentName(type) || 'Unknown';\n\n            if (!warnedAboutMissingGetChildContext[componentName]) {\n              warnedAboutMissingGetChildContext[componentName] = true;\n              warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n            }\n          }\n          return parentContext;\n        }\n\n        var childContext = void 0;\n        {\n          setCurrentPhase('getChildContext');\n        }\n        startPhaseTimer(fiber, 'getChildContext');\n        childContext = instance.getChildContext();\n        stopPhaseTimer();\n        {\n          setCurrentPhase(null);\n        }\n\n        for (var contextKey in childContext) {\n          !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;\n        }\n\n        {\n          var name = getComponentName(type) || 'Unknown';\n          checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when\n          // somebody calls unstable_renderSubtreeIntoContainer() and we process\n          // context from the parent component instance. The stack will be missing\n          // because it's outside of the reconciliation, and so the pointer has not\n          // been set. This is rare and doesn't matter. We'll also remove that API.\n          getCurrentFiberStackInDev);\n        }\n        return _assign({}, parentContext, childContext);\n      }\n\n      function pushContextProvider(workInProgress) {\n        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n        // If the instance does not exist yet, we will push null at first,\n        // and replace it on the stack later when invalidating the context.\n\n        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n        previousContext = contextStackCursor.current;\n        push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n        return true;\n      }\n\n      function invalidateContextProvider(workInProgress, type, didChange) {\n        var instance = workInProgress.stateNode;\n        !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n        if (didChange) {\n          // Merge parent and own context.\n          // Skip this if we're not updating due to sCU.\n          // This avoids unnecessarily recomputing memoized values.\n          var mergedContext = processChildContext(workInProgress, type, previousContext);\n          instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n          // It is important to unwind the context in the reverse order.\n\n          pop(didPerformWorkStackCursor, workInProgress);\n          pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n          push(contextStackCursor, mergedContext, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        } else {\n          pop(didPerformWorkStackCursor, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        }\n      }\n\n      function findCurrentUnmaskedContext(fiber) {\n        // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n        // makes sense elsewhere\n        !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        var node = fiber;\n\n        do {\n          switch (node.tag) {\n            case HostRoot:\n              return node.stateNode.context;\n\n            case ClassComponent:\n              {\n                var Component = node.type;\n\n                if (isContextProvider(Component)) {\n                  return node.stateNode.__reactInternalMemoizedMergedChildContext;\n                }\n\n                break;\n              }\n          }\n\n          node = node.return;\n        } while (node !== null);\n\n        invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');\n      }\n\n      var onCommitFiberRoot = null;\n      var onCommitFiberUnmount = null;\n      var hasLoggedError = false;\n\n      function catchErrors(fn) {\n        return function (arg) {\n          try {\n            return fn(arg);\n          } catch (err) {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);\n            }\n          }\n        };\n      }\n\n      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\n      function injectInternals(internals) {\n        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n          // No DevTools\n          return false;\n        }\n\n        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n        if (hook.isDisabled) {\n          // This isn't a real property on the hook, but it can be set to opt out\n          // of DevTools integration and associated warnings and logs.\n          // https://github.com/facebook/react/issues/3877\n          return true;\n        }\n\n        if (!hook.supportsFiber) {\n          {\n            warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');\n          } // DevTools exists, even though it doesn't support Fiber.\n\n          return true;\n        }\n\n        try {\n          var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n          onCommitFiberRoot = catchErrors(function (root) {\n            return hook.onCommitFiberRoot(rendererID, root);\n          });\n          onCommitFiberUnmount = catchErrors(function (fiber) {\n            return hook.onCommitFiberUnmount(rendererID, fiber);\n          });\n        } catch (err) {\n          // Catch all errors because it is unsafe to throw during initialization.\n          {\n            warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);\n          }\n        } // DevTools exists\n\n\n        return true;\n      }\n\n      function onCommitRoot(root) {\n        if (typeof onCommitFiberRoot === 'function') {\n          onCommitFiberRoot(root);\n        }\n      }\n\n      function onCommitUnmount(fiber) {\n        if (typeof onCommitFiberUnmount === 'function') {\n          onCommitFiberUnmount(fiber);\n        }\n      } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n      // Math.pow(2, 30) - 1\n      // 0b111111111111111111111111111111\n\n\n      var maxSigned31BitInt = 1073741823;\n      var NoWork = 0;\n      var Never = 1;\n      var Sync = maxSigned31BitInt;\n      var UNIT_SIZE = 10;\n      var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1; // 1 unit of expiration time represents 10ms.\n\n      function msToExpirationTime(ms) {\n        // Always add an offset so that we don't clash with the magic number for NoWork.\n        return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);\n      }\n\n      function expirationTimeToMs(expirationTime) {\n        return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;\n      }\n\n      function ceiling(num, precision) {\n        return ((num / precision | 0) + 1) * precision;\n      }\n\n      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {\n        return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);\n      }\n\n      var LOW_PRIORITY_EXPIRATION = 5000;\n      var LOW_PRIORITY_BATCH_SIZE = 250;\n\n      function computeAsyncExpiration(currentTime) {\n        return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);\n      } // We intentionally set a higher expiration time for interactive updates in\n      // dev than in production.\n      //\n      // If the main thread is being blocked so long that you hit the expiration,\n      // it's a problem that could be solved with better scheduling.\n      //\n      // People will be more likely to notice this and fix it with the long\n      // expiration time in development.\n      //\n      // In production we opt for better UX at the risk of masking scheduling\n      // problems, by expiring fast.\n\n\n      var HIGH_PRIORITY_EXPIRATION = 500;\n      var HIGH_PRIORITY_BATCH_SIZE = 100;\n\n      function computeInteractiveExpiration(currentTime) {\n        return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);\n      }\n\n      var NoContext = 0;\n      var ConcurrentMode = 1;\n      var StrictMode = 2;\n      var ProfileMode = 4;\n      var hasBadMapPolyfill = void 0;\n      {\n        hasBadMapPolyfill = false;\n\n        try {\n          var nonExtensibleObject = Object.preventExtensions({});\n          var testMap = new Map([[nonExtensibleObject, null]]);\n          var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.\n          // https://github.com/rollup/rollup/issues/1771\n          // TODO: we can remove these if Rollup fixes the bug.\n\n          testMap.set(0, 0);\n          testSet.add(0);\n        } catch (e) {\n          // TODO: Consider warning about bad polyfills\n          hasBadMapPolyfill = true;\n        }\n      } // A Fiber is work on a Component that needs to be done or was done. There can\n      // be more than one per component.\n\n      var debugCounter = void 0;\n      {\n        debugCounter = 1;\n      }\n\n      function FiberNode(tag, pendingProps, key, mode) {\n        // Instance\n        this.tag = tag;\n        this.key = key;\n        this.elementType = null;\n        this.type = null;\n        this.stateNode = null; // Fiber\n\n        this.return = null;\n        this.child = null;\n        this.sibling = null;\n        this.index = 0;\n        this.ref = null;\n        this.pendingProps = pendingProps;\n        this.memoizedProps = null;\n        this.updateQueue = null;\n        this.memoizedState = null;\n        this.firstContextDependency = null;\n        this.mode = mode; // Effects\n\n        this.effectTag = NoEffect;\n        this.nextEffect = null;\n        this.firstEffect = null;\n        this.lastEffect = null;\n        this.expirationTime = NoWork;\n        this.childExpirationTime = NoWork;\n        this.alternate = null;\n        {\n          this.actualDuration = 0;\n          this.actualStartTime = -1;\n          this.selfBaseDuration = 0;\n          this.treeBaseDuration = 0;\n        }\n        {\n          this._debugID = debugCounter++;\n          this._debugSource = null;\n          this._debugOwner = null;\n          this._debugIsCurrentlyTiming = false;\n\n          if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n            Object.preventExtensions(this);\n          }\n        }\n      } // This is a constructor function, rather than a POJO constructor, still\n      // please ensure we do the following:\n      // 1) Nobody should add any instance methods on this. Instance methods can be\n      //    more difficult to predict when they get optimized and they are almost\n      //    never inlined properly in static compilers.\n      // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n      //    always know when it is a fiber.\n      // 3) We might want to experiment with using numeric keys since they are easier\n      //    to optimize in a non-JIT environment.\n      // 4) We can easily go from a constructor to a createFiber object literal if that\n      //    is faster.\n      // 5) It should be easy to port this to a C struct and keep a C implementation\n      //    compatible.\n\n\n      var createFiber = function (tag, pendingProps, key, mode) {\n        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n        return new FiberNode(tag, pendingProps, key, mode);\n      };\n\n      function shouldConstruct(Component) {\n        var prototype = Component.prototype;\n        return !!(prototype && prototype.isReactComponent);\n      }\n\n      function isSimpleFunctionComponent(type) {\n        return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;\n      }\n\n      function resolveLazyComponentTag(Component) {\n        if (typeof Component === 'function') {\n          return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n        } else if (Component !== undefined && Component !== null) {\n          var $$typeof = Component.$$typeof;\n\n          if ($$typeof === REACT_FORWARD_REF_TYPE) {\n            return ForwardRef;\n          }\n\n          if ($$typeof === REACT_MEMO_TYPE) {\n            return MemoComponent;\n          }\n        }\n\n        return IndeterminateComponent;\n      } // This is used to create an alternate fiber to do work on.\n\n\n      function createWorkInProgress(current, pendingProps, expirationTime) {\n        var workInProgress = current.alternate;\n\n        if (workInProgress === null) {\n          // We use a double buffering pooling technique because we know that we'll\n          // only ever need at most two versions of a tree. We pool the \"other\" unused\n          // node that we're free to reuse. This is lazily created to avoid allocating\n          // extra objects for things that are never updated. It also allow us to\n          // reclaim the extra memory if needed.\n          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n          workInProgress.elementType = current.elementType;\n          workInProgress.type = current.type;\n          workInProgress.stateNode = current.stateNode;\n          {\n            // DEV-only fields\n            workInProgress._debugID = current._debugID;\n            workInProgress._debugSource = current._debugSource;\n            workInProgress._debugOwner = current._debugOwner;\n          }\n          workInProgress.alternate = current;\n          current.alternate = workInProgress;\n        } else {\n          workInProgress.pendingProps = pendingProps; // We already have an alternate.\n          // Reset the effect tag.\n\n          workInProgress.effectTag = NoEffect; // The effect list is no longer valid.\n\n          workInProgress.nextEffect = null;\n          workInProgress.firstEffect = null;\n          workInProgress.lastEffect = null;\n          {\n            // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n            // This prevents time from endlessly accumulating in new commits.\n            // This has the downside of resetting values for different priority renders,\n            // But works for yielding (the common case) and should support resuming.\n            workInProgress.actualDuration = 0;\n            workInProgress.actualStartTime = -1;\n          }\n        }\n\n        workInProgress.childExpirationTime = current.childExpirationTime;\n        workInProgress.expirationTime = current.expirationTime;\n        workInProgress.child = current.child;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue;\n        workInProgress.firstContextDependency = current.firstContextDependency; // These will be overridden during the parent's reconciliation\n\n        workInProgress.sibling = current.sibling;\n        workInProgress.index = current.index;\n        workInProgress.ref = current.ref;\n        {\n          workInProgress.selfBaseDuration = current.selfBaseDuration;\n          workInProgress.treeBaseDuration = current.treeBaseDuration;\n        }\n        return workInProgress;\n      }\n\n      function createHostRootFiber(isConcurrent) {\n        var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;\n\n        if (isDevToolsPresent) {\n          // Always collect profile timings when DevTools are present.\n          // This enables DevTools to start capturing timing at any point–\n          // Without some nodes in the tree having empty base times.\n          mode |= ProfileMode;\n        }\n\n        return createFiber(HostRoot, null, null, mode);\n      }\n\n      function createFiberFromTypeAndProps(type, // React$ElementType\n      key, pendingProps, owner, mode, expirationTime) {\n        var fiber = void 0;\n        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n        var resolvedType = type;\n\n        if (typeof type === 'function') {\n          if (shouldConstruct(type)) {\n            fiberTag = ClassComponent;\n          }\n        } else if (typeof type === 'string') {\n          fiberTag = HostComponent;\n        } else {\n          getTag: switch (type) {\n            case REACT_FRAGMENT_TYPE:\n              return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);\n\n            case REACT_CONCURRENT_MODE_TYPE:\n              return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);\n\n            case REACT_STRICT_MODE_TYPE:\n              return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);\n\n            case REACT_PROFILER_TYPE:\n              return createFiberFromProfiler(pendingProps, mode, expirationTime, key);\n\n            case REACT_SUSPENSE_TYPE:\n              return createFiberFromSuspense(pendingProps, mode, expirationTime, key);\n\n            default:\n              {\n                if (typeof type === 'object' && type !== null) {\n                  switch (type.$$typeof) {\n                    case REACT_PROVIDER_TYPE:\n                      fiberTag = ContextProvider;\n                      break getTag;\n\n                    case REACT_CONTEXT_TYPE:\n                      // This is a consumer\n                      fiberTag = ContextConsumer;\n                      break getTag;\n\n                    case REACT_FORWARD_REF_TYPE:\n                      fiberTag = ForwardRef;\n                      break getTag;\n\n                    case REACT_MEMO_TYPE:\n                      fiberTag = MemoComponent;\n                      break getTag;\n\n                    case REACT_LAZY_TYPE:\n                      fiberTag = LazyComponent;\n                      resolvedType = null;\n                      break getTag;\n                  }\n                }\n\n                var info = '';\n                {\n                  if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n                    info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n                  }\n\n                  var ownerName = owner ? getComponentName(owner.type) : null;\n\n                  if (ownerName) {\n                    info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n                  }\n                }\n                invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);\n              }\n          }\n        }\n\n        fiber = createFiber(fiberTag, pendingProps, key, mode);\n        fiber.elementType = type;\n        fiber.type = resolvedType;\n        fiber.expirationTime = expirationTime;\n        return fiber;\n      }\n\n      function createFiberFromElement(element, mode, expirationTime) {\n        var owner = null;\n        {\n          owner = element._owner;\n        }\n        var type = element.type;\n        var key = element.key;\n        var pendingProps = element.props;\n        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);\n        {\n          fiber._debugSource = element._source;\n          fiber._debugOwner = element._owner;\n        }\n        return fiber;\n      }\n\n      function createFiberFromFragment(elements, mode, expirationTime, key) {\n        var fiber = createFiber(Fragment, elements, key, mode);\n        fiber.expirationTime = expirationTime;\n        return fiber;\n      }\n\n      function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {\n        {\n          if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {\n            warningWithoutStack$1(false, 'Profiler must specify an \"id\" string and \"onRender\" function as props');\n          }\n        }\n        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.\n\n        fiber.elementType = REACT_PROFILER_TYPE;\n        fiber.type = REACT_PROFILER_TYPE;\n        fiber.expirationTime = expirationTime;\n        return fiber;\n      }\n\n      function createFiberFromMode(pendingProps, mode, expirationTime, key) {\n        var fiber = createFiber(Mode, pendingProps, key, mode); // TODO: The Mode fiber shouldn't have a type. It has a tag.\n\n        var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;\n        fiber.elementType = type;\n        fiber.type = type;\n        fiber.expirationTime = expirationTime;\n        return fiber;\n      }\n\n      function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {\n        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.\n\n        var type = REACT_SUSPENSE_TYPE;\n        fiber.elementType = type;\n        fiber.type = type;\n        fiber.expirationTime = expirationTime;\n        return fiber;\n      }\n\n      function createFiberFromText(content, mode, expirationTime) {\n        var fiber = createFiber(HostText, content, null, mode);\n        fiber.expirationTime = expirationTime;\n        return fiber;\n      }\n\n      function createFiberFromHostInstanceForDeletion() {\n        var fiber = createFiber(HostComponent, null, null, NoContext); // TODO: These should not need a type.\n\n        fiber.elementType = 'DELETED';\n        fiber.type = 'DELETED';\n        return fiber;\n      }\n\n      function createFiberFromPortal(portal, mode, expirationTime) {\n        var pendingProps = portal.children !== null ? portal.children : [];\n        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n        fiber.expirationTime = expirationTime;\n        fiber.stateNode = {\n          containerInfo: portal.containerInfo,\n          pendingChildren: null,\n          // Used by persistent updates\n          implementation: portal.implementation\n        };\n        return fiber;\n      } // Used for stashing WIP properties to replay failed work in DEV.\n\n\n      function assignFiberPropertiesInDEV(target, source) {\n        if (target === null) {\n          // This Fiber's initial properties will always be overwritten.\n          // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n          target = createFiber(IndeterminateComponent, null, null, NoContext);\n        } // This is intentionally written as a list of all properties.\n        // We tried to use Object.assign() instead but this is called in\n        // the hottest path, and Object.assign() was too slow:\n        // https://github.com/facebook/react/issues/12502\n        // This code is DEV-only so size is not a concern.\n\n\n        target.tag = source.tag;\n        target.key = source.key;\n        target.elementType = source.elementType;\n        target.type = source.type;\n        target.stateNode = source.stateNode;\n        target.return = source.return;\n        target.child = source.child;\n        target.sibling = source.sibling;\n        target.index = source.index;\n        target.ref = source.ref;\n        target.pendingProps = source.pendingProps;\n        target.memoizedProps = source.memoizedProps;\n        target.updateQueue = source.updateQueue;\n        target.memoizedState = source.memoizedState;\n        target.firstContextDependency = source.firstContextDependency;\n        target.mode = source.mode;\n        target.effectTag = source.effectTag;\n        target.nextEffect = source.nextEffect;\n        target.firstEffect = source.firstEffect;\n        target.lastEffect = source.lastEffect;\n        target.expirationTime = source.expirationTime;\n        target.childExpirationTime = source.childExpirationTime;\n        target.alternate = source.alternate;\n        {\n          target.actualDuration = source.actualDuration;\n          target.actualStartTime = source.actualStartTime;\n          target.selfBaseDuration = source.selfBaseDuration;\n          target.treeBaseDuration = source.treeBaseDuration;\n        }\n        target._debugID = source._debugID;\n        target._debugSource = source._debugSource;\n        target._debugOwner = source._debugOwner;\n        target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;\n        return target;\n      } // TODO: This should be lifted into the renderer.\n      // The following attributes are only used by interaction tracing builds.\n      // They enable interactions to be associated with their async work,\n      // And expose interaction metadata to the React DevTools Profiler plugin.\n      // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.\n      // Exported FiberRoot type includes all properties,\n      // To avoid requiring potentially error-prone :any casts throughout the project.\n      // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).\n      // The types are defined separately within this file to ensure they stay in sync.\n      // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)\n\n\n      function createFiberRoot(containerInfo, isConcurrent, hydrate) {\n        // Cyclic construction. This cheats the type system right now because\n        // stateNode is any.\n        var uninitializedFiber = createHostRootFiber(isConcurrent);\n        var root = void 0;\n        {\n          root = {\n            current: uninitializedFiber,\n            containerInfo: containerInfo,\n            pendingChildren: null,\n            earliestPendingTime: NoWork,\n            latestPendingTime: NoWork,\n            earliestSuspendedTime: NoWork,\n            latestSuspendedTime: NoWork,\n            latestPingedTime: NoWork,\n            didError: false,\n            pendingCommitExpirationTime: NoWork,\n            finishedWork: null,\n            timeoutHandle: noTimeout,\n            context: null,\n            pendingContext: null,\n            hydrate: hydrate,\n            nextExpirationTimeToWorkOn: NoWork,\n            expirationTime: NoWork,\n            firstBatch: null,\n            nextScheduledRoot: null,\n            interactionThreadID: tracing$$1.unstable_getThreadID(),\n            memoizedInteractions: new Set(),\n            pendingInteractionMap: new Map()\n          };\n        }\n        uninitializedFiber.stateNode = root; // The reason for the way the Flow types are structured in this file,\n        // Is to avoid needing :any casts everywhere interaction tracing fields are used.\n        // Unfortunately that requires an :any cast for non-interaction tracing capable builds.\n        // $FlowFixMe Remove this :any cast and replace it with something better.\n\n        return root;\n      }\n\n      var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {\n        var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n        try {\n          func.apply(context, funcArgs);\n        } catch (error) {\n          this.onError(error);\n        }\n      };\n\n      {\n        // In DEV mode, we swap out invokeGuardedCallback for a special version\n        // that plays more nicely with the browser's DevTools. The idea is to preserve\n        // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n        // functions in invokeGuardedCallback, and the production version of\n        // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n        // like caught exceptions, and the DevTools won't pause unless the developer\n        // takes the extra step of enabling pause on caught exceptions. This is\n        // untintuitive, though, because even though React has caught the error, from\n        // the developer's perspective, the error is uncaught.\n        //\n        // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n        // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n        // DOM node, and call the user-provided callback from inside an event handler\n        // for that fake event. If the callback throws, the error is \"captured\" using\n        // a global event handler. But because the error happens in a different\n        // event loop context, it does not interrupt the normal program flow.\n        // Effectively, this gives us try-catch behavior without actually using\n        // try-catch. Neat!\n        // Check that the browser supports the APIs we need to implement our special\n        // DEV version of invokeGuardedCallback\n        if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n          var fakeNode = document.createElement('react');\n\n          var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {\n            // If document doesn't exist we know for sure we will crash in this method\n            // when we call document.createEvent(). However this can cause confusing\n            // errors: https://github.com/facebookincubator/create-react-app/issues/3482\n            // So we preemptively throw with a better message instead.\n            !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;\n            var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We\n            // set this to true at the beginning, then set it to false right after\n            // calling the function. If the function errors, `didError` will never be\n            // set to false. This strategy works even if the browser is flaky and\n            // fails to call our global error handler, because it doesn't rely on\n            // the error event at all.\n\n            var didError = true; // Keeps track of the value of window.event so that we can reset it\n            // during the callback to let user code access window.event in the\n            // browsers that support it.\n\n            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n            // dispatching: https://github.com/facebook/react/issues/13688\n\n            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously\n            // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n            // call the user-provided callback.\n\n            var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n            function callCallback() {\n              // We immediately remove the callback from event listeners so that\n              // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n              // nested call would trigger the fake event handlers of any call higher\n              // in the stack.\n              fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n              // window.event assignment in both IE <= 10 as they throw an error\n              // \"Member not found\" in strict mode, and in Firefox which does not\n              // support window.event.\n\n              if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n                window.event = windowEvent;\n              }\n\n              func.apply(context, funcArgs);\n              didError = false;\n            } // Create a global error event handler. We use this to capture the value\n            // that was thrown. It's possible that this error handler will fire more\n            // than once; for example, if non-React code also calls `dispatchEvent`\n            // and a handler for that event throws. We should be resilient to most of\n            // those cases. Even if our error event handler fires more than once, the\n            // last error event is always used. If the callback actually does error,\n            // we know that the last error event is the correct one, because it's not\n            // possible for anything else to have happened in between our callback\n            // erroring and the code that follows the `dispatchEvent` call below. If\n            // the callback doesn't error, but the error event was fired, we know to\n            // ignore it because `didError` will be false, as described above.\n\n\n            var error = void 0; // Use this to track whether the error event is ever called.\n\n            var didSetError = false;\n            var isCrossOriginError = false;\n\n            function handleWindowError(event) {\n              error = event.error;\n              didSetError = true;\n\n              if (error === null && event.colno === 0 && event.lineno === 0) {\n                isCrossOriginError = true;\n              }\n\n              if (event.defaultPrevented) {\n                // Some other error handler has prevented default.\n                // Browsers silence the error report if this happens.\n                // We'll remember this to later decide whether to log it or not.\n                if (error != null && typeof error === 'object') {\n                  try {\n                    error._suppressLogging = true;\n                  } catch (inner) {// Ignore.\n                  }\n                }\n              }\n            } // Create a fake event type.\n\n\n            var evtType = 'react-' + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n            window.addEventListener('error', handleWindowError);\n            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n            // errors, it will trigger our global error handler.\n\n            evt.initEvent(evtType, false, false);\n            fakeNode.dispatchEvent(evt);\n\n            if (windowEventDescriptor) {\n              Object.defineProperty(window, 'event', windowEventDescriptor);\n            }\n\n            if (didError) {\n              if (!didSetError) {\n                // The callback errored, but the error event never fired.\n                error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n              } else if (isCrossOriginError) {\n                error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');\n              }\n\n              this.onError(error);\n            } // Remove our event listeners\n\n\n            window.removeEventListener('error', handleWindowError);\n          };\n\n          invokeGuardedCallbackImpl = invokeGuardedCallbackDev;\n        }\n      }\n      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl; // Used by Fiber to simulate a try-catch.\n\n      var hasError = false;\n      var caughtError = null;\n      var reporter = {\n        onError: function (error) {\n          hasError = true;\n          caughtError = error;\n        }\n      };\n      /**\n       * Call a function while guarding against errors that happens within it.\n       * Returns an error if it throws, otherwise null.\n       *\n       * In production, this is implemented using a try-catch. The reason we don't\n       * use a try-catch directly is so that we can swap out a different\n       * implementation in DEV mode.\n       *\n       * @param {String} name of the guard to use for logging or debugging\n       * @param {Function} func The function to invoke\n       * @param {*} context The context to use when calling the function\n       * @param {...*} args Arguments for function\n       */\n\n      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n        hasError = false;\n        caughtError = null;\n        invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n      }\n      /**\n       * Same as invokeGuardedCallback, but instead of returning an error, it stores\n       * it in a global so it can be rethrown by `rethrowCaughtError` later.\n       * TODO: See if caughtError and rethrowError can be unified.\n       *\n       * @param {String} name of the guard to use for logging or debugging\n       * @param {Function} func The function to invoke\n       * @param {*} context The context to use when calling the function\n       * @param {...*} args Arguments for function\n       */\n\n      /**\n       * During execution of guarded functions we will capture the first error which\n       * we will rethrow to be handled by the top level error handler.\n       */\n\n\n      function hasCaughtError() {\n        return hasError;\n      }\n\n      function clearCaughtError() {\n        if (hasError) {\n          var error = caughtError;\n          hasError = false;\n          caughtError = null;\n          return error;\n        } else {\n          invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');\n        }\n      }\n      /**\n       * Forked from fbjs/warning:\n       * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n       *\n       * Only change is we use console.warn instead of console.error,\n       * and do nothing when 'console' is not supported.\n       * This really simplifies the code.\n       * ---\n       * Similar to invariant but only logs a warning if the condition is not met.\n       * This can be used to log issues in development environments in critical\n       * paths. Removing the logging code for production environments will keep the\n       * same logic and follow the same code paths.\n       */\n\n\n      var lowPriorityWarning = function () {};\n\n      {\n        var printWarning = function (format) {\n          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          var argIndex = 0;\n          var message = 'Warning: ' + format.replace(/%s/g, function () {\n            return args[argIndex++];\n          });\n\n          if (typeof console !== 'undefined') {\n            console.warn(message);\n          }\n\n          try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message);\n          } catch (x) {}\n        };\n\n        lowPriorityWarning = function (condition, format) {\n          if (format === undefined) {\n            throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');\n          }\n\n          if (!condition) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n              args[_key2 - 2] = arguments[_key2];\n            }\n\n            printWarning.apply(undefined, [format].concat(args));\n          }\n        };\n      }\n      var lowPriorityWarning$1 = lowPriorityWarning;\n      var ReactStrictModeWarnings = {\n        discardPendingWarnings: function () {},\n        flushPendingDeprecationWarnings: function () {},\n        flushPendingUnsafeLifecycleWarnings: function () {},\n        recordDeprecationWarnings: function (fiber, instance) {},\n        recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n        recordLegacyContextWarning: function (fiber, instance) {},\n        flushLegacyContextWarning: function () {}\n      };\n      {\n        var LIFECYCLE_SUGGESTIONS = {\n          UNSAFE_componentWillMount: 'componentDidMount',\n          UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',\n          UNSAFE_componentWillUpdate: 'componentDidUpdate'\n        };\n        var pendingComponentWillMountWarnings = [];\n        var pendingComponentWillReceivePropsWarnings = [];\n        var pendingComponentWillUpdateWarnings = [];\n        var pendingUnsafeLifecycleWarnings = new Map();\n        var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n        var didWarnAboutDeprecatedLifecycles = new Set();\n        var didWarnAboutUnsafeLifecycles = new Set();\n        var didWarnAboutLegacyContext = new Set();\n\n        var setToSortedString = function (set) {\n          var array = [];\n          set.forEach(function (value) {\n            array.push(value);\n          });\n          return array.sort().join(', ');\n        };\n\n        ReactStrictModeWarnings.discardPendingWarnings = function () {\n          pendingComponentWillMountWarnings = [];\n          pendingComponentWillReceivePropsWarnings = [];\n          pendingComponentWillUpdateWarnings = [];\n          pendingUnsafeLifecycleWarnings = new Map();\n          pendingLegacyContextWarning = new Map();\n        };\n\n        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n          pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {\n            var lifecyclesWarningMesages = [];\n            Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {\n              var lifecycleWarnings = lifecycleWarningsMap[lifecycle];\n\n              if (lifecycleWarnings.length > 0) {\n                var componentNames = new Set();\n                lifecycleWarnings.forEach(function (fiber) {\n                  componentNames.add(getComponentName(fiber.type) || 'Component');\n                  didWarnAboutUnsafeLifecycles.add(fiber.type);\n                });\n                var formatted = lifecycle.replace('UNSAFE_', '');\n                var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];\n                var sortedComponentNames = setToSortedString(componentNames);\n                lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));\n              }\n            });\n\n            if (lifecyclesWarningMesages.length > 0) {\n              var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);\n              warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\\n\\n%s' + '\\n\\nLearn more about this warning here:' + '\\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\\n\\n'));\n            }\n          });\n          pendingUnsafeLifecycleWarnings = new Map();\n        };\n\n        var findStrictRoot = function (fiber) {\n          var maybeStrictRoot = null;\n          var node = fiber;\n\n          while (node !== null) {\n            if (node.mode & StrictMode) {\n              maybeStrictRoot = node;\n            }\n\n            node = node.return;\n          }\n\n          return maybeStrictRoot;\n        };\n\n        ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {\n          if (pendingComponentWillMountWarnings.length > 0) {\n            var uniqueNames = new Set();\n            pendingComponentWillMountWarnings.forEach(function (fiber) {\n              uniqueNames.add(getComponentName(fiber.type) || 'Component');\n              didWarnAboutDeprecatedLifecycles.add(fiber.type);\n            });\n            var sortedNames = setToSortedString(uniqueNames);\n            lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here:' + '\\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);\n            pendingComponentWillMountWarnings = [];\n          }\n\n          if (pendingComponentWillReceivePropsWarnings.length > 0) {\n            var _uniqueNames = new Set();\n\n            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n              _uniqueNames.add(getComponentName(fiber.type) || 'Component');\n\n              didWarnAboutDeprecatedLifecycles.add(fiber.type);\n            });\n\n            var _sortedNames = setToSortedString(_uniqueNames);\n\n            lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here:' + '\\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);\n            pendingComponentWillReceivePropsWarnings = [];\n          }\n\n          if (pendingComponentWillUpdateWarnings.length > 0) {\n            var _uniqueNames2 = new Set();\n\n            pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n              _uniqueNames2.add(getComponentName(fiber.type) || 'Component');\n\n              didWarnAboutDeprecatedLifecycles.add(fiber.type);\n            });\n\n            var _sortedNames2 = setToSortedString(_uniqueNames2);\n\n            lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here:' + '\\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);\n            pendingComponentWillUpdateWarnings = [];\n          }\n        };\n\n        ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {\n          // Dedup strategy: Warn once per component.\n          if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {\n            return;\n          } // Don't warn about react-lifecycles-compat polyfilled components.\n\n\n          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n            pendingComponentWillMountWarnings.push(fiber);\n          }\n\n          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n            pendingComponentWillReceivePropsWarnings.push(fiber);\n          }\n\n          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n            pendingComponentWillUpdateWarnings.push(fiber);\n          }\n        };\n\n        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n          var strictRoot = findStrictRoot(fiber);\n\n          if (strictRoot === null) {\n            warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n            return;\n          } // Dedup strategy: Warn once per component.\n          // This is difficult to track any other way since component names\n          // are often vague and are likely to collide between 3rd party libraries.\n          // An expand property is probably okay to use here since it's DEV-only,\n          // and will only be set in the event of serious warnings.\n\n\n          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n            return;\n          }\n\n          var warningsForRoot = void 0;\n\n          if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {\n            warningsForRoot = {\n              UNSAFE_componentWillMount: [],\n              UNSAFE_componentWillReceiveProps: [],\n              UNSAFE_componentWillUpdate: []\n            };\n            pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);\n          } else {\n            warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);\n          }\n\n          var unsafeLifecycles = [];\n\n          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {\n            unsafeLifecycles.push('UNSAFE_componentWillMount');\n          }\n\n          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n            unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');\n          }\n\n          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {\n            unsafeLifecycles.push('UNSAFE_componentWillUpdate');\n          }\n\n          if (unsafeLifecycles.length > 0) {\n            unsafeLifecycles.forEach(function (lifecycle) {\n              warningsForRoot[lifecycle].push(fiber);\n            });\n          }\n        };\n\n        ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n          var strictRoot = findStrictRoot(fiber);\n\n          if (strictRoot === null) {\n            warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n            return;\n          } // Dedup strategy: Warn once per component.\n\n\n          if (didWarnAboutLegacyContext.has(fiber.type)) {\n            return;\n          }\n\n          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n            if (warningsForRoot === undefined) {\n              warningsForRoot = [];\n              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n            }\n\n            warningsForRoot.push(fiber);\n          }\n        };\n\n        ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n          pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n            var uniqueNames = new Set();\n            fiberArray.forEach(function (fiber) {\n              uniqueNames.add(getComponentName(fiber.type) || 'Component');\n              didWarnAboutLegacyContext.add(fiber.type);\n            });\n            var sortedNames = setToSortedString(uniqueNames);\n            var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);\n            warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here:' + '\\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);\n          });\n        };\n      } // TODO: Offscreen updates should never suspend. However, a promise that\n      // suspended inside an offscreen subtree should be able to ping at the priority\n      // of the outer render.\n\n      function markPendingPriorityLevel(root, expirationTime) {\n        // If there's a gap between completing a failed root and retrying it,\n        // additional updates may be scheduled. Clear `didError`, in case the update\n        // is sufficient to fix the error.\n        root.didError = false; // Update the latest and earliest pending times\n\n        var earliestPendingTime = root.earliestPendingTime;\n\n        if (earliestPendingTime === NoWork) {\n          // No other pending updates.\n          root.earliestPendingTime = root.latestPendingTime = expirationTime;\n        } else {\n          if (earliestPendingTime < expirationTime) {\n            // This is the earliest pending update.\n            root.earliestPendingTime = expirationTime;\n          } else {\n            var latestPendingTime = root.latestPendingTime;\n\n            if (latestPendingTime > expirationTime) {\n              // This is the latest pending update\n              root.latestPendingTime = expirationTime;\n            }\n          }\n        }\n\n        findNextExpirationTimeToWorkOn(expirationTime, root);\n      }\n\n      function markCommittedPriorityLevels(root, earliestRemainingTime) {\n        root.didError = false;\n\n        if (earliestRemainingTime === NoWork) {\n          // Fast path. There's no remaining work. Clear everything.\n          root.earliestPendingTime = NoWork;\n          root.latestPendingTime = NoWork;\n          root.earliestSuspendedTime = NoWork;\n          root.latestSuspendedTime = NoWork;\n          root.latestPingedTime = NoWork;\n          findNextExpirationTimeToWorkOn(NoWork, root);\n          return;\n        } // Let's see if the previous latest known pending level was just flushed.\n\n\n        var latestPendingTime = root.latestPendingTime;\n\n        if (latestPendingTime !== NoWork) {\n          if (latestPendingTime > earliestRemainingTime) {\n            // We've flushed all the known pending levels.\n            root.earliestPendingTime = root.latestPendingTime = NoWork;\n          } else {\n            var earliestPendingTime = root.earliestPendingTime;\n\n            if (earliestPendingTime > earliestRemainingTime) {\n              // We've flushed the earliest known pending level. Set this to the\n              // latest pending time.\n              root.earliestPendingTime = root.latestPendingTime;\n            }\n          }\n        } // Now let's handle the earliest remaining level in the whole tree. We need to\n        // decide whether to treat it as a pending level or as suspended. Check\n        // it falls within the range of known suspended levels.\n\n\n        var earliestSuspendedTime = root.earliestSuspendedTime;\n\n        if (earliestSuspendedTime === NoWork) {\n          // There's no suspended work. Treat the earliest remaining level as a\n          // pending level.\n          markPendingPriorityLevel(root, earliestRemainingTime);\n          findNextExpirationTimeToWorkOn(NoWork, root);\n          return;\n        }\n\n        var latestSuspendedTime = root.latestSuspendedTime;\n\n        if (earliestRemainingTime < latestSuspendedTime) {\n          // The earliest remaining level is later than all the suspended work. That\n          // means we've flushed all the suspended work.\n          root.earliestSuspendedTime = NoWork;\n          root.latestSuspendedTime = NoWork;\n          root.latestPingedTime = NoWork; // There's no suspended work. Treat the earliest remaining level as a\n          // pending level.\n\n          markPendingPriorityLevel(root, earliestRemainingTime);\n          findNextExpirationTimeToWorkOn(NoWork, root);\n          return;\n        }\n\n        if (earliestRemainingTime > earliestSuspendedTime) {\n          // The earliest remaining time is earlier than all the suspended work.\n          // Treat it as a pending update.\n          markPendingPriorityLevel(root, earliestRemainingTime);\n          findNextExpirationTimeToWorkOn(NoWork, root);\n          return;\n        } // The earliest remaining time falls within the range of known suspended\n        // levels. We should treat this as suspended work.\n\n\n        findNextExpirationTimeToWorkOn(NoWork, root);\n      }\n\n      function hasLowerPriorityWork(root, erroredExpirationTime) {\n        var latestPendingTime = root.latestPendingTime;\n        var latestSuspendedTime = root.latestSuspendedTime;\n        var latestPingedTime = root.latestPingedTime;\n        return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;\n      }\n\n      function isPriorityLevelSuspended(root, expirationTime) {\n        var earliestSuspendedTime = root.earliestSuspendedTime;\n        var latestSuspendedTime = root.latestSuspendedTime;\n        return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;\n      }\n\n      function markSuspendedPriorityLevel(root, suspendedTime) {\n        root.didError = false;\n        clearPing(root, suspendedTime); // First, check the known pending levels and update them if needed.\n\n        var earliestPendingTime = root.earliestPendingTime;\n        var latestPendingTime = root.latestPendingTime;\n\n        if (earliestPendingTime === suspendedTime) {\n          if (latestPendingTime === suspendedTime) {\n            // Both known pending levels were suspended. Clear them.\n            root.earliestPendingTime = root.latestPendingTime = NoWork;\n          } else {\n            // The earliest pending level was suspended. Clear by setting it to the\n            // latest pending level.\n            root.earliestPendingTime = latestPendingTime;\n          }\n        } else if (latestPendingTime === suspendedTime) {\n          // The latest pending level was suspended. Clear by setting it to the\n          // latest pending level.\n          root.latestPendingTime = earliestPendingTime;\n        } // Finally, update the known suspended levels.\n\n\n        var earliestSuspendedTime = root.earliestSuspendedTime;\n        var latestSuspendedTime = root.latestSuspendedTime;\n\n        if (earliestSuspendedTime === NoWork) {\n          // No other suspended levels.\n          root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;\n        } else {\n          if (earliestSuspendedTime < suspendedTime) {\n            // This is the earliest suspended level.\n            root.earliestSuspendedTime = suspendedTime;\n          } else if (latestSuspendedTime > suspendedTime) {\n            // This is the latest suspended level\n            root.latestSuspendedTime = suspendedTime;\n          }\n        }\n\n        findNextExpirationTimeToWorkOn(suspendedTime, root);\n      }\n\n      function markPingedPriorityLevel(root, pingedTime) {\n        root.didError = false; // TODO: When we add back resuming, we need to ensure the progressed work\n        // is thrown out and not reused during the restarted render. One way to\n        // invalidate the progressed work is to restart at expirationTime + 1.\n\n        var latestPingedTime = root.latestPingedTime;\n\n        if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {\n          root.latestPingedTime = pingedTime;\n        }\n\n        findNextExpirationTimeToWorkOn(pingedTime, root);\n      }\n\n      function clearPing(root, completedTime) {\n        // TODO: Track whether the root was pinged during the render phase. If so,\n        // we need to make sure we don't lose track of it.\n        var latestPingedTime = root.latestPingedTime;\n\n        if (latestPingedTime !== NoWork && latestPingedTime >= completedTime) {\n          root.latestPingedTime = NoWork;\n        }\n      }\n\n      function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {\n        var earliestExpirationTime = renderExpirationTime;\n        var earliestPendingTime = root.earliestPendingTime;\n        var earliestSuspendedTime = root.earliestSuspendedTime;\n\n        if (earliestPendingTime > earliestExpirationTime) {\n          earliestExpirationTime = earliestPendingTime;\n        }\n\n        if (earliestSuspendedTime > earliestExpirationTime) {\n          earliestExpirationTime = earliestSuspendedTime;\n        }\n\n        return earliestExpirationTime;\n      }\n\n      function didExpireAtExpirationTime(root, currentTime) {\n        var expirationTime = root.expirationTime;\n\n        if (expirationTime !== NoWork && currentTime <= expirationTime) {\n          // The root has expired. Flush all work up to the current time.\n          root.nextExpirationTimeToWorkOn = currentTime;\n        }\n      }\n\n      function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {\n        var earliestSuspendedTime = root.earliestSuspendedTime;\n        var latestSuspendedTime = root.latestSuspendedTime;\n        var earliestPendingTime = root.earliestPendingTime;\n        var latestPingedTime = root.latestPingedTime; // Work on the earliest pending time. Failing that, work on the latest\n        // pinged time.\n\n        var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime; // If there is no pending or pinged work, check if there's suspended work\n        // that's lower priority than what we just completed.\n\n        if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {\n          // The lowest priority suspended work is the work most likely to be\n          // committed next. Let's start rendering it again, so that if it times out,\n          // it's ready to commit.\n          nextExpirationTimeToWorkOn = latestSuspendedTime;\n        }\n\n        var expirationTime = nextExpirationTimeToWorkOn;\n\n        if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {\n          // Expire using the earliest known expiration time.\n          expirationTime = earliestSuspendedTime;\n        }\n\n        root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;\n        root.expirationTime = expirationTime;\n      } // UpdateQueue is a linked list of prioritized updates.\n      //\n      // Like fibers, update queues come in pairs: a current queue, which represents\n      // the visible state of the screen, and a work-in-progress queue, which is\n      // can be mutated and processed asynchronously before it is committed — a form\n      // of double buffering. If a work-in-progress render is discarded before\n      // finishing, we create a new work-in-progress by cloning the current queue.\n      //\n      // Both queues share a persistent, singly-linked list structure. To schedule an\n      // update, we append it to the end of both queues. Each queue maintains a\n      // pointer to first update in the persistent list that hasn't been processed.\n      // The work-in-progress pointer always has a position equal to or greater than\n      // the current queue, since we always work on that one. The current queue's\n      // pointer is only updated during the commit phase, when we swap in the\n      // work-in-progress.\n      //\n      // For example:\n      //\n      //   Current pointer:           A - B - C - D - E - F\n      //   Work-in-progress pointer:              D - E - F\n      //                                          ^\n      //                                          The work-in-progress queue has\n      //                                          processed more updates than current.\n      //\n      // The reason we append to both queues is because otherwise we might drop\n      // updates without ever processing them. For example, if we only add updates to\n      // the work-in-progress queue, some updates could be lost whenever a work-in\n      // -progress render restarts by cloning from current. Similarly, if we only add\n      // updates to the current queue, the updates will be lost whenever an already\n      // in-progress queue commits and swaps with the current queue. However, by\n      // adding to both queues, we guarantee that the update will be part of the next\n      // work-in-progress. (And because the work-in-progress queue becomes the\n      // current queue once it commits, there's no danger of applying the same\n      // update twice.)\n      //\n      // Prioritization\n      // --------------\n      //\n      // Updates are not sorted by priority, but by insertion; new updates are always\n      // appended to the end of the list.\n      //\n      // The priority is still important, though. When processing the update queue\n      // during the render phase, only the updates with sufficient priority are\n      // included in the result. If we skip an update because it has insufficient\n      // priority, it remains in the queue to be processed later, during a lower\n      // priority render. Crucially, all updates subsequent to a skipped update also\n      // remain in the queue *regardless of their priority*. That means high priority\n      // updates are sometimes processed twice, at two separate priorities. We also\n      // keep track of a base state, that represents the state before the first\n      // update in the queue is applied.\n      //\n      // For example:\n      //\n      //   Given a base state of '', and the following queue of updates\n      //\n      //     A1 - B2 - C1 - D2\n      //\n      //   where the number indicates the priority, and the update is applied to the\n      //   previous state by appending a letter, React will process these updates as\n      //   two separate renders, one per distinct priority level:\n      //\n      //   First render, at priority 1:\n      //     Base state: ''\n      //     Updates: [A1, C1]\n      //     Result state: 'AC'\n      //\n      //   Second render, at priority 2:\n      //     Base state: 'A'            <-  The base state does not include C1,\n      //                                    because B2 was skipped.\n      //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n      //     Result state: 'ABCD'\n      //\n      // Because we process updates in insertion order, and rebase high priority\n      // updates when preceding updates are skipped, the final result is deterministic\n      // regardless of priority. Intermediate state may vary according to system\n      // resources, but the final state is always the same.\n\n\n      var UpdateState = 0;\n      var ReplaceState = 1;\n      var ForceUpdate = 2;\n      var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n      // It should only be read right after calling `processUpdateQueue`, via\n      // `checkHasForceUpdateAfterProcessing`.\n\n      var hasForceUpdate = false;\n      var didWarnUpdateInsideUpdate = void 0;\n      var currentlyProcessingQueue = void 0;\n      var resetCurrentlyProcessingQueue = void 0;\n      {\n        didWarnUpdateInsideUpdate = false;\n        currentlyProcessingQueue = null;\n\n        resetCurrentlyProcessingQueue = function () {\n          currentlyProcessingQueue = null;\n        };\n      }\n\n      function createUpdateQueue(baseState) {\n        var queue = {\n          baseState: baseState,\n          firstUpdate: null,\n          lastUpdate: null,\n          firstCapturedUpdate: null,\n          lastCapturedUpdate: null,\n          firstEffect: null,\n          lastEffect: null,\n          firstCapturedEffect: null,\n          lastCapturedEffect: null\n        };\n        return queue;\n      }\n\n      function cloneUpdateQueue(currentQueue) {\n        var queue = {\n          baseState: currentQueue.baseState,\n          firstUpdate: currentQueue.firstUpdate,\n          lastUpdate: currentQueue.lastUpdate,\n          // TODO: With resuming, if we bail out and resuse the child tree, we should\n          // keep these effects.\n          firstCapturedUpdate: null,\n          lastCapturedUpdate: null,\n          firstEffect: null,\n          lastEffect: null,\n          firstCapturedEffect: null,\n          lastCapturedEffect: null\n        };\n        return queue;\n      }\n\n      function createUpdate(expirationTime) {\n        return {\n          expirationTime: expirationTime,\n          tag: UpdateState,\n          payload: null,\n          callback: null,\n          next: null,\n          nextEffect: null\n        };\n      }\n\n      function appendUpdateToQueue(queue, update) {\n        // Append the update to the end of the list.\n        if (queue.lastUpdate === null) {\n          // Queue is empty\n          queue.firstUpdate = queue.lastUpdate = update;\n        } else {\n          queue.lastUpdate.next = update;\n          queue.lastUpdate = update;\n        }\n      }\n\n      function enqueueUpdate(fiber, update) {\n        // Update queues are created lazily.\n        var alternate = fiber.alternate;\n        var queue1 = void 0;\n        var queue2 = void 0;\n\n        if (alternate === null) {\n          // There's only one fiber.\n          queue1 = fiber.updateQueue;\n          queue2 = null;\n\n          if (queue1 === null) {\n            queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);\n          }\n        } else {\n          // There are two owners.\n          queue1 = fiber.updateQueue;\n          queue2 = alternate.updateQueue;\n\n          if (queue1 === null) {\n            if (queue2 === null) {\n              // Neither fiber has an update queue. Create new ones.\n              queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);\n              queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);\n            } else {\n              // Only one fiber has an update queue. Clone to create a new one.\n              queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);\n            }\n          } else {\n            if (queue2 === null) {\n              // Only one fiber has an update queue. Clone to create a new one.\n              queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);\n            }\n          }\n        }\n\n        if (queue2 === null || queue1 === queue2) {\n          // There's only a single queue.\n          appendUpdateToQueue(queue1, update);\n        } else {\n          // There are two queues. We need to append the update to both queues,\n          // while accounting for the persistent structure of the list — we don't\n          // want the same update to be added multiple times.\n          if (queue1.lastUpdate === null || queue2.lastUpdate === null) {\n            // One of the queues is not empty. We must add the update to both queues.\n            appendUpdateToQueue(queue1, update);\n            appendUpdateToQueue(queue2, update);\n          } else {\n            // Both queues are non-empty. The last update is the same in both lists,\n            // because of structural sharing. So, only append to one of the lists.\n            appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.\n\n            queue2.lastUpdate = update;\n          }\n        }\n\n        {\n          if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {\n            warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n            didWarnUpdateInsideUpdate = true;\n          }\n        }\n      }\n\n      function enqueueCapturedUpdate(workInProgress, update) {\n        // Captured updates go into a separate list, and only on the work-in-\n        // progress queue.\n        var workInProgressQueue = workInProgress.updateQueue;\n\n        if (workInProgressQueue === null) {\n          workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);\n        } else {\n          // TODO: I put this here rather than createWorkInProgress so that we don't\n          // clone the queue unnecessarily. There's probably a better way to\n          // structure this.\n          workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);\n        } // Append the update to the end of the list.\n\n\n        if (workInProgressQueue.lastCapturedUpdate === null) {\n          // This is the first render phase update\n          workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;\n        } else {\n          workInProgressQueue.lastCapturedUpdate.next = update;\n          workInProgressQueue.lastCapturedUpdate = update;\n        }\n      }\n\n      function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {\n        var current = workInProgress.alternate;\n\n        if (current !== null) {\n          // If the work-in-progress queue is equal to the current queue,\n          // we need to clone it first.\n          if (queue === current.updateQueue) {\n            queue = workInProgress.updateQueue = cloneUpdateQueue(queue);\n          }\n        }\n\n        return queue;\n      }\n\n      function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n        switch (update.tag) {\n          case ReplaceState:\n            {\n              var _payload = update.payload;\n\n              if (typeof _payload === 'function') {\n                // Updater function\n                {\n                  if (workInProgress.mode & StrictMode) {\n                    _payload.call(instance, prevState, nextProps);\n                  }\n                }\n                return _payload.call(instance, prevState, nextProps);\n              } // State object\n\n\n              return _payload;\n            }\n\n          case CaptureUpdate:\n            {\n              workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;\n            }\n          // Intentional fallthrough\n\n          case UpdateState:\n            {\n              var _payload2 = update.payload;\n              var partialState = void 0;\n\n              if (typeof _payload2 === 'function') {\n                // Updater function\n                {\n                  if (workInProgress.mode & StrictMode) {\n                    _payload2.call(instance, prevState, nextProps);\n                  }\n                }\n                partialState = _payload2.call(instance, prevState, nextProps);\n              } else {\n                // Partial state object\n                partialState = _payload2;\n              }\n\n              if (partialState === null || partialState === undefined) {\n                // Null and undefined are treated as no-ops.\n                return prevState;\n              } // Merge the partial state and the previous state.\n\n\n              return _assign({}, prevState, partialState);\n            }\n\n          case ForceUpdate:\n            {\n              hasForceUpdate = true;\n              return prevState;\n            }\n        }\n\n        return prevState;\n      }\n\n      function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {\n        hasForceUpdate = false;\n        queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);\n        {\n          currentlyProcessingQueue = queue;\n        } // These values may change as we process the queue.\n\n        var newBaseState = queue.baseState;\n        var newFirstUpdate = null;\n        var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.\n\n        var update = queue.firstUpdate;\n        var resultState = newBaseState;\n\n        while (update !== null) {\n          var updateExpirationTime = update.expirationTime;\n\n          if (updateExpirationTime < renderExpirationTime) {\n            // This update does not have sufficient priority. Skip it.\n            if (newFirstUpdate === null) {\n              // This is the first skipped update. It will be the first update in\n              // the new list.\n              newFirstUpdate = update; // Since this is the first update that was skipped, the current result\n              // is the new base state.\n\n              newBaseState = resultState;\n            } // Since this update will remain in the list, update the remaining\n            // expiration time.\n\n\n            if (newExpirationTime < updateExpirationTime) {\n              newExpirationTime = updateExpirationTime;\n            }\n          } else {\n            // This update does have sufficient priority. Process it and compute\n            // a new result.\n            resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);\n            var _callback = update.callback;\n\n            if (_callback !== null) {\n              workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.\n\n              update.nextEffect = null;\n\n              if (queue.lastEffect === null) {\n                queue.firstEffect = queue.lastEffect = update;\n              } else {\n                queue.lastEffect.nextEffect = update;\n                queue.lastEffect = update;\n              }\n            }\n          } // Continue to the next update.\n\n\n          update = update.next;\n        } // Separately, iterate though the list of captured updates.\n\n\n        var newFirstCapturedUpdate = null;\n        update = queue.firstCapturedUpdate;\n\n        while (update !== null) {\n          var _updateExpirationTime = update.expirationTime;\n\n          if (_updateExpirationTime < renderExpirationTime) {\n            // This update does not have sufficient priority. Skip it.\n            if (newFirstCapturedUpdate === null) {\n              // This is the first skipped captured update. It will be the first\n              // update in the new list.\n              newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is\n              // the new base state.\n\n              if (newFirstUpdate === null) {\n                newBaseState = resultState;\n              }\n            } // Since this update will remain in the list, update the remaining\n            // expiration time.\n\n\n            if (newExpirationTime < _updateExpirationTime) {\n              newExpirationTime = _updateExpirationTime;\n            }\n          } else {\n            // This update does have sufficient priority. Process it and compute\n            // a new result.\n            resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);\n            var _callback2 = update.callback;\n\n            if (_callback2 !== null) {\n              workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.\n\n              update.nextEffect = null;\n\n              if (queue.lastCapturedEffect === null) {\n                queue.firstCapturedEffect = queue.lastCapturedEffect = update;\n              } else {\n                queue.lastCapturedEffect.nextEffect = update;\n                queue.lastCapturedEffect = update;\n              }\n            }\n          }\n\n          update = update.next;\n        }\n\n        if (newFirstUpdate === null) {\n          queue.lastUpdate = null;\n        }\n\n        if (newFirstCapturedUpdate === null) {\n          queue.lastCapturedUpdate = null;\n        } else {\n          workInProgress.effectTag |= Callback;\n        }\n\n        if (newFirstUpdate === null && newFirstCapturedUpdate === null) {\n          // We processed every update, without skipping. That means the new base\n          // state is the same as the result state.\n          newBaseState = resultState;\n        }\n\n        queue.baseState = newBaseState;\n        queue.firstUpdate = newFirstUpdate;\n        queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.\n        // This should be fine because the only two other things that contribute to\n        // expiration time are props and context. We're already in the middle of the\n        // begin phase by the time we start processing the queue, so we've already\n        // dealt with the props. Context in components that specify\n        // shouldComponentUpdate is tricky; but we'll have to account for\n        // that regardless.\n\n        workInProgress.expirationTime = newExpirationTime;\n        workInProgress.memoizedState = resultState;\n        {\n          currentlyProcessingQueue = null;\n        }\n      }\n\n      function callCallback(callback, context) {\n        !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;\n        callback.call(context);\n      }\n\n      function resetHasForceUpdateBeforeProcessing() {\n        hasForceUpdate = false;\n      }\n\n      function checkHasForceUpdateAfterProcessing() {\n        return hasForceUpdate;\n      }\n\n      function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {\n        // If the finished render included captured updates, and there are still\n        // lower priority updates left over, we need to keep the captured updates\n        // in the queue so that they are rebased and not dropped once we process the\n        // queue again at the lower priority.\n        if (finishedQueue.firstCapturedUpdate !== null) {\n          // Join the captured update list to the end of the normal list.\n          if (finishedQueue.lastUpdate !== null) {\n            finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;\n            finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;\n          } // Clear the list of captured updates.\n\n\n          finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;\n        } // Commit the effects\n\n\n        commitUpdateEffects(finishedQueue.firstEffect, instance);\n        finishedQueue.firstEffect = finishedQueue.lastEffect = null;\n        commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);\n        finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;\n      }\n\n      function commitUpdateEffects(effect, instance) {\n        while (effect !== null) {\n          var _callback3 = effect.callback;\n\n          if (_callback3 !== null) {\n            effect.callback = null;\n            callCallback(_callback3, instance);\n          }\n\n          effect = effect.nextEffect;\n        }\n      }\n\n      function createCapturedValue(value, source) {\n        // If the value is an error, call this function immediately after it is thrown\n        // so the stack is accurate.\n        return {\n          value: value,\n          source: source,\n          stack: getStackByFiberInDevAndProd(source)\n        };\n      }\n      /**\n       * Similar to invariant but only logs a warning if the condition is not met.\n       * This can be used to log issues in development environments in critical\n       * paths. Removing the logging code for production environments will keep the\n       * same logic and follow the same code paths.\n       */\n\n\n      var warning = warningWithoutStack$1;\n      {\n        warning = function (condition, format) {\n          if (condition) {\n            return;\n          }\n\n          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n          var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args\n\n          for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = arguments[_key];\n          }\n\n          warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));\n        };\n      }\n      var warning$1 = warning;\n      var valueCursor = createCursor(null);\n      var rendererSigil = void 0;\n      {\n        // Use this to detect multiple renderers using the same context\n        rendererSigil = {};\n      }\n      var currentlyRenderingFiber = null;\n      var lastContextDependency = null;\n      var lastContextWithAllBitsObserved = null;\n\n      function resetContextDependences() {\n        // This is called right before React yields execution, to ensure `readContext`\n        // cannot be called outside the render phase.\n        currentlyRenderingFiber = null;\n        lastContextDependency = null;\n        lastContextWithAllBitsObserved = null;\n      }\n\n      function pushProvider(providerFiber, nextValue) {\n        var context = providerFiber.type._context;\n\n        if (isPrimaryRenderer) {\n          push(valueCursor, context._currentValue, providerFiber);\n          context._currentValue = nextValue;\n          {\n            !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;\n            context._currentRenderer = rendererSigil;\n          }\n        } else {\n          push(valueCursor, context._currentValue2, providerFiber);\n          context._currentValue2 = nextValue;\n          {\n            !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;\n            context._currentRenderer2 = rendererSigil;\n          }\n        }\n      }\n\n      function popProvider(providerFiber) {\n        var currentValue = valueCursor.current;\n        pop(valueCursor, providerFiber);\n        var context = providerFiber.type._context;\n\n        if (isPrimaryRenderer) {\n          context._currentValue = currentValue;\n        } else {\n          context._currentValue2 = currentValue;\n        }\n      }\n\n      function calculateChangedBits(context, newValue, oldValue) {\n        // Use Object.is to compare the new context value to the old value. Inlined\n        // Object.is polyfill.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n        if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare\n        ) {\n            // No change\n            return 0;\n          } else {\n          var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;\n          {\n            !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;\n          }\n          return changedBits | 0;\n        }\n      }\n\n      function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {\n        var fiber = workInProgress.child;\n\n        if (fiber !== null) {\n          // Set the return pointer of the child to the work-in-progress fiber.\n          fiber.return = workInProgress;\n        }\n\n        while (fiber !== null) {\n          var nextFiber = void 0; // Visit this fiber.\n\n          var dependency = fiber.firstContextDependency;\n\n          if (dependency !== null) {\n            do {\n              // Check if the context matches.\n              if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {\n                // Match! Schedule an update on this fiber.\n                if (fiber.tag === ClassComponent) {\n                  // Schedule a force update on the work-in-progress.\n                  var update = createUpdate(renderExpirationTime);\n                  update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n                  // update to the current fiber, too, which means it will persist even if\n                  // this render is thrown away. Since it's a race condition, not sure it's\n                  // worth fixing.\n\n                  enqueueUpdate(fiber, update);\n                }\n\n                if (fiber.expirationTime < renderExpirationTime) {\n                  fiber.expirationTime = renderExpirationTime;\n                }\n\n                var alternate = fiber.alternate;\n\n                if (alternate !== null && alternate.expirationTime < renderExpirationTime) {\n                  alternate.expirationTime = renderExpirationTime;\n                } // Update the child expiration time of all the ancestors, including\n                // the alternates.\n\n\n                var node = fiber.return;\n\n                while (node !== null) {\n                  alternate = node.alternate;\n\n                  if (node.childExpirationTime < renderExpirationTime) {\n                    node.childExpirationTime = renderExpirationTime;\n\n                    if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {\n                      alternate.childExpirationTime = renderExpirationTime;\n                    }\n                  } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {\n                    alternate.childExpirationTime = renderExpirationTime;\n                  } else {\n                    // Neither alternate was updated, which means the rest of the\n                    // ancestor path already has sufficient priority.\n                    break;\n                  }\n\n                  node = node.return;\n                }\n              }\n\n              nextFiber = fiber.child;\n              dependency = dependency.next;\n            } while (dependency !== null);\n          } else if (fiber.tag === ContextProvider) {\n            // Don't scan deeper if this is a matching provider\n            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n          } else {\n            // Traverse down.\n            nextFiber = fiber.child;\n          }\n\n          if (nextFiber !== null) {\n            // Set the return pointer of the child to the work-in-progress fiber.\n            nextFiber.return = fiber;\n          } else {\n            // No child. Traverse to next sibling.\n            nextFiber = fiber;\n\n            while (nextFiber !== null) {\n              if (nextFiber === workInProgress) {\n                // We're back to the root of this subtree. Exit.\n                nextFiber = null;\n                break;\n              }\n\n              var sibling = nextFiber.sibling;\n\n              if (sibling !== null) {\n                // Set the return pointer of the sibling to the work-in-progress fiber.\n                sibling.return = nextFiber.return;\n                nextFiber = sibling;\n                break;\n              } // No more siblings. Traverse up.\n\n\n              nextFiber = nextFiber.return;\n            }\n          }\n\n          fiber = nextFiber;\n        }\n      }\n\n      function prepareToReadContext(workInProgress, renderExpirationTime) {\n        currentlyRenderingFiber = workInProgress;\n        lastContextDependency = null;\n        lastContextWithAllBitsObserved = null; // Reset the work-in-progress list\n\n        workInProgress.firstContextDependency = null;\n      }\n\n      function readContext(context, observedBits) {\n        if (lastContextWithAllBitsObserved === context) ;else if (observedBits === false || observedBits === 0) ;else {\n          var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.\n\n          if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {\n            // Observe all updates.\n            lastContextWithAllBitsObserved = context;\n            resolvedObservedBits = maxSigned31BitInt;\n          } else {\n            resolvedObservedBits = observedBits;\n          }\n\n          var contextItem = {\n            context: context,\n            observedBits: resolvedObservedBits,\n            next: null\n          };\n\n          if (lastContextDependency === null) {\n            !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0; // This is the first dependency in the list\n\n            currentlyRenderingFiber.firstContextDependency = lastContextDependency = contextItem;\n          } else {\n            // Append a new context item.\n            lastContextDependency = lastContextDependency.next = contextItem;\n          }\n        }\n        return isPrimaryRenderer ? context._currentValue : context._currentValue2;\n      }\n\n      var NoEffect$1 =\n      /*             */\n      0;\n      var UnmountSnapshot =\n      /*      */\n      2;\n      var UnmountMutation =\n      /*      */\n      4;\n      var MountMutation =\n      /*        */\n      8;\n      var UnmountLayout =\n      /*        */\n      16;\n      var MountLayout =\n      /*          */\n      32;\n      var MountPassive =\n      /*         */\n      64;\n      var UnmountPassive =\n      /*       */\n      128;\n\n      function areHookInputsEqual(arr1, arr2) {\n        // Don't bother comparing lengths in prod because these arrays should be\n        // passed inline.\n        {\n          !(arr1.length === arr2.length) ? warning$1(false, 'Detected a variable number of hook dependencies. The length of the ' + 'dependencies array should be constant between renders.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', arr1.join(', '), arr2.join(', ')) : void 0;\n        }\n\n        for (var i = 0; i < arr1.length; i++) {\n          // Inlined Object.is polyfill.\n          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n          var val1 = arr1[i];\n          var val2 = arr2[i];\n\n          if (val1 === val2 && (val1 !== 0 || 1 / val1 === 1 / val2) || val1 !== val1 && val2 !== val2 // eslint-disable-line no-self-compare\n          ) {\n              continue;\n            }\n\n          return false;\n        }\n\n        return true;\n      } // These are set right before calling the component.\n\n\n      var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from\n      // the work-in-progress hook.\n\n      var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n      // current hook list is the list that belongs to the current fiber. The\n      // work-in-progress hook list is a new list that will be added to the\n      // work-in-progress fiber.\n\n      var firstCurrentHook = null;\n      var currentHook = null;\n      var firstWorkInProgressHook = null;\n      var workInProgressHook = null;\n      var remainingExpirationTime = NoWork;\n      var componentUpdateQueue = null; // Updates scheduled during render will trigger an immediate re-render at the\n      // end of the current pass. We can't store these updates on the normal queue,\n      // because if the work is aborted, they should be discarded. Because this is\n      // a relatively rare case, we also don't want to add an additional field to\n      // either the hook or queue object types. So we store them in a lazily create\n      // map of queue -> render-phase updates, which are discarded once the component\n      // completes without re-rendering.\n      // Whether the work-in-progress hook is a re-rendered hook\n\n      var isReRender = false; // Whether an update was scheduled during the currently executing render pass.\n\n      var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates\n\n      var renderPhaseUpdates = null; // Counter to prevent infinite loops.\n\n      var numberOfReRenders = 0;\n      var RE_RENDER_LIMIT = 25;\n\n      function resolveCurrentlyRenderingFiber() {\n        !(currentlyRenderingFiber$1 !== null) ? invariant(false, 'Hooks can only be called inside the body of a function component.') : void 0;\n        return currentlyRenderingFiber$1;\n      }\n\n      function prepareToUseHooks(current, workInProgress, nextRenderExpirationTime) {\n        renderExpirationTime = nextRenderExpirationTime;\n        currentlyRenderingFiber$1 = workInProgress;\n        firstCurrentHook = current !== null ? current.memoizedState : null; // The following should have already been reset\n        // currentHook = null;\n        // workInProgressHook = null;\n        // remainingExpirationTime = NoWork;\n        // componentUpdateQueue = null;\n        // isReRender = false;\n        // didScheduleRenderPhaseUpdate = false;\n        // renderPhaseUpdates = null;\n        // numberOfReRenders = 0;\n      }\n\n      function finishHooks(Component, props, children, refOrContext) {\n        // This must be called after every function component to prevent hooks from\n        // being used in classes.\n        while (didScheduleRenderPhaseUpdate) {\n          // Updates were scheduled during the render phase. They are stored in\n          // the `renderPhaseUpdates` map. Call the component again, reusing the\n          // work-in-progress hooks and applying the additional updates on top. Keep\n          // restarting until no more updates are scheduled.\n          didScheduleRenderPhaseUpdate = false;\n          numberOfReRenders += 1; // Start over from the beginning of the list\n\n          currentHook = null;\n          workInProgressHook = null;\n          componentUpdateQueue = null;\n          children = Component(props, refOrContext);\n        }\n\n        renderPhaseUpdates = null;\n        numberOfReRenders = 0;\n        var renderedWork = currentlyRenderingFiber$1;\n        renderedWork.memoizedState = firstWorkInProgressHook;\n        renderedWork.expirationTime = remainingExpirationTime;\n        renderedWork.updateQueue = componentUpdateQueue;\n        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n        renderExpirationTime = NoWork;\n        currentlyRenderingFiber$1 = null;\n        firstCurrentHook = null;\n        currentHook = null;\n        firstWorkInProgressHook = null;\n        workInProgressHook = null;\n        remainingExpirationTime = NoWork;\n        componentUpdateQueue = null; // Always set during createWorkInProgress\n        // isReRender = false;\n        // These were reset above\n        // didScheduleRenderPhaseUpdate = false;\n        // renderPhaseUpdates = null;\n        // numberOfReRenders = 0;\n\n        !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;\n        return children;\n      }\n\n      function resetHooks() {\n        // This is called instead of `finishHooks` if the component throws. It's also\n        // called inside mountIndeterminateComponent if we determine the component\n        // is a module-style component.\n        renderExpirationTime = NoWork;\n        currentlyRenderingFiber$1 = null;\n        firstCurrentHook = null;\n        currentHook = null;\n        firstWorkInProgressHook = null;\n        workInProgressHook = null;\n        remainingExpirationTime = NoWork;\n        componentUpdateQueue = null; // Always set during createWorkInProgress\n        // isReRender = false;\n\n        didScheduleRenderPhaseUpdate = false;\n        renderPhaseUpdates = null;\n        numberOfReRenders = 0;\n      }\n\n      function createHook() {\n        return {\n          memoizedState: null,\n          baseState: null,\n          queue: null,\n          baseUpdate: null,\n          next: null\n        };\n      }\n\n      function cloneHook(hook) {\n        return {\n          memoizedState: hook.memoizedState,\n          baseState: hook.memoizedState,\n          queue: hook.queue,\n          baseUpdate: hook.baseUpdate,\n          next: null\n        };\n      }\n\n      function createWorkInProgressHook() {\n        if (workInProgressHook === null) {\n          // This is the first hook in the list\n          if (firstWorkInProgressHook === null) {\n            isReRender = false;\n            currentHook = firstCurrentHook;\n\n            if (currentHook === null) {\n              // This is a newly mounted hook\n              workInProgressHook = createHook();\n            } else {\n              // Clone the current hook.\n              workInProgressHook = cloneHook(currentHook);\n            }\n\n            firstWorkInProgressHook = workInProgressHook;\n          } else {\n            // There's already a work-in-progress. Reuse it.\n            isReRender = true;\n            currentHook = firstCurrentHook;\n            workInProgressHook = firstWorkInProgressHook;\n          }\n        } else {\n          if (workInProgressHook.next === null) {\n            isReRender = false;\n            var hook = void 0;\n\n            if (currentHook === null) {\n              // This is a newly mounted hook\n              hook = createHook();\n            } else {\n              currentHook = currentHook.next;\n\n              if (currentHook === null) {\n                // This is a newly mounted hook\n                hook = createHook();\n              } else {\n                // Clone the current hook.\n                hook = cloneHook(currentHook);\n              }\n            } // Append to the end of the list\n\n\n            workInProgressHook = workInProgressHook.next = hook;\n          } else {\n            // There's already a work-in-progress. Reuse it.\n            isReRender = true;\n            workInProgressHook = workInProgressHook.next;\n            currentHook = currentHook !== null ? currentHook.next : null;\n          }\n        }\n\n        return workInProgressHook;\n      }\n\n      function createFunctionComponentUpdateQueue() {\n        return {\n          lastEffect: null\n        };\n      }\n\n      function basicStateReducer(state, action) {\n        return typeof action === 'function' ? action(state) : action;\n      }\n\n      function useContext$$1(context, observedBits) {\n        // Ensure we're in a function component (class components support only the\n        // .unstable_read() form)\n        resolveCurrentlyRenderingFiber();\n        return readContext(context, observedBits);\n      }\n\n      function useState(initialState) {\n        return useReducer(basicStateReducer, // useReducer has a special case to support lazy useState initializers\n        initialState);\n      }\n\n      function useReducer(reducer, initialState, initialAction) {\n        currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();\n        workInProgressHook = createWorkInProgressHook();\n        var queue = workInProgressHook.queue;\n\n        if (queue !== null) {\n          // Already have a queue, so this is an update.\n          if (isReRender) {\n            // This is a re-render. Apply the new render phase updates to the previous\n            var _dispatch2 = queue.dispatch;\n\n            if (renderPhaseUpdates !== null) {\n              // Render phase updates are stored in a map of queue -> linked list\n              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n\n              if (firstRenderPhaseUpdate !== undefined) {\n                renderPhaseUpdates.delete(queue);\n                var newState = workInProgressHook.memoizedState;\n                var update = firstRenderPhaseUpdate;\n\n                do {\n                  // Process this render phase update. We don't have to check the\n                  // priority because it will always be the same as the current\n                  // render's.\n                  var _action = update.action;\n                  newState = reducer(newState, _action);\n                  update = update.next;\n                } while (update !== null);\n\n                workInProgressHook.memoizedState = newState; // Don't persist the state accumlated from the render phase updates to\n                // the base state unless the queue is empty.\n                // TODO: Not sure if this is the desired semantics, but it's what we\n                // do for gDSFP. I can't remember why.\n\n                if (workInProgressHook.baseUpdate === queue.last) {\n                  workInProgressHook.baseState = newState;\n                }\n\n                return [newState, _dispatch2];\n              }\n            }\n\n            return [workInProgressHook.memoizedState, _dispatch2];\n          } // The last update in the entire queue\n\n\n          var _last = queue.last; // The last update that is part of the base state.\n\n          var _baseUpdate = workInProgressHook.baseUpdate; // Find the first unprocessed update.\n\n          var first = void 0;\n\n          if (_baseUpdate !== null) {\n            if (_last !== null) {\n              // For the first update, the queue is a circular linked list where\n              // `queue.last.next = queue.first`. Once the first update commits, and\n              // the `baseUpdate` is no longer empty, we can unravel the list.\n              _last.next = null;\n            }\n\n            first = _baseUpdate.next;\n          } else {\n            first = _last !== null ? _last.next : null;\n          }\n\n          if (first !== null) {\n            var _newState = workInProgressHook.baseState;\n            var newBaseState = null;\n            var newBaseUpdate = null;\n            var prevUpdate = _baseUpdate;\n            var _update = first;\n            var didSkip = false;\n\n            do {\n              var updateExpirationTime = _update.expirationTime;\n\n              if (updateExpirationTime < renderExpirationTime) {\n                // Priority is insufficient. Skip this update. If this is the first\n                // skipped update, the previous update/state is the new base\n                // update/state.\n                if (!didSkip) {\n                  didSkip = true;\n                  newBaseUpdate = prevUpdate;\n                  newBaseState = _newState;\n                } // Update the remaining priority in the queue.\n\n\n                if (updateExpirationTime > remainingExpirationTime) {\n                  remainingExpirationTime = updateExpirationTime;\n                }\n              } else {\n                // Process this update.\n                var _action2 = _update.action;\n                _newState = reducer(_newState, _action2);\n              }\n\n              prevUpdate = _update;\n              _update = _update.next;\n            } while (_update !== null && _update !== first);\n\n            if (!didSkip) {\n              newBaseUpdate = prevUpdate;\n              newBaseState = _newState;\n            }\n\n            workInProgressHook.memoizedState = _newState;\n            workInProgressHook.baseUpdate = newBaseUpdate;\n            workInProgressHook.baseState = newBaseState;\n          }\n\n          var _dispatch = queue.dispatch;\n          return [workInProgressHook.memoizedState, _dispatch];\n        } // There's no existing queue, so this is the initial render.\n\n\n        if (reducer === basicStateReducer) {\n          // Special case for `useState`.\n          if (typeof initialState === 'function') {\n            initialState = initialState();\n          }\n        } else if (initialAction !== undefined && initialAction !== null) {\n          initialState = reducer(initialState, initialAction);\n        }\n\n        workInProgressHook.memoizedState = workInProgressHook.baseState = initialState;\n        queue = workInProgressHook.queue = {\n          last: null,\n          dispatch: null\n        };\n        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);\n        return [workInProgressHook.memoizedState, dispatch];\n      }\n\n      function pushEffect(tag, create, destroy, inputs) {\n        var effect = {\n          tag: tag,\n          create: create,\n          destroy: destroy,\n          inputs: inputs,\n          // Circular\n          next: null\n        };\n\n        if (componentUpdateQueue === null) {\n          componentUpdateQueue = createFunctionComponentUpdateQueue();\n          componentUpdateQueue.lastEffect = effect.next = effect;\n        } else {\n          var _lastEffect = componentUpdateQueue.lastEffect;\n\n          if (_lastEffect === null) {\n            componentUpdateQueue.lastEffect = effect.next = effect;\n          } else {\n            var firstEffect = _lastEffect.next;\n            _lastEffect.next = effect;\n            effect.next = firstEffect;\n            componentUpdateQueue.lastEffect = effect;\n          }\n        }\n\n        return effect;\n      }\n\n      function useRef(initialValue) {\n        currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();\n        workInProgressHook = createWorkInProgressHook();\n        var ref = void 0;\n\n        if (workInProgressHook.memoizedState === null) {\n          ref = {\n            current: initialValue\n          };\n          {\n            Object.seal(ref);\n          }\n          workInProgressHook.memoizedState = ref;\n        } else {\n          ref = workInProgressHook.memoizedState;\n        }\n\n        return ref;\n      }\n\n      function useMutationEffect(create, inputs) {\n        useEffectImpl(Snapshot | Update, UnmountSnapshot | MountMutation, create, inputs);\n      }\n\n      function useLayoutEffect(create, inputs) {\n        useEffectImpl(Update, UnmountMutation | MountLayout, create, inputs);\n      }\n\n      function useEffect$$1(create, inputs) {\n        useEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, inputs);\n      }\n\n      function useEffectImpl(fiberEffectTag, hookEffectTag, create, inputs) {\n        currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();\n        workInProgressHook = createWorkInProgressHook();\n        var nextInputs = inputs !== undefined && inputs !== null ? inputs : [create];\n        var destroy = null;\n\n        if (currentHook !== null) {\n          var prevEffect = currentHook.memoizedState;\n          destroy = prevEffect.destroy;\n\n          if (areHookInputsEqual(nextInputs, prevEffect.inputs)) {\n            pushEffect(NoEffect$1, create, destroy, nextInputs);\n            return;\n          }\n        }\n\n        currentlyRenderingFiber$1.effectTag |= fiberEffectTag;\n        workInProgressHook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextInputs);\n      }\n\n      function useImperativeMethods(ref, create, inputs) {\n        // TODO: If inputs are provided, should we skip comparing the ref itself?\n        var nextInputs = inputs !== null && inputs !== undefined ? inputs.concat([ref]) : [ref, create]; // TODO: I've implemented this on top of useEffect because it's almost the\n        // same thing, and it would require an equal amount of code. It doesn't seem\n        // like a common enough use case to justify the additional size.\n\n        useEffectImpl(Update, UnmountMutation | MountLayout, function () {\n          if (typeof ref === 'function') {\n            var refCallback = ref;\n\n            var _inst = create();\n\n            refCallback(_inst);\n            return function () {\n              return refCallback(null);\n            };\n          } else if (ref !== null && ref !== undefined) {\n            var refObject = ref;\n\n            var _inst2 = create();\n\n            refObject.current = _inst2;\n            return function () {\n              refObject.current = null;\n            };\n          }\n        }, nextInputs);\n      }\n\n      function useCallback(callback, inputs) {\n        currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();\n        workInProgressHook = createWorkInProgressHook();\n        var nextInputs = inputs !== undefined && inputs !== null ? inputs : [callback];\n        var prevState = workInProgressHook.memoizedState;\n\n        if (prevState !== null) {\n          var prevInputs = prevState[1];\n\n          if (areHookInputsEqual(nextInputs, prevInputs)) {\n            return prevState[0];\n          }\n        }\n\n        workInProgressHook.memoizedState = [callback, nextInputs];\n        return callback;\n      }\n\n      function useMemo(nextCreate, inputs) {\n        currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();\n        workInProgressHook = createWorkInProgressHook();\n        var nextInputs = inputs !== undefined && inputs !== null ? inputs : [nextCreate];\n        var prevState = workInProgressHook.memoizedState;\n\n        if (prevState !== null) {\n          var prevInputs = prevState[1];\n\n          if (areHookInputsEqual(nextInputs, prevInputs)) {\n            return prevState[0];\n          }\n        }\n\n        var nextValue = nextCreate();\n        workInProgressHook.memoizedState = [nextValue, nextInputs];\n        return nextValue;\n      }\n\n      function dispatchAction(fiber, queue, action) {\n        !(numberOfReRenders < RE_RENDER_LIMIT) ? invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.') : void 0;\n        var alternate = fiber.alternate;\n\n        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {\n          // This is a render phase update. Stash it in a lazily-created map of\n          // queue -> linked list of updates. After this render pass, we'll restart\n          // and apply the stashed updates on top of the work-in-progress hook.\n          didScheduleRenderPhaseUpdate = true;\n          var update = {\n            expirationTime: renderExpirationTime,\n            action: action,\n            next: null\n          };\n\n          if (renderPhaseUpdates === null) {\n            renderPhaseUpdates = new Map();\n          }\n\n          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n\n          if (firstRenderPhaseUpdate === undefined) {\n            renderPhaseUpdates.set(queue, update);\n          } else {\n            // Append the update to the end of the list.\n            var lastRenderPhaseUpdate = firstRenderPhaseUpdate;\n\n            while (lastRenderPhaseUpdate.next !== null) {\n              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n            }\n\n            lastRenderPhaseUpdate.next = update;\n          }\n        } else {\n          var currentTime = requestCurrentTime();\n\n          var _expirationTime = computeExpirationForFiber(currentTime, fiber);\n\n          var _update2 = {\n            expirationTime: _expirationTime,\n            action: action,\n            next: null\n          };\n          flushPassiveEffects(); // Append the update to the end of the list.\n\n          var _last2 = queue.last;\n\n          if (_last2 === null) {\n            // This is the first update. Create a circular list.\n            _update2.next = _update2;\n          } else {\n            var first = _last2.next;\n\n            if (first !== null) {\n              // Still circular.\n              _update2.next = first;\n            }\n\n            _last2.next = _update2;\n          }\n\n          queue.last = _update2;\n          scheduleWork(fiber, _expirationTime);\n        }\n      }\n\n      var NO_CONTEXT = {};\n      var contextStackCursor$1 = createCursor(NO_CONTEXT);\n      var contextFiberStackCursor = createCursor(NO_CONTEXT);\n      var rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\n      function requiredContext(c) {\n        !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        return c;\n      }\n\n      function getRootHostContainer() {\n        var rootInstance = requiredContext(rootInstanceStackCursor.current);\n        return rootInstance;\n      }\n\n      function pushHostContainer(fiber, nextRootInstance) {\n        // Push current root instance onto the stack;\n        // This allows us to reset root when portals are popped.\n        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n        // This enables us to pop only Fibers that provide unique contexts.\n\n        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n        // However, we can't just call getRootHostContext() and push it because\n        // we'd have a different number of entries on the stack depending on\n        // whether getRootHostContext() throws somewhere in renderer code or not.\n        // So we push an empty value first. This lets us safely unwind on errors.\n\n        push(contextStackCursor$1, NO_CONTEXT, fiber);\n        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n        pop(contextStackCursor$1, fiber);\n        push(contextStackCursor$1, nextRootContext, fiber);\n      }\n\n      function popHostContainer(fiber) {\n        pop(contextStackCursor$1, fiber);\n        pop(contextFiberStackCursor, fiber);\n        pop(rootInstanceStackCursor, fiber);\n      }\n\n      function getHostContext() {\n        var context = requiredContext(contextStackCursor$1.current);\n        return context;\n      }\n\n      function pushHostContext(fiber) {\n        var rootInstance = requiredContext(rootInstanceStackCursor.current);\n        var context = requiredContext(contextStackCursor$1.current);\n        var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n        if (context === nextContext) {\n          return;\n        } // Track the context and the Fiber that provided it.\n        // This enables us to pop only Fibers that provide unique contexts.\n\n\n        push(contextFiberStackCursor, fiber, fiber);\n        push(contextStackCursor$1, nextContext, fiber);\n      }\n\n      function popHostContext(fiber) {\n        // Do not pop unless this Fiber provided the current context.\n        // pushHostContext() only pushes Fibers that provide unique contexts.\n        if (contextFiberStackCursor.current !== fiber) {\n          return;\n        }\n\n        pop(contextStackCursor$1, fiber);\n        pop(contextFiberStackCursor, fiber);\n      }\n\n      var commitTime = 0;\n      var profilerStartTime = -1;\n\n      function getCommitTime() {\n        return commitTime;\n      }\n\n      function recordCommitTime() {\n        commitTime = now();\n      }\n\n      function startProfilerTimer(fiber) {\n        profilerStartTime = now();\n\n        if (fiber.actualStartTime < 0) {\n          fiber.actualStartTime = now();\n        }\n      }\n\n      function stopProfilerTimerIfRunning(fiber) {\n        profilerStartTime = -1;\n      }\n\n      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n        if (profilerStartTime >= 0) {\n          var elapsedTime = now() - profilerStartTime;\n          fiber.actualDuration += elapsedTime;\n\n          if (overrideBaseTime) {\n            fiber.selfBaseDuration = elapsedTime;\n          }\n\n          profilerStartTime = -1;\n        }\n      }\n      /*eslint-disable no-self-compare */\n\n\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      /**\n       * inlined Object.is polyfill to avoid requiring consumers ship their own\n       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n       */\n\n      function is(x, y) {\n        // SameValue algorithm\n        if (x === y) {\n          // Steps 1-5, 7-10\n          // Steps 6.b-6.e: +0 != -0\n          // Added the nonzero y check to make Flow happy, but it is redundant\n          return x !== 0 || y !== 0 || 1 / x === 1 / y;\n        } else {\n          // Step 6.a: NaN == NaN\n          return x !== x && y !== y;\n        }\n      }\n      /**\n       * Performs equality by iterating through keys on an object and returning false\n       * when any key has values which are not strictly equal between the arguments.\n       * Returns true when the values of all keys are strictly equal.\n       */\n\n\n      function shallowEqual(objA, objB) {\n        if (is(objA, objB)) {\n          return true;\n        }\n\n        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n          return false;\n        }\n\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n\n        if (keysA.length !== keysB.length) {\n          return false;\n        } // Test for A's keys different from B.\n\n\n        for (var i = 0; i < keysA.length; i++) {\n          if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function resolveDefaultProps(Component, baseProps) {\n        if (Component && Component.defaultProps) {\n          // Resolve default props. Taken from ReactElement\n          var props = _assign({}, baseProps);\n\n          var defaultProps = Component.defaultProps;\n\n          for (var propName in defaultProps) {\n            if (props[propName] === undefined) {\n              props[propName] = defaultProps[propName];\n            }\n          }\n\n          return props;\n        }\n\n        return baseProps;\n      }\n\n      function readLazyComponentType(lazyComponent) {\n        var status = lazyComponent._status;\n        var result = lazyComponent._result;\n\n        switch (status) {\n          case Resolved:\n            {\n              var Component = result;\n              return Component;\n            }\n\n          case Rejected:\n            {\n              var error = result;\n              throw error;\n            }\n\n          case Pending:\n            {\n              var thenable = result;\n              throw thenable;\n            }\n\n          default:\n            {\n              lazyComponent._status = Pending;\n              var ctor = lazyComponent._ctor;\n\n              var _thenable = ctor();\n\n              _thenable.then(function (moduleObject) {\n                if (lazyComponent._status === Pending) {\n                  var defaultExport = moduleObject.default;\n                  {\n                    if (defaultExport === undefined) {\n                      warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + \"const MyComponent = lazy(() => import('./MyComponent'))\", moduleObject);\n                    }\n                  }\n                  lazyComponent._status = Resolved;\n                  lazyComponent._result = defaultExport;\n                }\n              }, function (error) {\n                if (lazyComponent._status === Pending) {\n                  lazyComponent._status = Rejected;\n                  lazyComponent._result = error;\n                }\n              });\n\n              lazyComponent._result = _thenable;\n              throw _thenable;\n            }\n        }\n      }\n\n      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;\n\n      function readContext$1(contextType) {\n        var dispatcher = ReactCurrentOwner$3.currentDispatcher;\n        return dispatcher.readContext(contextType);\n      }\n\n      var fakeInternalInstance = {};\n      var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.\n      // We'll use it to determine whether we need to initialize legacy refs.\n\n      var emptyRefsObject = new React$$1.Component().refs;\n      var didWarnAboutStateAssignmentForComponent = void 0;\n      var didWarnAboutUninitializedState = void 0;\n      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;\n      var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;\n      var didWarnAboutUndefinedDerivedState = void 0;\n      var warnOnUndefinedDerivedState = void 0;\n      var warnOnInvalidCallback = void 0;\n      var didWarnAboutDirectlyAssigningPropsToState = void 0;\n      var didWarnAboutContextTypeAndContextTypes = void 0;\n      var didWarnAboutInvalidateContextType = void 0;\n      {\n        didWarnAboutStateAssignmentForComponent = new Set();\n        didWarnAboutUninitializedState = new Set();\n        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n        didWarnAboutDirectlyAssigningPropsToState = new Set();\n        didWarnAboutUndefinedDerivedState = new Set();\n        didWarnAboutContextTypeAndContextTypes = new Set();\n        didWarnAboutInvalidateContextType = new Set();\n        var didWarnOnInvalidCallback = new Set();\n\n        warnOnInvalidCallback = function (callback, callerName) {\n          if (callback === null || typeof callback === 'function') {\n            return;\n          }\n\n          var key = callerName + '_' + callback;\n\n          if (!didWarnOnInvalidCallback.has(key)) {\n            didWarnOnInvalidCallback.add(key);\n            warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n          }\n        };\n\n        warnOnUndefinedDerivedState = function (type, partialState) {\n          if (partialState === undefined) {\n            var componentName = getComponentName(type) || 'Component';\n\n            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n              didWarnAboutUndefinedDerivedState.add(componentName);\n              warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n            }\n          }\n        }; // This is so gross but it's at least non-critical and can be removed if\n        // it causes problems. This is meant to give a nicer error message for\n        // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n        // ...)) which otherwise throws a \"_processChildContext is not a function\"\n        // exception.\n\n\n        Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n          enumerable: false,\n          value: function () {\n            invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');\n          }\n        });\n        Object.freeze(fakeInternalInstance);\n      }\n\n      function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n        var prevState = workInProgress.memoizedState;\n        {\n          if (workInProgress.mode & StrictMode) {\n            // Invoke the function an extra time to help detect side-effects.\n            getDerivedStateFromProps(nextProps, prevState);\n          }\n        }\n        var partialState = getDerivedStateFromProps(nextProps, prevState);\n        {\n          warnOnUndefinedDerivedState(ctor, partialState);\n        } // Merge the partial state and the previous state.\n\n        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);\n        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n        // base state.\n\n        var updateQueue = workInProgress.updateQueue;\n\n        if (updateQueue !== null && workInProgress.expirationTime === NoWork) {\n          updateQueue.baseState = memoizedState;\n        }\n      }\n\n      var classComponentUpdater = {\n        isMounted: isMounted,\n        enqueueSetState: function (inst, payload, callback) {\n          var fiber = get(inst);\n          var currentTime = requestCurrentTime();\n          var expirationTime = computeExpirationForFiber(currentTime, fiber);\n          var update = createUpdate(expirationTime);\n          update.payload = payload;\n\n          if (callback !== undefined && callback !== null) {\n            {\n              warnOnInvalidCallback(callback, 'setState');\n            }\n            update.callback = callback;\n          }\n\n          flushPassiveEffects();\n          enqueueUpdate(fiber, update);\n          scheduleWork(fiber, expirationTime);\n        },\n        enqueueReplaceState: function (inst, payload, callback) {\n          var fiber = get(inst);\n          var currentTime = requestCurrentTime();\n          var expirationTime = computeExpirationForFiber(currentTime, fiber);\n          var update = createUpdate(expirationTime);\n          update.tag = ReplaceState;\n          update.payload = payload;\n\n          if (callback !== undefined && callback !== null) {\n            {\n              warnOnInvalidCallback(callback, 'replaceState');\n            }\n            update.callback = callback;\n          }\n\n          flushPassiveEffects();\n          enqueueUpdate(fiber, update);\n          scheduleWork(fiber, expirationTime);\n        },\n        enqueueForceUpdate: function (inst, callback) {\n          var fiber = get(inst);\n          var currentTime = requestCurrentTime();\n          var expirationTime = computeExpirationForFiber(currentTime, fiber);\n          var update = createUpdate(expirationTime);\n          update.tag = ForceUpdate;\n\n          if (callback !== undefined && callback !== null) {\n            {\n              warnOnInvalidCallback(callback, 'forceUpdate');\n            }\n            update.callback = callback;\n          }\n\n          flushPassiveEffects();\n          enqueueUpdate(fiber, update);\n          scheduleWork(fiber, expirationTime);\n        }\n      };\n\n      function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n        var instance = workInProgress.stateNode;\n\n        if (typeof instance.shouldComponentUpdate === 'function') {\n          startPhaseTimer(workInProgress, 'shouldComponentUpdate');\n          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n          stopPhaseTimer();\n          {\n            !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;\n          }\n          return shouldUpdate;\n        }\n\n        if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n        }\n\n        return true;\n      }\n\n      function checkClassInstance(workInProgress, ctor, newProps) {\n        var instance = workInProgress.stateNode;\n        {\n          var name = getComponentName(ctor) || 'Component';\n          var renderPresent = instance.render;\n\n          if (!renderPresent) {\n            if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n              warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n            } else {\n              warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n            }\n          }\n\n          var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;\n          !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;\n          var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;\n          !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;\n          var noInstancePropTypes = !instance.propTypes;\n          !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;\n          var noInstanceContextType = !instance.contextType;\n          !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;\n          var noInstanceContextTypes = !instance.contextTypes;\n          !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;\n\n          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n            didWarnAboutContextTypeAndContextTypes.add(ctor);\n            warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n          }\n\n          var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';\n          !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;\n\n          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n            warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');\n          }\n\n          var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';\n          !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;\n          var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';\n          !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;\n          var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';\n          !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;\n          var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';\n          !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;\n          var hasMutatedProps = instance.props !== newProps;\n          !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name) : void 0;\n          var noInstanceDefaultProps = !instance.defaultProps;\n          !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;\n\n          if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n            warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));\n          }\n\n          var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';\n          !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;\n          var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';\n          !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;\n          var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';\n          !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;\n          var _state = instance.state;\n\n          if (_state && (typeof _state !== 'object' || isArray$1(_state))) {\n            warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);\n          }\n\n          if (typeof instance.getChildContext === 'function') {\n            !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;\n          }\n        }\n      }\n\n      function adoptClassInstance(workInProgress, instance) {\n        instance.updater = classComponentUpdater;\n        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n        set(instance, workInProgress);\n        {\n          instance._reactInternalInstance = fakeInternalInstance;\n        }\n      }\n\n      function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {\n        var isLegacyContextConsumer = false;\n        var unmaskedContext = emptyContextObject;\n        var context = null;\n        var contextType = ctor.contextType;\n\n        if (typeof contextType === 'object' && contextType !== null) {\n          {\n            if (contextType.$$typeof !== REACT_CONTEXT_TYPE && !didWarnAboutInvalidateContextType.has(ctor)) {\n              didWarnAboutInvalidateContextType.add(ctor);\n              warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext(). ' + 'Did you accidentally pass the Context.Provider instead?', getComponentName(ctor) || 'Component');\n            }\n          }\n          context = readContext$1(contextType);\n        } else {\n          unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n          var contextTypes = ctor.contextTypes;\n          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n          context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n        } // Instantiate twice to help detect side-effects.\n\n\n        {\n          if (workInProgress.mode & StrictMode) {\n            new ctor(props, context); // eslint-disable-line no-new\n          }\n        }\n        var instance = new ctor(props, context);\n        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n        adoptClassInstance(workInProgress, instance);\n        {\n          if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n            var componentName = getComponentName(ctor) || 'Component';\n\n            if (!didWarnAboutUninitializedState.has(componentName)) {\n              didWarnAboutUninitializedState.add(componentName);\n              warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n            }\n          } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n          // Warn about these lifecycles if they are present.\n          // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n          if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n            var foundWillMountName = null;\n            var foundWillReceivePropsName = null;\n            var foundWillUpdateName = null;\n\n            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n              foundWillMountName = 'componentWillMount';\n            } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n              foundWillMountName = 'UNSAFE_componentWillMount';\n            }\n\n            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n              foundWillReceivePropsName = 'componentWillReceiveProps';\n            } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n              foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n            }\n\n            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n              foundWillUpdateName = 'componentWillUpdate';\n            } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n              foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n            }\n\n            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n              var _componentName = getComponentName(ctor) || 'Component';\n\n              var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n                warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '');\n              }\n            }\n          }\n        } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n        // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n        if (isLegacyContextConsumer) {\n          cacheContext(workInProgress, unmaskedContext, context);\n        }\n\n        return instance;\n      }\n\n      function callComponentWillMount(workInProgress, instance) {\n        startPhaseTimer(workInProgress, 'componentWillMount');\n        var oldState = instance.state;\n\n        if (typeof instance.componentWillMount === 'function') {\n          instance.componentWillMount();\n        }\n\n        if (typeof instance.UNSAFE_componentWillMount === 'function') {\n          instance.UNSAFE_componentWillMount();\n        }\n\n        stopPhaseTimer();\n\n        if (oldState !== instance.state) {\n          {\n            warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');\n          }\n          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n        }\n      }\n\n      function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n        var oldState = instance.state;\n        startPhaseTimer(workInProgress, 'componentWillReceiveProps');\n\n        if (typeof instance.componentWillReceiveProps === 'function') {\n          instance.componentWillReceiveProps(newProps, nextContext);\n        }\n\n        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n        }\n\n        stopPhaseTimer();\n\n        if (instance.state !== oldState) {\n          {\n            var componentName = getComponentName(workInProgress.type) || 'Component';\n\n            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n              didWarnAboutStateAssignmentForComponent.add(componentName);\n              warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n            }\n          }\n          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n        }\n      } // Invokes the mount life-cycles on a previously never rendered instance.\n\n\n      function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {\n        {\n          checkClassInstance(workInProgress, ctor, newProps);\n        }\n        var instance = workInProgress.stateNode;\n        instance.props = newProps;\n        instance.state = workInProgress.memoizedState;\n        instance.refs = emptyRefsObject;\n        var contextType = ctor.contextType;\n\n        if (typeof contextType === 'object' && contextType !== null) {\n          instance.context = readContext$1(contextType);\n        } else {\n          var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n          instance.context = getMaskedContext(workInProgress, unmaskedContext);\n        }\n\n        {\n          if (instance.state === newProps) {\n            var componentName = getComponentName(ctor) || 'Component';\n\n            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n              didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n              warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n            }\n          }\n\n          if (workInProgress.mode & StrictMode) {\n            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n          }\n        }\n        var updateQueue = workInProgress.updateQueue;\n\n        if (updateQueue !== null) {\n          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);\n          instance.state = workInProgress.memoizedState;\n        }\n\n        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n        if (typeof getDerivedStateFromProps === 'function') {\n          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n          instance.state = workInProgress.memoizedState;\n        } // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n          callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n          // process them now.\n\n          updateQueue = workInProgress.updateQueue;\n\n          if (updateQueue !== null) {\n            processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);\n            instance.state = workInProgress.memoizedState;\n          }\n        }\n\n        if (typeof instance.componentDidMount === 'function') {\n          workInProgress.effectTag |= Update;\n        }\n      }\n\n      function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {\n        var instance = workInProgress.stateNode;\n        var oldProps = workInProgress.memoizedProps;\n        instance.props = oldProps;\n        var oldContext = instance.context;\n        var contextType = ctor.contextType;\n        var nextContext = void 0;\n\n        if (typeof contextType === 'object' && contextType !== null) {\n          nextContext = readContext$1(contextType);\n        } else {\n          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n          nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n        }\n\n        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n        // ever the previously attempted to render - not the \"current\". However,\n        // during componentDidUpdate we pass the \"current\" props.\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n          if (oldProps !== newProps || oldContext !== nextContext) {\n            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n          }\n        }\n\n        resetHasForceUpdateBeforeProcessing();\n        var oldState = workInProgress.memoizedState;\n        var newState = instance.state = oldState;\n        var updateQueue = workInProgress.updateQueue;\n\n        if (updateQueue !== null) {\n          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);\n          newState = workInProgress.memoizedState;\n        }\n\n        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n          // If an update was already in progress, we should schedule an Update\n          // effect even though we're bailing out, so that cWU/cDU are called.\n          if (typeof instance.componentDidMount === 'function') {\n            workInProgress.effectTag |= Update;\n          }\n\n          return false;\n        }\n\n        if (typeof getDerivedStateFromProps === 'function') {\n          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n          newState = workInProgress.memoizedState;\n        }\n\n        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n        if (shouldUpdate) {\n          // In order to support react-lifecycles-compat polyfilled components,\n          // Unsafe lifecycles should not be invoked for components using the new APIs.\n          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n            startPhaseTimer(workInProgress, 'componentWillMount');\n\n            if (typeof instance.componentWillMount === 'function') {\n              instance.componentWillMount();\n            }\n\n            if (typeof instance.UNSAFE_componentWillMount === 'function') {\n              instance.UNSAFE_componentWillMount();\n            }\n\n            stopPhaseTimer();\n          }\n\n          if (typeof instance.componentDidMount === 'function') {\n            workInProgress.effectTag |= Update;\n          }\n        } else {\n          // If an update was already in progress, we should schedule an Update\n          // effect even though we're bailing out, so that cWU/cDU are called.\n          if (typeof instance.componentDidMount === 'function') {\n            workInProgress.effectTag |= Update;\n          } // If shouldComponentUpdate returned false, we should still update the\n          // memoized state to indicate that this work can be reused.\n\n\n          workInProgress.memoizedProps = newProps;\n          workInProgress.memoizedState = newState;\n        } // Update the existing instance's state, props, and context pointers even\n        // if shouldComponentUpdate returns false.\n\n\n        instance.props = newProps;\n        instance.state = newState;\n        instance.context = nextContext;\n        return shouldUpdate;\n      } // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\n      function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {\n        var instance = workInProgress.stateNode;\n        var oldProps = workInProgress.memoizedProps;\n        instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);\n        var oldContext = instance.context;\n        var contextType = ctor.contextType;\n        var nextContext = void 0;\n\n        if (typeof contextType === 'object' && contextType !== null) {\n          nextContext = readContext$1(contextType);\n        } else {\n          var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n          nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n        }\n\n        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n        // ever the previously attempted to render - not the \"current\". However,\n        // during componentDidUpdate we pass the \"current\" props.\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n          if (oldProps !== newProps || oldContext !== nextContext) {\n            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n          }\n        }\n\n        resetHasForceUpdateBeforeProcessing();\n        var oldState = workInProgress.memoizedState;\n        var newState = instance.state = oldState;\n        var updateQueue = workInProgress.updateQueue;\n\n        if (updateQueue !== null) {\n          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);\n          newState = workInProgress.memoizedState;\n        }\n\n        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n          // If an update was already in progress, we should schedule an Update\n          // effect even though we're bailing out, so that cWU/cDU are called.\n          if (typeof instance.componentDidUpdate === 'function') {\n            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n              workInProgress.effectTag |= Update;\n            }\n          }\n\n          if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n              workInProgress.effectTag |= Snapshot;\n            }\n          }\n\n          return false;\n        }\n\n        if (typeof getDerivedStateFromProps === 'function') {\n          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n          newState = workInProgress.memoizedState;\n        }\n\n        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n        if (shouldUpdate) {\n          // In order to support react-lifecycles-compat polyfilled components,\n          // Unsafe lifecycles should not be invoked for components using the new APIs.\n          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n            startPhaseTimer(workInProgress, 'componentWillUpdate');\n\n            if (typeof instance.componentWillUpdate === 'function') {\n              instance.componentWillUpdate(newProps, newState, nextContext);\n            }\n\n            if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n            }\n\n            stopPhaseTimer();\n          }\n\n          if (typeof instance.componentDidUpdate === 'function') {\n            workInProgress.effectTag |= Update;\n          }\n\n          if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n            workInProgress.effectTag |= Snapshot;\n          }\n        } else {\n          // If an update was already in progress, we should schedule an Update\n          // effect even though we're bailing out, so that cWU/cDU are called.\n          if (typeof instance.componentDidUpdate === 'function') {\n            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n              workInProgress.effectTag |= Update;\n            }\n          }\n\n          if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n            if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n              workInProgress.effectTag |= Snapshot;\n            }\n          } // If shouldComponentUpdate returned false, we should still update the\n          // memoized props/state to indicate that this work can be reused.\n\n\n          workInProgress.memoizedProps = newProps;\n          workInProgress.memoizedState = newState;\n        } // Update the existing instance's state, props, and context pointers even\n        // if shouldComponentUpdate returns false.\n\n\n        instance.props = newProps;\n        instance.state = newState;\n        instance.context = nextContext;\n        return shouldUpdate;\n      }\n\n      var didWarnAboutMaps = void 0;\n      var didWarnAboutGenerators = void 0;\n      var didWarnAboutStringRefInStrictMode = void 0;\n      var ownerHasKeyUseWarning = void 0;\n      var ownerHasFunctionTypeWarning = void 0;\n\n      var warnForMissingKey = function (child) {};\n\n      {\n        didWarnAboutMaps = false;\n        didWarnAboutGenerators = false;\n        didWarnAboutStringRefInStrictMode = {};\n        /**\n         * Warn if there's no key explicitly set on dynamic arrays of children or\n         * object keys are not valid. This allows us to keep track of children between\n         * updates.\n         */\n\n        ownerHasKeyUseWarning = {};\n        ownerHasFunctionTypeWarning = {};\n\n        warnForMissingKey = function (child) {\n          if (child === null || typeof child !== 'object') {\n            return;\n          }\n\n          if (!child._store || child._store.validated || child.key != null) {\n            return;\n          }\n\n          !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n          child._store.validated = true;\n          var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '\"key\" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();\n\n          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n            return;\n          }\n\n          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n          warning$1(false, 'Each child in an array or iterator should have a unique ' + '\"key\" prop. See https://fb.me/react-warning-keys for ' + 'more information.');\n        };\n      }\n      var isArray = Array.isArray;\n\n      function coerceRef(returnFiber, current$$1, element) {\n        var mixedRef = element.ref;\n\n        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n          {\n            if (returnFiber.mode & StrictMode) {\n              var componentName = getComponentName(returnFiber.type) || 'Component';\n\n              if (!didWarnAboutStringRefInStrictMode[componentName]) {\n                warningWithoutStack$1(false, 'A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\\n%s' + '\\n\\nLearn more about using refs safely here:' + '\\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));\n                didWarnAboutStringRefInStrictMode[componentName] = true;\n              }\n            }\n          }\n\n          if (element._owner) {\n            var owner = element._owner;\n            var inst = void 0;\n\n            if (owner) {\n              var ownerFiber = owner;\n              !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs.') : void 0;\n              inst = ownerFiber.stateNode;\n            }\n\n            !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;\n            var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n            if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {\n              return current$$1.ref;\n            }\n\n            var ref = function (value) {\n              var refs = inst.refs;\n\n              if (refs === emptyRefsObject) {\n                // This is a lazy pooled frozen object, so we need to initialize.\n                refs = inst.refs = {};\n              }\n\n              if (value === null) {\n                delete refs[stringRef];\n              } else {\n                refs[stringRef] = value;\n              }\n            };\n\n            ref._stringRef = stringRef;\n            return ref;\n          } else {\n            !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;\n            !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\\n1. You may be adding a ref to a function component\\n2. You may be adding a ref to a component that was not created inside a component\\'s render method\\n3. You have multiple copies of React loaded\\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;\n          }\n        }\n\n        return mixedRef;\n      }\n\n      function throwOnInvalidObjectType(returnFiber, newChild) {\n        if (returnFiber.type !== 'textarea') {\n          var addendum = '';\n          {\n            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();\n          }\n          invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);\n        }\n      }\n\n      function warnOnFunctionType() {\n        var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();\n\n        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {\n          return;\n        }\n\n        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;\n        warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n      } // This wrapper function exists because I expect to clone the code in each path\n      // to be able to optimize each path individually by branching early. This needs\n      // a compiler or we can do it manually. Helpers that don't need this branching\n      // live outside of this function.\n\n\n      function ChildReconciler(shouldTrackSideEffects) {\n        function deleteChild(returnFiber, childToDelete) {\n          if (!shouldTrackSideEffects) {\n            // Noop.\n            return;\n          } // Deletions are added in reversed order so we add it to the front.\n          // At this point, the return fiber's effect list is empty except for\n          // deletions, so we can just append the deletion to the list. The remaining\n          // effects aren't added until the complete phase. Once we implement\n          // resuming, this may not be true.\n\n\n          var last = returnFiber.lastEffect;\n\n          if (last !== null) {\n            last.nextEffect = childToDelete;\n            returnFiber.lastEffect = childToDelete;\n          } else {\n            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n          }\n\n          childToDelete.nextEffect = null;\n          childToDelete.effectTag = Deletion;\n        }\n\n        function deleteRemainingChildren(returnFiber, currentFirstChild) {\n          if (!shouldTrackSideEffects) {\n            // Noop.\n            return null;\n          } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n          // assuming that after the first child we've already added everything.\n\n\n          var childToDelete = currentFirstChild;\n\n          while (childToDelete !== null) {\n            deleteChild(returnFiber, childToDelete);\n            childToDelete = childToDelete.sibling;\n          }\n\n          return null;\n        }\n\n        function mapRemainingChildren(returnFiber, currentFirstChild) {\n          // Add the remaining children to a temporary map so that we can find them by\n          // keys quickly. Implicit (null) keys get added to this set with their index\n          var existingChildren = new Map();\n          var existingChild = currentFirstChild;\n\n          while (existingChild !== null) {\n            if (existingChild.key !== null) {\n              existingChildren.set(existingChild.key, existingChild);\n            } else {\n              existingChildren.set(existingChild.index, existingChild);\n            }\n\n            existingChild = existingChild.sibling;\n          }\n\n          return existingChildren;\n        }\n\n        function useFiber(fiber, pendingProps, expirationTime) {\n          // We currently set sibling to null and index to 0 here because it is easy\n          // to forget to do before returning it. E.g. for the single child case.\n          var clone = createWorkInProgress(fiber, pendingProps, expirationTime);\n          clone.index = 0;\n          clone.sibling = null;\n          return clone;\n        }\n\n        function placeChild(newFiber, lastPlacedIndex, newIndex) {\n          newFiber.index = newIndex;\n\n          if (!shouldTrackSideEffects) {\n            // Noop.\n            return lastPlacedIndex;\n          }\n\n          var current$$1 = newFiber.alternate;\n\n          if (current$$1 !== null) {\n            var oldIndex = current$$1.index;\n\n            if (oldIndex < lastPlacedIndex) {\n              // This is a move.\n              newFiber.effectTag = Placement;\n              return lastPlacedIndex;\n            } else {\n              // This item can stay in place.\n              return oldIndex;\n            }\n          } else {\n            // This is an insertion.\n            newFiber.effectTag = Placement;\n            return lastPlacedIndex;\n          }\n        }\n\n        function placeSingleChild(newFiber) {\n          // This is simpler for the single child case. We only need to do a\n          // placement for inserting new children.\n          if (shouldTrackSideEffects && newFiber.alternate === null) {\n            newFiber.effectTag = Placement;\n          }\n\n          return newFiber;\n        }\n\n        function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {\n          if (current$$1 === null || current$$1.tag !== HostText) {\n            // Insert\n            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);\n            created.return = returnFiber;\n            return created;\n          } else {\n            // Update\n            var existing = useFiber(current$$1, textContent, expirationTime);\n            existing.return = returnFiber;\n            return existing;\n          }\n        }\n\n        function updateElement(returnFiber, current$$1, element, expirationTime) {\n          if (current$$1 !== null && current$$1.elementType === element.type) {\n            // Move based on index\n            var existing = useFiber(current$$1, element.props, expirationTime);\n            existing.ref = coerceRef(returnFiber, current$$1, element);\n            existing.return = returnFiber;\n            {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          } else {\n            // Insert\n            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);\n            created.ref = coerceRef(returnFiber, current$$1, element);\n            created.return = returnFiber;\n            return created;\n          }\n        }\n\n        function updatePortal(returnFiber, current$$1, portal, expirationTime) {\n          if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {\n            // Insert\n            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);\n            created.return = returnFiber;\n            return created;\n          } else {\n            // Update\n            var existing = useFiber(current$$1, portal.children || [], expirationTime);\n            existing.return = returnFiber;\n            return existing;\n          }\n        }\n\n        function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {\n          if (current$$1 === null || current$$1.tag !== Fragment) {\n            // Insert\n            var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);\n            created.return = returnFiber;\n            return created;\n          } else {\n            // Update\n            var existing = useFiber(current$$1, fragment, expirationTime);\n            existing.return = returnFiber;\n            return existing;\n          }\n        }\n\n        function createChild(returnFiber, newChild, expirationTime) {\n          if (typeof newChild === 'string' || typeof newChild === 'number') {\n            // Text nodes don't have keys. If the previous node is implicitly keyed\n            // we can continue to replace it without aborting even if it is not a text\n            // node.\n            var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);\n            created.return = returnFiber;\n            return created;\n          }\n\n          if (typeof newChild === 'object' && newChild !== null) {\n            switch (newChild.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n                {\n                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);\n\n                  _created.ref = coerceRef(returnFiber, null, newChild);\n                  _created.return = returnFiber;\n                  return _created;\n                }\n\n              case REACT_PORTAL_TYPE:\n                {\n                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);\n\n                  _created2.return = returnFiber;\n                  return _created2;\n                }\n            }\n\n            if (isArray(newChild) || getIteratorFn(newChild)) {\n              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);\n\n              _created3.return = returnFiber;\n              return _created3;\n            }\n\n            throwOnInvalidObjectType(returnFiber, newChild);\n          }\n\n          {\n            if (typeof newChild === 'function') {\n              warnOnFunctionType();\n            }\n          }\n          return null;\n        }\n\n        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {\n          // Update the fiber if the keys match, otherwise return null.\n          var key = oldFiber !== null ? oldFiber.key : null;\n\n          if (typeof newChild === 'string' || typeof newChild === 'number') {\n            // Text nodes don't have keys. If the previous node is implicitly keyed\n            // we can continue to replace it without aborting even if it is not a text\n            // node.\n            if (key !== null) {\n              return null;\n            }\n\n            return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);\n          }\n\n          if (typeof newChild === 'object' && newChild !== null) {\n            switch (newChild.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n                {\n                  if (newChild.key === key) {\n                    if (newChild.type === REACT_FRAGMENT_TYPE) {\n                      return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);\n                    }\n\n                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);\n                  } else {\n                    return null;\n                  }\n                }\n\n              case REACT_PORTAL_TYPE:\n                {\n                  if (newChild.key === key) {\n                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);\n                  } else {\n                    return null;\n                  }\n                }\n            }\n\n            if (isArray(newChild) || getIteratorFn(newChild)) {\n              if (key !== null) {\n                return null;\n              }\n\n              return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);\n            }\n\n            throwOnInvalidObjectType(returnFiber, newChild);\n          }\n\n          {\n            if (typeof newChild === 'function') {\n              warnOnFunctionType();\n            }\n          }\n          return null;\n        }\n\n        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {\n          if (typeof newChild === 'string' || typeof newChild === 'number') {\n            // Text nodes don't have keys, so we neither have to check the old nor\n            // new node for the key. If both are text nodes, they match.\n            var matchedFiber = existingChildren.get(newIdx) || null;\n            return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);\n          }\n\n          if (typeof newChild === 'object' && newChild !== null) {\n            switch (newChild.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n                {\n                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n                  if (newChild.type === REACT_FRAGMENT_TYPE) {\n                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);\n                  }\n\n                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);\n                }\n\n              case REACT_PORTAL_TYPE:\n                {\n                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);\n                }\n            }\n\n            if (isArray(newChild) || getIteratorFn(newChild)) {\n              var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n              return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);\n            }\n\n            throwOnInvalidObjectType(returnFiber, newChild);\n          }\n\n          {\n            if (typeof newChild === 'function') {\n              warnOnFunctionType();\n            }\n          }\n          return null;\n        }\n        /**\n         * Warns if there is a duplicate or missing key\n         */\n\n\n        function warnOnInvalidKey(child, knownKeys) {\n          {\n            if (typeof child !== 'object' || child === null) {\n              return knownKeys;\n            }\n\n            switch (child.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n              case REACT_PORTAL_TYPE:\n                warnForMissingKey(child);\n                var key = child.key;\n\n                if (typeof key !== 'string') {\n                  break;\n                }\n\n                if (knownKeys === null) {\n                  knownKeys = new Set();\n                  knownKeys.add(key);\n                  break;\n                }\n\n                if (!knownKeys.has(key)) {\n                  knownKeys.add(key);\n                  break;\n                }\n\n                warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n                break;\n\n              default:\n                break;\n            }\n          }\n          return knownKeys;\n        }\n\n        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {\n          // This algorithm can't optimize by searching from boths ends since we\n          // don't have backpointers on fibers. I'm trying to see how far we can get\n          // with that model. If it ends up not being worth the tradeoffs, we can\n          // add it later.\n          // Even with a two ended optimization, we'd want to optimize for the case\n          // where there are few changes and brute force the comparison instead of\n          // going for the Map. It'd like to explore hitting that path first in\n          // forward-only mode and only go for the Map once we notice that we need\n          // lots of look ahead. This doesn't handle reversal as well as two ended\n          // search but that's unusual. Besides, for the two ended optimization to\n          // work on Iterables, we'd need to copy the whole set.\n          // In this first iteration, we'll just live with hitting the bad case\n          // (adding everything to a Map) in for every insert/move.\n          // If you change this code, also update reconcileChildrenIterator() which\n          // uses the same algorithm.\n          {\n            // First, validate keys.\n            var knownKeys = null;\n\n            for (var i = 0; i < newChildren.length; i++) {\n              var child = newChildren[i];\n              knownKeys = warnOnInvalidKey(child, knownKeys);\n            }\n          }\n          var resultingFirstChild = null;\n          var previousNewFiber = null;\n          var oldFiber = currentFirstChild;\n          var lastPlacedIndex = 0;\n          var newIdx = 0;\n          var nextOldFiber = null;\n\n          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n            if (oldFiber.index > newIdx) {\n              nextOldFiber = oldFiber;\n              oldFiber = null;\n            } else {\n              nextOldFiber = oldFiber.sibling;\n            }\n\n            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);\n\n            if (newFiber === null) {\n              // TODO: This breaks on empty slots like null children. That's\n              // unfortunate because it triggers the slow path all the time. We need\n              // a better way to communicate whether this was a miss or null,\n              // boolean, undefined, etc.\n              if (oldFiber === null) {\n                oldFiber = nextOldFiber;\n              }\n\n              break;\n            }\n\n            if (shouldTrackSideEffects) {\n              if (oldFiber && newFiber.alternate === null) {\n                // We matched the slot, but we didn't reuse the existing fiber, so we\n                // need to delete the existing child.\n                deleteChild(returnFiber, oldFiber);\n              }\n            }\n\n            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = newFiber;\n            } else {\n              // TODO: Defer siblings if we're not at the right index for this slot.\n              // I.e. if we had null values before, then we want to defer this\n              // for each null value. However, we also don't want to call updateSlot\n              // with the previous one.\n              previousNewFiber.sibling = newFiber;\n            }\n\n            previousNewFiber = newFiber;\n            oldFiber = nextOldFiber;\n          }\n\n          if (newIdx === newChildren.length) {\n            // We've reached the end of the new children. We can delete the rest.\n            deleteRemainingChildren(returnFiber, oldFiber);\n            return resultingFirstChild;\n          }\n\n          if (oldFiber === null) {\n            // If we don't have any more existing children we can choose a fast path\n            // since the rest will all be insertions.\n            for (; newIdx < newChildren.length; newIdx++) {\n              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);\n\n              if (!_newFiber) {\n                continue;\n              }\n\n              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n              if (previousNewFiber === null) {\n                // TODO: Move out of the loop. This only happens for the first run.\n                resultingFirstChild = _newFiber;\n              } else {\n                previousNewFiber.sibling = _newFiber;\n              }\n\n              previousNewFiber = _newFiber;\n            }\n\n            return resultingFirstChild;\n          } // Add all children to a key map for quick lookups.\n\n\n          var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n          for (; newIdx < newChildren.length; newIdx++) {\n            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);\n\n            if (_newFiber2) {\n              if (shouldTrackSideEffects) {\n                if (_newFiber2.alternate !== null) {\n                  // The new fiber is a work in progress, but if there exists a\n                  // current, that means that we reused the fiber. We need to delete\n                  // it from the child list so that we don't add it to the deletion\n                  // list.\n                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n                }\n              }\n\n              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n              if (previousNewFiber === null) {\n                resultingFirstChild = _newFiber2;\n              } else {\n                previousNewFiber.sibling = _newFiber2;\n              }\n\n              previousNewFiber = _newFiber2;\n            }\n          }\n\n          if (shouldTrackSideEffects) {\n            // Any existing children that weren't consumed above were deleted. We need\n            // to add them to the deletion list.\n            existingChildren.forEach(function (child) {\n              return deleteChild(returnFiber, child);\n            });\n          }\n\n          return resultingFirstChild;\n        }\n\n        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {\n          // This is the same implementation as reconcileChildrenArray(),\n          // but using the iterator instead.\n          var iteratorFn = getIteratorFn(newChildrenIterable);\n          !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n          {\n            // We don't support rendering Generators because it's a mutation.\n            // See https://github.com/facebook/react/issues/12995\n            if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n            newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n              !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;\n              didWarnAboutGenerators = true;\n            } // Warn about using Maps as children\n\n\n            if (newChildrenIterable.entries === iteratorFn) {\n              !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;\n              didWarnAboutMaps = true;\n            } // First, validate keys.\n            // We'll get a different iterator later for the main pass.\n\n\n            var _newChildren = iteratorFn.call(newChildrenIterable);\n\n            if (_newChildren) {\n              var knownKeys = null;\n\n              var _step = _newChildren.next();\n\n              for (; !_step.done; _step = _newChildren.next()) {\n                var child = _step.value;\n                knownKeys = warnOnInvalidKey(child, knownKeys);\n              }\n            }\n          }\n          var newChildren = iteratorFn.call(newChildrenIterable);\n          !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;\n          var resultingFirstChild = null;\n          var previousNewFiber = null;\n          var oldFiber = currentFirstChild;\n          var lastPlacedIndex = 0;\n          var newIdx = 0;\n          var nextOldFiber = null;\n          var step = newChildren.next();\n\n          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n            if (oldFiber.index > newIdx) {\n              nextOldFiber = oldFiber;\n              oldFiber = null;\n            } else {\n              nextOldFiber = oldFiber.sibling;\n            }\n\n            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);\n\n            if (newFiber === null) {\n              // TODO: This breaks on empty slots like null children. That's\n              // unfortunate because it triggers the slow path all the time. We need\n              // a better way to communicate whether this was a miss or null,\n              // boolean, undefined, etc.\n              if (!oldFiber) {\n                oldFiber = nextOldFiber;\n              }\n\n              break;\n            }\n\n            if (shouldTrackSideEffects) {\n              if (oldFiber && newFiber.alternate === null) {\n                // We matched the slot, but we didn't reuse the existing fiber, so we\n                // need to delete the existing child.\n                deleteChild(returnFiber, oldFiber);\n              }\n            }\n\n            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = newFiber;\n            } else {\n              // TODO: Defer siblings if we're not at the right index for this slot.\n              // I.e. if we had null values before, then we want to defer this\n              // for each null value. However, we also don't want to call updateSlot\n              // with the previous one.\n              previousNewFiber.sibling = newFiber;\n            }\n\n            previousNewFiber = newFiber;\n            oldFiber = nextOldFiber;\n          }\n\n          if (step.done) {\n            // We've reached the end of the new children. We can delete the rest.\n            deleteRemainingChildren(returnFiber, oldFiber);\n            return resultingFirstChild;\n          }\n\n          if (oldFiber === null) {\n            // If we don't have any more existing children we can choose a fast path\n            // since the rest will all be insertions.\n            for (; !step.done; newIdx++, step = newChildren.next()) {\n              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);\n\n              if (_newFiber3 === null) {\n                continue;\n              }\n\n              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n              if (previousNewFiber === null) {\n                // TODO: Move out of the loop. This only happens for the first run.\n                resultingFirstChild = _newFiber3;\n              } else {\n                previousNewFiber.sibling = _newFiber3;\n              }\n\n              previousNewFiber = _newFiber3;\n            }\n\n            return resultingFirstChild;\n          } // Add all children to a key map for quick lookups.\n\n\n          var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n          for (; !step.done; newIdx++, step = newChildren.next()) {\n            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);\n\n            if (_newFiber4 !== null) {\n              if (shouldTrackSideEffects) {\n                if (_newFiber4.alternate !== null) {\n                  // The new fiber is a work in progress, but if there exists a\n                  // current, that means that we reused the fiber. We need to delete\n                  // it from the child list so that we don't add it to the deletion\n                  // list.\n                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n                }\n              }\n\n              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n              if (previousNewFiber === null) {\n                resultingFirstChild = _newFiber4;\n              } else {\n                previousNewFiber.sibling = _newFiber4;\n              }\n\n              previousNewFiber = _newFiber4;\n            }\n          }\n\n          if (shouldTrackSideEffects) {\n            // Any existing children that weren't consumed above were deleted. We need\n            // to add them to the deletion list.\n            existingChildren.forEach(function (child) {\n              return deleteChild(returnFiber, child);\n            });\n          }\n\n          return resultingFirstChild;\n        }\n\n        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {\n          // There's no need to check for keys on text nodes since we don't have a\n          // way to define them.\n          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n            // We already have an existing node so let's just update it and delete\n            // the rest.\n            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n            var existing = useFiber(currentFirstChild, textContent, expirationTime);\n            existing.return = returnFiber;\n            return existing;\n          } // The existing first child is not a text node so we need to create one\n          // and delete the existing ones.\n\n\n          deleteRemainingChildren(returnFiber, currentFirstChild);\n          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);\n          created.return = returnFiber;\n          return created;\n        }\n\n        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {\n          var key = element.key;\n          var child = currentFirstChild;\n\n          while (child !== null) {\n            // TODO: If key === null and child.key === null, then this only applies to\n            // the first item in the list.\n            if (child.key === key) {\n              if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);\n                existing.ref = coerceRef(returnFiber, child, element);\n                existing.return = returnFiber;\n                {\n                  existing._debugSource = element._source;\n                  existing._debugOwner = element._owner;\n                }\n                return existing;\n              } else {\n                deleteRemainingChildren(returnFiber, child);\n                break;\n              }\n            } else {\n              deleteChild(returnFiber, child);\n            }\n\n            child = child.sibling;\n          }\n\n          if (element.type === REACT_FRAGMENT_TYPE) {\n            var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);\n            created.return = returnFiber;\n            return created;\n          } else {\n            var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);\n\n            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n            _created4.return = returnFiber;\n            return _created4;\n          }\n        }\n\n        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {\n          var key = portal.key;\n          var child = currentFirstChild;\n\n          while (child !== null) {\n            // TODO: If key === null and child.key === null, then this only applies to\n            // the first item in the list.\n            if (child.key === key) {\n              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, portal.children || [], expirationTime);\n                existing.return = returnFiber;\n                return existing;\n              } else {\n                deleteRemainingChildren(returnFiber, child);\n                break;\n              }\n            } else {\n              deleteChild(returnFiber, child);\n            }\n\n            child = child.sibling;\n          }\n\n          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);\n          created.return = returnFiber;\n          return created;\n        } // This API will tag the children with the side-effect of the reconciliation\n        // itself. They will be added to the side-effect list as we pass through the\n        // children and the parent.\n\n\n        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {\n          // This function is not recursive.\n          // If the top level item is an array, we treat it as a set of children,\n          // not as a fragment. Nested arrays on the other hand will be treated as\n          // fragment nodes. Recursion happens at the normal flow.\n          // Handle top level unkeyed fragments as if they were arrays.\n          // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n          // We treat the ambiguous cases above the same.\n          var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n          if (isUnkeyedTopLevelFragment) {\n            newChild = newChild.props.children;\n          } // Handle object types\n\n\n          var isObject = typeof newChild === 'object' && newChild !== null;\n\n          if (isObject) {\n            switch (newChild.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));\n\n              case REACT_PORTAL_TYPE:\n                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));\n            }\n          }\n\n          if (typeof newChild === 'string' || typeof newChild === 'number') {\n            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));\n          }\n\n          if (isArray(newChild)) {\n            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);\n          }\n\n          if (getIteratorFn(newChild)) {\n            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);\n          }\n\n          if (isObject) {\n            throwOnInvalidObjectType(returnFiber, newChild);\n          }\n\n          {\n            if (typeof newChild === 'function') {\n              warnOnFunctionType();\n            }\n          }\n\n          if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {\n            // If the new child is undefined, and the return fiber is a composite\n            // component, throw an error. If Fiber return types are disabled,\n            // we already threw above.\n            switch (returnFiber.tag) {\n              case ClassComponent:\n                {\n                  {\n                    var instance = returnFiber.stateNode;\n\n                    if (instance.render._isMockFunction) {\n                      // We allow auto-mocks to proceed as if they're returning null.\n                      break;\n                    }\n                  }\n                }\n              // Intentionally fall through to the next case, which handles both\n              // functions and classes\n              // eslint-disable-next-lined no-fallthrough\n\n              case FunctionComponent:\n                {\n                  var Component = returnFiber.type;\n                  invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');\n                }\n            }\n          } // Remaining cases are all treated as empty.\n\n\n          return deleteRemainingChildren(returnFiber, currentFirstChild);\n        }\n\n        return reconcileChildFibers;\n      }\n\n      var reconcileChildFibers = ChildReconciler(true);\n      var mountChildFibers = ChildReconciler(false);\n\n      function cloneChildFibers(current$$1, workInProgress) {\n        !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;\n\n        if (workInProgress.child === null) {\n          return;\n        }\n\n        var currentChild = workInProgress.child;\n        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);\n        workInProgress.child = newChild;\n        newChild.return = workInProgress;\n\n        while (currentChild.sibling !== null) {\n          currentChild = currentChild.sibling;\n          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);\n          newChild.return = workInProgress;\n        }\n\n        newChild.sibling = null;\n      } // The deepest Fiber on the stack involved in a hydration context.\n      // This may have been an insertion or a hydration.\n\n\n      var hydrationParentFiber = null;\n      var nextHydratableInstance = null;\n      var isHydrating = false;\n\n      function enterHydrationState(fiber) {\n        if (!supportsHydration) {\n          return false;\n        }\n\n        var parentInstance = fiber.stateNode.containerInfo;\n        nextHydratableInstance = getFirstHydratableChild(parentInstance);\n        hydrationParentFiber = fiber;\n        isHydrating = true;\n        return true;\n      }\n\n      function deleteHydratableInstance(returnFiber, instance) {\n        {\n          switch (returnFiber.tag) {\n            case HostRoot:\n              didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);\n              break;\n\n            case HostComponent:\n              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);\n              break;\n          }\n        }\n        var childToDelete = createFiberFromHostInstanceForDeletion();\n        childToDelete.stateNode = instance;\n        childToDelete.return = returnFiber;\n        childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,\n        // these children are not part of the reconciliation list of children.\n        // Even if we abort and rereconcile the children, that will try to hydrate\n        // again and the nodes are still in the host tree so these will be\n        // recreated.\n\n        if (returnFiber.lastEffect !== null) {\n          returnFiber.lastEffect.nextEffect = childToDelete;\n          returnFiber.lastEffect = childToDelete;\n        } else {\n          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n        }\n      }\n\n      function insertNonHydratedInstance(returnFiber, fiber) {\n        fiber.effectTag |= Placement;\n        {\n          switch (returnFiber.tag) {\n            case HostRoot:\n              {\n                var parentContainer = returnFiber.stateNode.containerInfo;\n\n                switch (fiber.tag) {\n                  case HostComponent:\n                    var type = fiber.type;\n                    var props = fiber.pendingProps;\n                    didNotFindHydratableContainerInstance(parentContainer, type, props);\n                    break;\n\n                  case HostText:\n                    var text = fiber.pendingProps;\n                    didNotFindHydratableContainerTextInstance(parentContainer, text);\n                    break;\n                }\n\n                break;\n              }\n\n            case HostComponent:\n              {\n                var parentType = returnFiber.type;\n                var parentProps = returnFiber.memoizedProps;\n                var parentInstance = returnFiber.stateNode;\n\n                switch (fiber.tag) {\n                  case HostComponent:\n                    var _type = fiber.type;\n                    var _props = fiber.pendingProps;\n                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);\n                    break;\n\n                  case HostText:\n                    var _text = fiber.pendingProps;\n                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);\n                    break;\n                }\n\n                break;\n              }\n\n            default:\n              return;\n          }\n        }\n      }\n\n      function tryHydrate(fiber, nextInstance) {\n        switch (fiber.tag) {\n          case HostComponent:\n            {\n              var type = fiber.type;\n              var props = fiber.pendingProps;\n              var instance = canHydrateInstance(nextInstance, type, props);\n\n              if (instance !== null) {\n                fiber.stateNode = instance;\n                return true;\n              }\n\n              return false;\n            }\n\n          case HostText:\n            {\n              var text = fiber.pendingProps;\n              var textInstance = canHydrateTextInstance(nextInstance, text);\n\n              if (textInstance !== null) {\n                fiber.stateNode = textInstance;\n                return true;\n              }\n\n              return false;\n            }\n\n          default:\n            return false;\n        }\n      }\n\n      function tryToClaimNextHydratableInstance(fiber) {\n        if (!isHydrating) {\n          return;\n        }\n\n        var nextInstance = nextHydratableInstance;\n\n        if (!nextInstance) {\n          // Nothing to hydrate. Make it an insertion.\n          insertNonHydratedInstance(hydrationParentFiber, fiber);\n          isHydrating = false;\n          hydrationParentFiber = fiber;\n          return;\n        }\n\n        var firstAttemptedInstance = nextInstance;\n\n        if (!tryHydrate(fiber, nextInstance)) {\n          // If we can't hydrate this instance let's try the next one.\n          // We use this as a heuristic. It's based on intuition and not data so it\n          // might be flawed or unnecessary.\n          nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n\n          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n            // Nothing to hydrate. Make it an insertion.\n            insertNonHydratedInstance(hydrationParentFiber, fiber);\n            isHydrating = false;\n            hydrationParentFiber = fiber;\n            return;\n          } // We matched the next one, we'll now assume that the first one was\n          // superfluous and we'll delete it. Since we can't eagerly delete it\n          // we'll have to schedule a deletion. To do that, this node needs a dummy\n          // fiber associated with it.\n\n\n          deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);\n        }\n\n        hydrationParentFiber = fiber;\n        nextHydratableInstance = getFirstHydratableChild(nextInstance);\n      }\n\n      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n        if (!supportsHydration) {\n          invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        var instance = fiber.stateNode;\n        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.\n\n        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n        // is a new ref we mark this as an update.\n\n        if (updatePayload !== null) {\n          return true;\n        }\n\n        return false;\n      }\n\n      function prepareToHydrateHostTextInstance(fiber) {\n        if (!supportsHydration) {\n          invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        var textInstance = fiber.stateNode;\n        var textContent = fiber.memoizedProps;\n        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n        {\n          if (shouldUpdate) {\n            // We assume that prepareToHydrateHostTextInstance is called in a context where the\n            // hydration parent is the parent host component of this host text.\n            var returnFiber = hydrationParentFiber;\n\n            if (returnFiber !== null) {\n              switch (returnFiber.tag) {\n                case HostRoot:\n                  {\n                    var parentContainer = returnFiber.stateNode.containerInfo;\n                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);\n                    break;\n                  }\n\n                case HostComponent:\n                  {\n                    var parentType = returnFiber.type;\n                    var parentProps = returnFiber.memoizedProps;\n                    var parentInstance = returnFiber.stateNode;\n                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);\n                    break;\n                  }\n              }\n            }\n          }\n        }\n        return shouldUpdate;\n      }\n\n      function popToNextHostParent(fiber) {\n        var parent = fiber.return;\n\n        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {\n          parent = parent.return;\n        }\n\n        hydrationParentFiber = parent;\n      }\n\n      function popHydrationState(fiber) {\n        if (!supportsHydration) {\n          return false;\n        }\n\n        if (fiber !== hydrationParentFiber) {\n          // We're deeper than the current hydration context, inside an inserted\n          // tree.\n          return false;\n        }\n\n        if (!isHydrating) {\n          // If we're not currently hydrating but we're in a hydration context, then\n          // we were an insertion and now need to pop up reenter hydration of our\n          // siblings.\n          popToNextHostParent(fiber);\n          isHydrating = true;\n          return false;\n        }\n\n        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.\n        // We only do this deeper than head and body since they tend to have random\n        // other nodes in them. We also ignore components with pure text content in\n        // side of them.\n        // TODO: Better heuristic.\n\n        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {\n          var nextInstance = nextHydratableInstance;\n\n          while (nextInstance) {\n            deleteHydratableInstance(fiber, nextInstance);\n            nextInstance = getNextHydratableSibling(nextInstance);\n          }\n        }\n\n        popToNextHostParent(fiber);\n        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n        return true;\n      }\n\n      function resetHydrationState() {\n        if (!supportsHydration) {\n          return;\n        }\n\n        hydrationParentFiber = null;\n        nextHydratableInstance = null;\n        isHydrating = false;\n      }\n\n      var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;\n      var didWarnAboutBadClass = void 0;\n      var didWarnAboutContextTypeOnFunctionComponent = void 0;\n      var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;\n      var didWarnAboutFunctionRefs = void 0;\n      {\n        didWarnAboutBadClass = {};\n        didWarnAboutContextTypeOnFunctionComponent = {};\n        didWarnAboutGetDerivedStateOnFunctionComponent = {};\n        didWarnAboutFunctionRefs = {};\n      }\n\n      function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {\n        if (current$$1 === null) {\n          // If this is a fresh new component that hasn't been rendered yet, we\n          // won't update its child set by applying minimal side-effects. Instead,\n          // we will add them all to the child before it gets rendered. That means\n          // we can optimize this reconciliation pass by not tracking side-effects.\n          workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);\n        } else {\n          // If the current child is the same as the work in progress, it means that\n          // we haven't yet started any work on these children. Therefore, we use\n          // the clone algorithm to create a copy of all the current children.\n          // If we had any progressed work already, that is invalid at this point so\n          // let's throw it out.\n          workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);\n        }\n      }\n\n      function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {\n        // This function is fork of reconcileChildren. It's used in cases where we\n        // want to reconcile without matching against the existing set. This has the\n        // effect of all current children being unmounted; even if the type and key\n        // are the same, the old child is unmounted and a new child is created.\n        //\n        // To do this, we're going to go through the reconcile algorithm twice. In\n        // the first pass, we schedule a deletion for all the current children by\n        // passing null.\n        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we\n        // pass null in place of where we usually pass the current child set. This has\n        // the effect of remounting all children regardless of whether their their\n        // identity matches.\n\n        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);\n      }\n\n      function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {\n        var render = Component.render;\n        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n        var nextChildren = void 0;\n        prepareToReadContext(workInProgress, renderExpirationTime);\n        prepareToUseHooks(current$$1, workInProgress, renderExpirationTime);\n        {\n          ReactCurrentOwner$2.current = workInProgress;\n          setCurrentPhase('render');\n          nextChildren = render(nextProps, ref);\n          setCurrentPhase(null);\n        }\n        nextChildren = finishHooks(render, nextProps, nextChildren, ref); // React DevTools reads this flag.\n\n        workInProgress.effectTag |= PerformedWork;\n        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);\n        return workInProgress.child;\n      }\n\n      function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {\n        if (current$$1 === null) {\n          var type = Component.type;\n\n          if (isSimpleFunctionComponent(type) && Component.compare === null) {\n            // If this is a plain function component without default props,\n            // and with only the default shallow comparison, we upgrade it\n            // to a SimpleMemoComponent to allow fast path updates.\n            workInProgress.tag = SimpleMemoComponent;\n            workInProgress.type = type;\n            {\n              validateFunctionComponentInDev(workInProgress, type);\n            }\n            return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);\n          }\n\n          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);\n          child.ref = workInProgress.ref;\n          child.return = workInProgress;\n          workInProgress.child = child;\n          return child;\n        }\n\n        var currentChild = current$$1.child; // This is always exactly one child\n\n        if (updateExpirationTime < renderExpirationTime) {\n          // This will be the props with resolved defaultProps,\n          // unlike current.memoizedProps which will be the unresolved ones.\n          var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n          var compare = Component.compare;\n          compare = compare !== null ? compare : shallowEqual;\n\n          if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {\n            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);\n          }\n        } // React DevTools reads this flag.\n\n\n        workInProgress.effectTag |= PerformedWork;\n        var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);\n        newChild.ref = workInProgress.ref;\n        newChild.return = workInProgress;\n        workInProgress.child = newChild;\n        return newChild;\n      }\n\n      function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {\n        if (current$$1 !== null && updateExpirationTime < renderExpirationTime) {\n          var prevProps = current$$1.memoizedProps;\n\n          if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {\n            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);\n          }\n        }\n\n        return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);\n      }\n\n      function updateFragment(current$$1, workInProgress, renderExpirationTime) {\n        var nextChildren = workInProgress.pendingProps;\n        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);\n        return workInProgress.child;\n      }\n\n      function updateMode(current$$1, workInProgress, renderExpirationTime) {\n        var nextChildren = workInProgress.pendingProps.children;\n        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);\n        return workInProgress.child;\n      }\n\n      function updateProfiler(current$$1, workInProgress, renderExpirationTime) {\n        {\n          workInProgress.effectTag |= Update;\n        }\n        var nextProps = workInProgress.pendingProps;\n        var nextChildren = nextProps.children;\n        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);\n        return workInProgress.child;\n      }\n\n      function markRef(current$$1, workInProgress) {\n        var ref = workInProgress.ref;\n\n        if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {\n          // Schedule a Ref effect\n          workInProgress.effectTag |= Ref;\n        }\n      }\n\n      function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n        var context = getMaskedContext(workInProgress, unmaskedContext);\n        var nextChildren = void 0;\n        prepareToReadContext(workInProgress, renderExpirationTime);\n        prepareToUseHooks(current$$1, workInProgress, renderExpirationTime);\n        {\n          ReactCurrentOwner$2.current = workInProgress;\n          setCurrentPhase('render');\n          nextChildren = Component(nextProps, context);\n          setCurrentPhase(null);\n        }\n        nextChildren = finishHooks(Component, nextProps, nextChildren, context); // React DevTools reads this flag.\n\n        workInProgress.effectTag |= PerformedWork;\n        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);\n        return workInProgress.child;\n      }\n\n      function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {\n        // Push context providers early to prevent context stack mismatches.\n        // During mounting we don't know the child context yet as the instance doesn't exist.\n        // We will invalidate the child context in finishClassComponent() right after rendering.\n        var hasContext = void 0;\n\n        if (isContextProvider(Component)) {\n          hasContext = true;\n          pushContextProvider(workInProgress);\n        } else {\n          hasContext = false;\n        }\n\n        prepareToReadContext(workInProgress, renderExpirationTime);\n        var instance = workInProgress.stateNode;\n        var shouldUpdate = void 0;\n\n        if (instance === null) {\n          if (current$$1 !== null) {\n            // An class component without an instance only mounts if it suspended\n            // inside a non- concurrent tree, in an inconsistent state. We want to\n            // tree it like a new mount, even though an empty version of it already\n            // committed. Disconnect the alternate pointers.\n            current$$1.alternate = null;\n            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n            workInProgress.effectTag |= Placement;\n          } // In the initial pass we might need to construct the instance.\n\n\n          constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);\n          mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);\n          shouldUpdate = true;\n        } else if (current$$1 === null) {\n          // In a resume, we'll already have an instance we can reuse.\n          shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);\n        } else {\n          shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);\n        }\n\n        return finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);\n      }\n\n      function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {\n        // Refs should update even if shouldComponentUpdate returns false\n        markRef(current$$1, workInProgress);\n        var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;\n\n        if (!shouldUpdate && !didCaptureError) {\n          // Context providers should defer to sCU for rendering\n          if (hasContext) {\n            invalidateContextProvider(workInProgress, Component, false);\n          }\n\n          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);\n        }\n\n        var instance = workInProgress.stateNode; // Rerender\n\n        ReactCurrentOwner$2.current = workInProgress;\n        var nextChildren = void 0;\n\n        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n          // If we captured an error, but getDerivedStateFrom catch is not defined,\n          // unmount all the children. componentDidCatch will schedule an update to\n          // re-render a fallback. This is temporary until we migrate everyone to\n          // the new API.\n          // TODO: Warn in a future release.\n          nextChildren = null;\n          {\n            stopProfilerTimerIfRunning(workInProgress);\n          }\n        } else {\n          {\n            setCurrentPhase('render');\n            nextChildren = instance.render();\n\n            if (workInProgress.mode & StrictMode) {\n              instance.render();\n            }\n\n            setCurrentPhase(null);\n          }\n        } // React DevTools reads this flag.\n\n\n        workInProgress.effectTag |= PerformedWork;\n\n        if (current$$1 !== null && didCaptureError) {\n          // If we're recovering from an error, reconcile without reusing any of\n          // the existing children. Conceptually, the normal children and the children\n          // that are shown on error are two different sets, so we shouldn't reuse\n          // normal children even if their identities match.\n          forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);\n        } else {\n          reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);\n        } // Memoize state using the values we just used to render.\n        // TODO: Restructure so we never read values from the instance.\n\n\n        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n        if (hasContext) {\n          invalidateContextProvider(workInProgress, Component, true);\n        }\n\n        return workInProgress.child;\n      }\n\n      function pushHostRootContext(workInProgress) {\n        var root = workInProgress.stateNode;\n\n        if (root.pendingContext) {\n          pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n        } else if (root.context) {\n          // Should always be set\n          pushTopLevelContextObject(workInProgress, root.context, false);\n        }\n\n        pushHostContainer(workInProgress, root.containerInfo);\n      }\n\n      function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {\n        pushHostRootContext(workInProgress);\n        var updateQueue = workInProgress.updateQueue;\n        !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        var nextProps = workInProgress.pendingProps;\n        var prevState = workInProgress.memoizedState;\n        var prevChildren = prevState !== null ? prevState.element : null;\n        processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);\n        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property\n        // being called \"element\".\n\n        var nextChildren = nextState.element;\n\n        if (nextChildren === prevChildren) {\n          // If the state is the same as before, that's a bailout because we had\n          // no work that expires at this time.\n          resetHydrationState();\n          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);\n        }\n\n        var root = workInProgress.stateNode;\n\n        if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {\n          // If we don't have any current children this might be the first pass.\n          // We always try to hydrate. If this isn't a hydration pass there won't\n          // be any children to hydrate which is effectively the same thing as\n          // not hydrating.\n          // This is a bit of a hack. We track the host root as a placement to\n          // know that we're currently in a mounting state. That way isMounted\n          // works as expected. We must reset this before committing.\n          // TODO: Delete this when we delete isMounted and findDOMNode.\n          workInProgress.effectTag |= Placement; // Ensure that children mount into this root without tracking\n          // side-effects. This ensures that we don't store Placement effects on\n          // nodes that will be hydrated.\n\n          workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);\n        } else {\n          // Otherwise reset hydration state in case we aborted and resumed another\n          // root.\n          reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);\n          resetHydrationState();\n        }\n\n        return workInProgress.child;\n      }\n\n      function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {\n        pushHostContext(workInProgress);\n\n        if (current$$1 === null) {\n          tryToClaimNextHydratableInstance(workInProgress);\n        }\n\n        var type = workInProgress.type;\n        var nextProps = workInProgress.pendingProps;\n        var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;\n        var nextChildren = nextProps.children;\n        var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n        if (isDirectTextChild) {\n          // We special case a direct text child of a host node. This is a common\n          // case. We won't handle it as a reified child. We will instead handle\n          // this in the host environment that also have access to this prop. That\n          // avoids allocating another HostText fiber and traversing it.\n          nextChildren = null;\n        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n          // If we're switching from a direct text child to a normal child, or to\n          // empty, we need to schedule the text content to be reset.\n          workInProgress.effectTag |= ContentReset;\n        }\n\n        markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.\n\n        if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {\n          // Schedule this fiber to re-render at offscreen priority. Then bailout.\n          workInProgress.expirationTime = Never;\n          return null;\n        }\n\n        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);\n        return workInProgress.child;\n      }\n\n      function updateHostText(current$$1, workInProgress) {\n        if (current$$1 === null) {\n          tryToClaimNextHydratableInstance(workInProgress);\n        } // Nothing to do here. This is terminal. We'll do the completion step\n        // immediately after.\n\n\n        return null;\n      }\n\n      function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {\n        if (_current !== null) {\n          // An lazy component only mounts if it suspended inside a non-\n          // concurrent tree, in an inconsistent state. We want to treat it like\n          // a new mount, even though an empty version of it already committed.\n          // Disconnect the alternate pointers.\n          _current.alternate = null;\n          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n          workInProgress.effectTag |= Placement;\n        }\n\n        var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.\n        // Cancel and resume right after we know the tag.\n\n        cancelWorkTimer(workInProgress);\n        var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.\n\n        workInProgress.type = Component;\n        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n        startWorkTimer(workInProgress);\n        var resolvedProps = resolveDefaultProps(Component, props);\n        var child = void 0;\n\n        switch (resolvedTag) {\n          case FunctionComponent:\n            {\n              child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);\n              break;\n            }\n\n          case ClassComponent:\n            {\n              child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);\n              break;\n            }\n\n          case ForwardRef:\n            {\n              child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);\n              break;\n            }\n\n          case MemoComponent:\n            {\n              child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n              updateExpirationTime, renderExpirationTime);\n              break;\n            }\n\n          default:\n            {\n              // This message intentionally doesn't mention ForwardRef or MemoComponent\n              // because the fact that it's a separate type of work is an\n              // implementation detail.\n              invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.', Component);\n            }\n        }\n\n        return child;\n      }\n\n      function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {\n        if (_current !== null) {\n          // An incomplete component only mounts if it suspended inside a non-\n          // concurrent tree, in an inconsistent state. We want to treat it like\n          // a new mount, even though an empty version of it already committed.\n          // Disconnect the alternate pointers.\n          _current.alternate = null;\n          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n          workInProgress.effectTag |= Placement;\n        } // Promote the fiber to a class and try rendering again.\n\n\n        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n        // Push context providers early to prevent context stack mismatches.\n        // During mounting we don't know the child context yet as the instance doesn't exist.\n        // We will invalidate the child context in finishClassComponent() right after rendering.\n\n        var hasContext = void 0;\n\n        if (isContextProvider(Component)) {\n          hasContext = true;\n          pushContextProvider(workInProgress);\n        } else {\n          hasContext = false;\n        }\n\n        prepareToReadContext(workInProgress, renderExpirationTime);\n        constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);\n        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);\n        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);\n      }\n\n      function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {\n        if (_current !== null) {\n          // An indeterminate component only mounts if it suspended inside a non-\n          // concurrent tree, in an inconsistent state. We want to treat it like\n          // a new mount, even though an empty version of it already committed.\n          // Disconnect the alternate pointers.\n          _current.alternate = null;\n          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n          workInProgress.effectTag |= Placement;\n        }\n\n        var props = workInProgress.pendingProps;\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n        var context = getMaskedContext(workInProgress, unmaskedContext);\n        prepareToReadContext(workInProgress, renderExpirationTime);\n        prepareToUseHooks(null, workInProgress, renderExpirationTime);\n        var value = void 0;\n        {\n          if (Component.prototype && typeof Component.prototype.render === 'function') {\n            var componentName = getComponentName(Component) || 'Unknown';\n\n            if (!didWarnAboutBadClass[componentName]) {\n              warningWithoutStack$1(false, \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n              didWarnAboutBadClass[componentName] = true;\n            }\n          }\n\n          if (workInProgress.mode & StrictMode) {\n            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n          }\n\n          ReactCurrentOwner$2.current = workInProgress;\n          value = Component(props, context);\n        } // React DevTools reads this flag.\n\n        workInProgress.effectTag |= PerformedWork;\n\n        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n          // Proceed under the assumption that this is a class instance\n          workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n          resetHooks(); // Push context providers early to prevent context stack mismatches.\n          // During mounting we don't know the child context yet as the instance doesn't exist.\n          // We will invalidate the child context in finishClassComponent() right after rendering.\n\n          var hasContext = false;\n\n          if (isContextProvider(Component)) {\n            hasContext = true;\n            pushContextProvider(workInProgress);\n          } else {\n            hasContext = false;\n          }\n\n          workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n          var getDerivedStateFromProps = Component.getDerivedStateFromProps;\n\n          if (typeof getDerivedStateFromProps === 'function') {\n            applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);\n          }\n\n          adoptClassInstance(workInProgress, value);\n          mountClassInstance(workInProgress, Component, props, renderExpirationTime);\n          return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);\n        } else {\n          // Proceed under the assumption that this is a function component\n          workInProgress.tag = FunctionComponent;\n          value = finishHooks(Component, props, value, context);\n          reconcileChildren(null, workInProgress, value, renderExpirationTime);\n          {\n            validateFunctionComponentInDev(workInProgress, Component);\n          }\n          return workInProgress.child;\n        }\n      }\n\n      function validateFunctionComponentInDev(workInProgress, Component) {\n        if (Component) {\n          !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;\n        }\n\n        if (workInProgress.ref !== null) {\n          var info = '';\n          var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n\n          var warningKey = ownerName || workInProgress._debugID || '';\n          var debugSource = workInProgress._debugSource;\n\n          if (debugSource) {\n            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n          }\n\n          if (!didWarnAboutFunctionRefs[warningKey]) {\n            didWarnAboutFunctionRefs[warningKey] = true;\n            warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s', info);\n          }\n        }\n\n        if (typeof Component.getDerivedStateFromProps === 'function') {\n          var componentName = getComponentName(Component) || 'Unknown';\n\n          if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n            warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', componentName);\n            didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n          }\n        }\n\n        if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n          var _componentName = getComponentName(Component) || 'Unknown';\n\n          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName]) {\n            warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName);\n            didWarnAboutContextTypeOnFunctionComponent[_componentName] = true;\n          }\n        }\n      }\n\n      function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {\n        var mode = workInProgress.mode;\n        var nextProps = workInProgress.pendingProps; // We should attempt to render the primary children unless this boundary\n        // already suspended during this render (`alreadyCaptured` is true).\n\n        var nextState = workInProgress.memoizedState;\n        var nextDidTimeout = void 0;\n\n        if ((workInProgress.effectTag & DidCapture) === NoEffect) {\n          // This is the first attempt.\n          nextState = null;\n          nextDidTimeout = false;\n        } else {\n          // Something in this boundary's subtree already suspended. Switch to\n          // rendering the fallback children.\n          nextState = {\n            timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork\n          };\n          nextDidTimeout = true;\n          workInProgress.effectTag &= ~DidCapture;\n        } // This next part is a bit confusing. If the children timeout, we switch to\n        // showing the fallback children in place of the \"primary\" children.\n        // However, we don't want to delete the primary children because then their\n        // state will be lost (both the React state and the host state, e.g.\n        // uncontrolled form inputs). Instead we keep them mounted and hide them.\n        // Both the fallback children AND the primary children are rendered at the\n        // same time. Once the primary children are un-suspended, we can delete\n        // the fallback children — don't need to preserve their state.\n        //\n        // The two sets of children are siblings in the host environment, but\n        // semantically, for purposes of reconciliation, they are two separate sets.\n        // So we store them using two fragment fibers.\n        //\n        // However, we want to avoid allocating extra fibers for every placeholder.\n        // They're only necessary when the children time out, because that's the\n        // only time when both sets are mounted.\n        //\n        // So, the extra fragment fibers are only used if the children time out.\n        // Otherwise, we render the primary children directly. This requires some\n        // custom reconciliation logic to preserve the state of the primary\n        // children. It's essentially a very basic form of re-parenting.\n        // `child` points to the child fiber. In the normal case, this is the first\n        // fiber of the primary children set. In the timed-out case, it's a\n        // a fragment fiber containing the primary children.\n\n\n        var child = void 0; // `next` points to the next fiber React should render. In the normal case,\n        // it's the same as `child`: the first fiber of the primary children set.\n        // In the timed-out case, it's a fragment fiber containing the *fallback*\n        // children -- we skip over the primary children entirely.\n\n        var next = void 0;\n\n        if (current$$1 === null) {\n          // This is the initial mount. This branch is pretty simple because there's\n          // no previous state that needs to be preserved.\n          if (nextDidTimeout) {\n            // Mount separate fragments for primary and fallback children.\n            var nextFallbackChildren = nextProps.fallback;\n            var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);\n\n            if ((workInProgress.mode & ConcurrentMode) === NoContext) {\n              // Outside of concurrent mode, we commit the effects from the\n              var progressedState = workInProgress.memoizedState;\n              var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;\n              primaryChildFragment.child = progressedPrimaryChild;\n            }\n\n            var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);\n            primaryChildFragment.sibling = fallbackChildFragment;\n            child = primaryChildFragment; // Skip the primary children, and continue working on the\n            // fallback children.\n\n            next = fallbackChildFragment;\n            child.return = next.return = workInProgress;\n          } else {\n            // Mount the primary children without an intermediate fragment fiber.\n            var nextPrimaryChildren = nextProps.children;\n            child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);\n          }\n        } else {\n          // This is an update. This branch is more complicated because we need to\n          // ensure the state of the primary children is preserved.\n          var prevState = current$$1.memoizedState;\n          var prevDidTimeout = prevState !== null;\n\n          if (prevDidTimeout) {\n            // The current tree already timed out. That means each child set is\n            var currentPrimaryChildFragment = current$$1.child;\n            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n\n            if (nextDidTimeout) {\n              // Still timed out. Reuse the current primary children by cloning\n              // its fragment. We're going to skip over these entirely.\n              var _nextFallbackChildren = nextProps.fallback;\n\n              var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);\n\n              if ((workInProgress.mode & ConcurrentMode) === NoContext) {\n                // Outside of concurrent mode, we commit the effects from the\n                var _progressedState = workInProgress.memoizedState;\n\n                var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;\n\n                if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {\n                  _primaryChildFragment.child = _progressedPrimaryChild;\n                }\n              } // Because primaryChildFragment is a new fiber that we're inserting as the\n              // parent of a new tree, we need to set its treeBaseDuration.\n\n\n              if (workInProgress.mode & ProfileMode) {\n                // treeBaseDuration is the sum of all the child tree base durations.\n                var treeBaseDuration = 0;\n                var hiddenChild = _primaryChildFragment.child;\n\n                while (hiddenChild !== null) {\n                  treeBaseDuration += hiddenChild.treeBaseDuration;\n                  hiddenChild = hiddenChild.sibling;\n                }\n\n                _primaryChildFragment.treeBaseDuration = treeBaseDuration;\n              } // Clone the fallback child fragment, too. These we'll continue\n              // working on.\n\n\n              var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);\n\n              child = _primaryChildFragment;\n              _primaryChildFragment.childExpirationTime = NoWork; // Skip the primary children, and continue working on the\n              // fallback children.\n\n              next = _fallbackChildFragment;\n              child.return = next.return = workInProgress;\n            } else {\n              // No longer suspended. Switch back to showing the primary children,\n              // and remove the intermediate fragment fiber.\n              var _nextPrimaryChildren = nextProps.children;\n              var currentPrimaryChild = currentPrimaryChildFragment.child;\n              var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback\n              // children. Wait until the complete phase, after we've confirmed the\n              // fallback is no longer needed.\n              // TODO: Would it be better to store the fallback fragment on\n              // the stateNode?\n              // Continue rendering the children, like we normally do.\n\n              child = next = primaryChild;\n            }\n          } else {\n            // The current tree has not already timed out. That means the primary\n            // children are not wrapped in a fragment fiber.\n            var _currentPrimaryChild = current$$1.child;\n\n            if (nextDidTimeout) {\n              // Timed out. Wrap the children in a fragment fiber to keep them\n              // separate from the fallback children.\n              var _nextFallbackChildren2 = nextProps.fallback;\n\n              var _primaryChildFragment2 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't\n              // going to render this fragment.\n              null, mode, NoWork, null);\n\n              _primaryChildFragment2.child = _currentPrimaryChild; // Even though we're creating a new fiber, there are no new children,\n              // because we're reusing an already mounted tree. So we don't need to\n              // schedule a placement.\n              // primaryChildFragment.effectTag |= Placement;\n\n              if ((workInProgress.mode & ConcurrentMode) === NoContext) {\n                // Outside of concurrent mode, we commit the effects from the\n                var _progressedState2 = workInProgress.memoizedState;\n\n                var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;\n\n                _primaryChildFragment2.child = _progressedPrimaryChild2;\n              } // Because primaryChildFragment is a new fiber that we're inserting as the\n              // parent of a new tree, we need to set its treeBaseDuration.\n\n\n              if (workInProgress.mode & ProfileMode) {\n                // treeBaseDuration is the sum of all the child tree base durations.\n                var _treeBaseDuration = 0;\n                var _hiddenChild = _primaryChildFragment2.child;\n\n                while (_hiddenChild !== null) {\n                  _treeBaseDuration += _hiddenChild.treeBaseDuration;\n                  _hiddenChild = _hiddenChild.sibling;\n                }\n\n                _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;\n              } // Create a fragment from the fallback children, too.\n\n\n              var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);\n\n              _fallbackChildFragment2.effectTag |= Placement;\n              child = _primaryChildFragment2;\n              _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the\n              // fallback children.\n\n              next = _fallbackChildFragment2;\n              child.return = next.return = workInProgress;\n            } else {\n              // Still haven't timed out.  Continue rendering the children, like we\n              // normally do.\n              var _nextPrimaryChildren2 = nextProps.children;\n              next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);\n            }\n          }\n        }\n\n        workInProgress.memoizedState = nextState;\n        workInProgress.child = child;\n        return next;\n      }\n\n      function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {\n        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n        var nextChildren = workInProgress.pendingProps;\n\n        if (current$$1 === null) {\n          // Portals are special because we don't append the children during mount\n          // but at commit. Therefore we need to track insertions which the normal\n          // flow doesn't do during mount. This doesn't happen at the root because\n          // the root always starts with a \"current\" with a null child.\n          // TODO: Consider unifying this with how the root works.\n          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);\n        } else {\n          reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);\n        }\n\n        return workInProgress.child;\n      }\n\n      function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {\n        var providerType = workInProgress.type;\n        var context = providerType._context;\n        var newProps = workInProgress.pendingProps;\n        var oldProps = workInProgress.memoizedProps;\n        var newValue = newProps.value;\n        {\n          var providerPropTypes = workInProgress.type.propTypes;\n\n          if (providerPropTypes) {\n            checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);\n          }\n        }\n        pushProvider(workInProgress, newValue);\n\n        if (oldProps !== null) {\n          var oldValue = oldProps.value;\n          var changedBits = calculateChangedBits(context, newValue, oldValue);\n\n          if (changedBits === 0) {\n            // No change. Bailout early if children are the same.\n            if (oldProps.children === newProps.children && !hasContextChanged()) {\n              return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);\n            }\n          } else {\n            // The context value changed. Search for matching consumers and schedule\n            // them to update.\n            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);\n          }\n        }\n\n        var newChildren = newProps.children;\n        reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);\n        return workInProgress.child;\n      }\n\n      var hasWarnedAboutUsingContextAsConsumer = false;\n\n      function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {\n        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n        // DEV mode, we create a separate object for Context.Consumer that acts\n        // like a proxy to Context. This proxy object adds unnecessary code in PROD\n        // so we use the old behaviour (Context.Consumer references Context) to\n        // reduce size and overhead. The separate object references context via\n        // a property called \"_context\", which also gives us the ability to check\n        // in DEV mode if this property exists or not and warn if it does not.\n\n        {\n          if (context._context === undefined) {\n            // This may be because it's a Context (rather than a Consumer).\n            // Or it may be because it's older React where they're the same thing.\n            // We only want to warn if we're sure it's a new React.\n            if (context !== context.Consumer) {\n              if (!hasWarnedAboutUsingContextAsConsumer) {\n                hasWarnedAboutUsingContextAsConsumer = true;\n                warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n              }\n            }\n          } else {\n            context = context._context;\n          }\n        }\n        var newProps = workInProgress.pendingProps;\n        var render = newProps.children;\n        {\n          !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;\n        }\n        prepareToReadContext(workInProgress, renderExpirationTime);\n        var newValue = readContext(context, newProps.unstable_observedBits);\n        var newChildren = void 0;\n        {\n          ReactCurrentOwner$2.current = workInProgress;\n          setCurrentPhase('render');\n          newChildren = render(newValue);\n          setCurrentPhase(null);\n        } // React DevTools reads this flag.\n\n        workInProgress.effectTag |= PerformedWork;\n        reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);\n        return workInProgress.child;\n      }\n\n      function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {\n        cancelWorkTimer(workInProgress);\n\n        if (current$$1 !== null) {\n          // Reuse previous context list\n          workInProgress.firstContextDependency = current$$1.firstContextDependency;\n        }\n\n        {\n          // Don't update \"base\" render times for bailouts.\n          stopProfilerTimerIfRunning(workInProgress);\n        } // Check if the children have any pending work.\n\n        var childExpirationTime = workInProgress.childExpirationTime;\n\n        if (childExpirationTime < renderExpirationTime) {\n          // The children don't have any work either. We can skip them.\n          // TODO: Once we add back resuming, we should check if the children are\n          // a work-in-progress set. If so, we need to transfer their effects.\n          return null;\n        } else {\n          // This fiber doesn't have work, but its subtree does. Clone the child\n          // fibers and continue.\n          cloneChildFibers(current$$1, workInProgress);\n          return workInProgress.child;\n        }\n      }\n\n      function beginWork(current$$1, workInProgress, renderExpirationTime) {\n        var updateExpirationTime = workInProgress.expirationTime;\n\n        if (current$$1 !== null) {\n          var oldProps = current$$1.memoizedProps;\n          var newProps = workInProgress.pendingProps;\n\n          if (oldProps === newProps && !hasContextChanged() && updateExpirationTime < renderExpirationTime) {\n            // This fiber does not have any pending work. Bailout without entering\n            // the begin phase. There's still some bookkeeping we that needs to be done\n            // in this optimized path, mostly pushing stuff onto the stack.\n            switch (workInProgress.tag) {\n              case HostRoot:\n                pushHostRootContext(workInProgress);\n                resetHydrationState();\n                break;\n\n              case HostComponent:\n                pushHostContext(workInProgress);\n                break;\n\n              case ClassComponent:\n                {\n                  var Component = workInProgress.type;\n\n                  if (isContextProvider(Component)) {\n                    pushContextProvider(workInProgress);\n                  }\n\n                  break;\n                }\n\n              case HostPortal:\n                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n                break;\n\n              case ContextProvider:\n                {\n                  var newValue = workInProgress.memoizedProps.value;\n                  pushProvider(workInProgress, newValue);\n                  break;\n                }\n\n              case Profiler:\n                {\n                  workInProgress.effectTag |= Update;\n                }\n                break;\n\n              case SuspenseComponent:\n                {\n                  var state = workInProgress.memoizedState;\n                  var didTimeout = state !== null;\n\n                  if (didTimeout) {\n                    // If this boundary is currently timed out, we need to decide\n                    // whether to retry the primary children, or to skip over it and\n                    // go straight to the fallback. Check the priority of the primary\n                    var primaryChildFragment = workInProgress.child;\n                    var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;\n\n                    if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {\n                      // The primary children have pending work. Use the normal path\n                      // to attempt to render the primary children again.\n                      return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);\n                    } else {\n                      // The primary children do not have pending work with sufficient\n                      // priority. Bailout.\n                      var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);\n\n                      if (child !== null) {\n                        // The fallback children have pending work. Skip over the\n                        // primary children and work on the fallback.\n                        return child.sibling;\n                      } else {\n                        return null;\n                      }\n                    }\n                  }\n\n                  break;\n                }\n            }\n\n            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);\n          }\n        } // Before entering the begin phase, clear the expiration time.\n\n\n        workInProgress.expirationTime = NoWork;\n\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n            {\n              var elementType = workInProgress.elementType;\n              return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);\n            }\n\n          case LazyComponent:\n            {\n              var _elementType = workInProgress.elementType;\n              return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);\n            }\n\n          case FunctionComponent:\n            {\n              var _Component = workInProgress.type;\n              var unresolvedProps = workInProgress.pendingProps;\n              var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);\n              return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);\n            }\n\n          case ClassComponent:\n            {\n              var _Component2 = workInProgress.type;\n              var _unresolvedProps = workInProgress.pendingProps;\n\n              var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);\n\n              return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);\n            }\n\n          case HostRoot:\n            return updateHostRoot(current$$1, workInProgress, renderExpirationTime);\n\n          case HostComponent:\n            return updateHostComponent(current$$1, workInProgress, renderExpirationTime);\n\n          case HostText:\n            return updateHostText(current$$1, workInProgress);\n\n          case SuspenseComponent:\n            return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);\n\n          case HostPortal:\n            return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);\n\n          case ForwardRef:\n            {\n              var type = workInProgress.type;\n              var _unresolvedProps2 = workInProgress.pendingProps;\n\n              var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n              return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);\n            }\n\n          case Fragment:\n            return updateFragment(current$$1, workInProgress, renderExpirationTime);\n\n          case Mode:\n            return updateMode(current$$1, workInProgress, renderExpirationTime);\n\n          case Profiler:\n            return updateProfiler(current$$1, workInProgress, renderExpirationTime);\n\n          case ContextProvider:\n            return updateContextProvider(current$$1, workInProgress, renderExpirationTime);\n\n          case ContextConsumer:\n            return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);\n\n          case MemoComponent:\n            {\n              var _type = workInProgress.type;\n              var _unresolvedProps3 = workInProgress.pendingProps;\n\n              var _resolvedProps3 = resolveDefaultProps(_type.type, _unresolvedProps3);\n\n              return updateMemoComponent(current$$1, workInProgress, _type, _resolvedProps3, updateExpirationTime, renderExpirationTime);\n            }\n\n          case SimpleMemoComponent:\n            {\n              return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);\n            }\n\n          case IncompleteClassComponent:\n            {\n              var _Component3 = workInProgress.type;\n              var _unresolvedProps4 = workInProgress.pendingProps;\n\n              var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);\n\n              return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);\n            }\n\n          default:\n            invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');\n        }\n      }\n\n      function markUpdate(workInProgress) {\n        // Tag the fiber with an update effect. This turns a Placement into\n        // a PlacementAndUpdate.\n        workInProgress.effectTag |= Update;\n      }\n\n      function markRef$1(workInProgress) {\n        workInProgress.effectTag |= Ref;\n      }\n\n      var appendAllChildren = void 0;\n      var updateHostContainer = void 0;\n      var updateHostComponent$1 = void 0;\n      var updateHostText$1 = void 0;\n\n      if (supportsMutation) {\n        // Mutation mode\n        appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n          // We only have the top Fiber that was created but we need recurse down its\n          // children to find all the terminal nodes.\n          var node = workInProgress.child;\n\n          while (node !== null) {\n            if (node.tag === HostComponent || node.tag === HostText) {\n              appendInitialChild(parent, node.stateNode);\n            } else if (node.tag === HostPortal) ;else if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            }\n\n            if (node === workInProgress) {\n              return;\n            }\n\n            while (node.sibling === null) {\n              if (node.return === null || node.return === workInProgress) {\n                return;\n              }\n\n              node = node.return;\n            }\n\n            node.sibling.return = node.return;\n            node = node.sibling;\n          }\n        };\n\n        updateHostContainer = function (workInProgress) {// Noop\n        };\n\n        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n          // If we have an alternate, that means this is an update and we need to\n          // schedule a side-effect to do the updates.\n          var oldProps = current.memoizedProps;\n\n          if (oldProps === newProps) {\n            // In mutation mode, this is sufficient for a bailout because\n            // we won't touch this node even if children changed.\n            return;\n          } // If we get updated because one of our children updated, we don't\n          // have newProps so we'll have to reuse them.\n          // TODO: Split the update API as separate for the props vs. children.\n          // Even better would be if children weren't special cased at all tho.\n\n\n          var instance = workInProgress.stateNode;\n          var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n          // component is hitting the resume path. Figure out why. Possibly\n          // related to `hidden`.\n\n          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n          workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n          // is a new ref we mark this as an update. All the work is done in commitWork.\n\n          if (updatePayload) {\n            markUpdate(workInProgress);\n          }\n        };\n\n        updateHostText$1 = function (current, workInProgress, oldText, newText) {\n          // If the text differs, mark it as an update. All the work in done in commitWork.\n          if (oldText !== newText) {\n            markUpdate(workInProgress);\n          }\n        };\n      } else if (supportsPersistence) {\n        // Persistent host tree mode\n        appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n          // We only have the top Fiber that was created but we need recurse down its\n          // children to find all the terminal nodes.\n          var node = workInProgress.child;\n\n          while (node !== null) {\n            // eslint-disable-next-line no-labels\n            branches: if (node.tag === HostComponent) {\n              var instance = node.stateNode;\n\n              if (needsVisibilityToggle) {\n                var props = node.memoizedProps;\n                var type = node.type;\n\n                if (isHidden) {\n                  // This child is inside a timed out tree. Hide it.\n                  instance = cloneHiddenInstance(instance, type, props, node);\n                } else {\n                  // This child was previously inside a timed out tree. If it was not\n                  // updated during this render, it may need to be unhidden. Clone\n                  // again to be sure.\n                  instance = cloneUnhiddenInstance(instance, type, props, node);\n                }\n\n                node.stateNode = instance;\n              }\n\n              appendInitialChild(parent, instance);\n            } else if (node.tag === HostText) {\n              var _instance = node.stateNode;\n\n              if (needsVisibilityToggle) {\n                var text = node.memoizedProps;\n                var rootContainerInstance = getRootHostContainer();\n                var currentHostContext = getHostContext();\n\n                if (isHidden) {\n                  _instance = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);\n                } else {\n                  _instance = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);\n                }\n\n                node.stateNode = _instance;\n              }\n\n              appendInitialChild(parent, _instance);\n            } else if (node.tag === HostPortal) ;else if (node.tag === SuspenseComponent) {\n              var current = node.alternate;\n\n              if (current !== null) {\n                var oldState = current.memoizedState;\n                var newState = node.memoizedState;\n                var oldIsHidden = oldState !== null;\n                var newIsHidden = newState !== null;\n\n                if (oldIsHidden !== newIsHidden) {\n                  // The placeholder either just timed out or switched back to the normal\n                  // children after having previously timed out. Toggle the visibility of\n                  // the direct host children.\n                  var primaryChildParent = newIsHidden ? node.child : node;\n\n                  if (primaryChildParent !== null) {\n                    appendAllChildren(parent, primaryChildParent, true, newIsHidden);\n                  } // eslint-disable-next-line no-labels\n\n\n                  break branches;\n                }\n              }\n\n              if (node.child !== null) {\n                // Continue traversing like normal\n                node.child.return = node;\n                node = node.child;\n                continue;\n              }\n            } else if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n            node = node;\n\n            if (node === workInProgress) {\n              return;\n            }\n\n            while (node.sibling === null) {\n              if (node.return === null || node.return === workInProgress) {\n                return;\n              }\n\n              node = node.return;\n            }\n\n            node.sibling.return = node.return;\n            node = node.sibling;\n          }\n        }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n\n        var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n          // We only have the top Fiber that was created but we need recurse down its\n          // children to find all the terminal nodes.\n          var node = workInProgress.child;\n\n          while (node !== null) {\n            // eslint-disable-next-line no-labels\n            branches: if (node.tag === HostComponent) {\n              var instance = node.stateNode;\n\n              if (needsVisibilityToggle) {\n                var props = node.memoizedProps;\n                var type = node.type;\n\n                if (isHidden) {\n                  // This child is inside a timed out tree. Hide it.\n                  instance = cloneHiddenInstance(instance, type, props, node);\n                } else {\n                  // This child was previously inside a timed out tree. If it was not\n                  // updated during this render, it may need to be unhidden. Clone\n                  // again to be sure.\n                  instance = cloneUnhiddenInstance(instance, type, props, node);\n                }\n\n                node.stateNode = instance;\n              }\n\n              appendChildToContainerChildSet(containerChildSet, instance);\n            } else if (node.tag === HostText) {\n              var _instance2 = node.stateNode;\n\n              if (needsVisibilityToggle) {\n                var text = node.memoizedProps;\n                var rootContainerInstance = getRootHostContainer();\n                var currentHostContext = getHostContext();\n\n                if (isHidden) {\n                  _instance2 = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);\n                } else {\n                  _instance2 = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);\n                }\n\n                node.stateNode = _instance2;\n              }\n\n              appendChildToContainerChildSet(containerChildSet, _instance2);\n            } else if (node.tag === HostPortal) ;else if (node.tag === SuspenseComponent) {\n              var current = node.alternate;\n\n              if (current !== null) {\n                var oldState = current.memoizedState;\n                var newState = node.memoizedState;\n                var oldIsHidden = oldState !== null;\n                var newIsHidden = newState !== null;\n\n                if (oldIsHidden !== newIsHidden) {\n                  // The placeholder either just timed out or switched back to the normal\n                  // children after having previously timed out. Toggle the visibility of\n                  // the direct host children.\n                  var primaryChildParent = newIsHidden ? node.child : node;\n\n                  if (primaryChildParent !== null) {\n                    appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);\n                  } // eslint-disable-next-line no-labels\n\n\n                  break branches;\n                }\n              }\n\n              if (node.child !== null) {\n                // Continue traversing like normal\n                node.child.return = node;\n                node = node.child;\n                continue;\n              }\n            } else if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n            node = node;\n\n            if (node === workInProgress) {\n              return;\n            }\n\n            while (node.sibling === null) {\n              if (node.return === null || node.return === workInProgress) {\n                return;\n              }\n\n              node = node.return;\n            }\n\n            node.sibling.return = node.return;\n            node = node.sibling;\n          }\n        };\n\n        updateHostContainer = function (workInProgress) {\n          var portalOrRoot = workInProgress.stateNode;\n          var childrenUnchanged = workInProgress.firstEffect === null;\n          if (childrenUnchanged) ;else {\n            var container = portalOrRoot.containerInfo;\n            var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n            appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n            portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n            markUpdate(workInProgress);\n            finalizeContainerChildren(container, newChildSet);\n          }\n        };\n\n        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n          var currentInstance = current.stateNode;\n          var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n          // This guarantees that we can reuse all of them.\n\n          var childrenUnchanged = workInProgress.firstEffect === null;\n\n          if (childrenUnchanged && oldProps === newProps) {\n            // No changes, just reuse the existing instance.\n            // Note that this might release a previous clone.\n            workInProgress.stateNode = currentInstance;\n            return;\n          }\n\n          var recyclableInstance = workInProgress.stateNode;\n          var currentHostContext = getHostContext();\n          var updatePayload = null;\n\n          if (oldProps !== newProps) {\n            updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n          }\n\n          if (childrenUnchanged && updatePayload === null) {\n            // No changes, just reuse the existing instance.\n            // Note that this might release a previous clone.\n            workInProgress.stateNode = currentInstance;\n            return;\n          }\n\n          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n\n          if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n            markUpdate(workInProgress);\n          }\n\n          workInProgress.stateNode = newInstance;\n\n          if (childrenUnchanged) {\n            // If there are no other effects in this tree, we need to flag this node as having one.\n            // Even though we're not going to use it for anything.\n            // Otherwise parents won't know that there are new children to propagate upwards.\n            markUpdate(workInProgress);\n          } else {\n            // If children might have changed, we have to add them all to the set.\n            appendAllChildren(newInstance, workInProgress, false, false);\n          }\n        };\n\n        updateHostText$1 = function (current, workInProgress, oldText, newText) {\n          if (oldText !== newText) {\n            // If the text content differs, we'll create a new text instance for it.\n            var rootContainerInstance = getRootHostContainer();\n            var currentHostContext = getHostContext();\n            workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n            // This lets the parents know that at least one of their children has changed.\n\n            markUpdate(workInProgress);\n          }\n        };\n      } else {\n        // No host operations\n        updateHostContainer = function (workInProgress) {// Noop\n        };\n\n        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n        };\n\n        updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop\n        };\n      }\n\n      function completeWork(current, workInProgress, renderExpirationTime) {\n        var newProps = workInProgress.pendingProps;\n\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n            break;\n\n          case LazyComponent:\n            break;\n\n          case SimpleMemoComponent:\n          case FunctionComponent:\n            break;\n\n          case ClassComponent:\n            {\n              var Component = workInProgress.type;\n\n              if (isContextProvider(Component)) {\n                popContext(workInProgress);\n              }\n\n              break;\n            }\n\n          case HostRoot:\n            {\n              popHostContainer(workInProgress);\n              popTopLevelContextObject(workInProgress);\n              var fiberRoot = workInProgress.stateNode;\n\n              if (fiberRoot.pendingContext) {\n                fiberRoot.context = fiberRoot.pendingContext;\n                fiberRoot.pendingContext = null;\n              }\n\n              if (current === null || current.child === null) {\n                // If we hydrated, pop so that we can delete any remaining children\n                // that weren't hydrated.\n                popHydrationState(workInProgress); // This resets the hacky state to fix isMounted before committing.\n                // TODO: Delete this when we delete isMounted and findDOMNode.\n\n                workInProgress.effectTag &= ~Placement;\n              }\n\n              updateHostContainer(workInProgress);\n              break;\n            }\n\n          case HostComponent:\n            {\n              popHostContext(workInProgress);\n              var rootContainerInstance = getRootHostContainer();\n              var type = workInProgress.type;\n\n              if (current !== null && workInProgress.stateNode != null) {\n                updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\n\n                if (current.ref !== workInProgress.ref) {\n                  markRef$1(workInProgress);\n                }\n              } else {\n                if (!newProps) {\n                  !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.\n\n                  break;\n                }\n\n                var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n                // \"stack\" as the parent. Then append children as we go in beginWork\n                // or completeWork depending on we want to add then top->down or\n                // bottom->up. Top->down is faster in IE11.\n\n                var wasHydrated = popHydrationState(workInProgress);\n\n                if (wasHydrated) {\n                  // TODO: Move this and createInstance step into the beginPhase\n                  // to consolidate.\n                  if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n                    // If changes to the hydrated node needs to be applied at the\n                    // commit-phase we mark this as such.\n                    markUpdate(workInProgress);\n                  }\n                } else {\n                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n                  appendAllChildren(instance, workInProgress, false, false); // Certain renderers require commit-time effects for initial mount.\n                  // (eg DOM renderer supports auto-focus for certain elements).\n                  // Make sure such renderers get scheduled for later work.\n\n                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n                    markUpdate(workInProgress);\n                  }\n\n                  workInProgress.stateNode = instance;\n                }\n\n                if (workInProgress.ref !== null) {\n                  // If there is a ref on a host node we need to schedule a callback\n                  markRef$1(workInProgress);\n                }\n              }\n\n              break;\n            }\n\n          case HostText:\n            {\n              var newText = newProps;\n\n              if (current && workInProgress.stateNode != null) {\n                var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n                // to schedule a side-effect to do the updates.\n\n                updateHostText$1(current, workInProgress, oldText, newText);\n              } else {\n                if (typeof newText !== 'string') {\n                  !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.\n                }\n\n                var _rootContainerInstance = getRootHostContainer();\n\n                var _currentHostContext = getHostContext();\n\n                var _wasHydrated = popHydrationState(workInProgress);\n\n                if (_wasHydrated) {\n                  if (prepareToHydrateHostTextInstance(workInProgress)) {\n                    markUpdate(workInProgress);\n                  }\n                } else {\n                  workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n                }\n              }\n\n              break;\n            }\n\n          case ForwardRef:\n            break;\n\n          case SuspenseComponent:\n            {\n              var nextState = workInProgress.memoizedState;\n\n              if ((workInProgress.effectTag & DidCapture) !== NoEffect) {\n                // Something suspended. Re-render with the fallback children.\n                workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.\n\n                return workInProgress;\n              }\n\n              var nextDidTimeout = nextState !== null;\n              var prevDidTimeout = current !== null && current.memoizedState !== null;\n\n              if (current !== null && !nextDidTimeout && prevDidTimeout) {\n                // We just switched from the fallback to the normal children. Delete\n                // the fallback.\n                // TODO: Would it be better to store the fallback fragment on\n                var currentFallbackChild = current.child.sibling;\n\n                if (currentFallbackChild !== null) {\n                  // Deletions go at the beginning of the return fiber's effect list\n                  var first = workInProgress.firstEffect;\n\n                  if (first !== null) {\n                    workInProgress.firstEffect = currentFallbackChild;\n                    currentFallbackChild.nextEffect = first;\n                  } else {\n                    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;\n                    currentFallbackChild.nextEffect = null;\n                  }\n\n                  currentFallbackChild.effectTag = Deletion;\n                }\n              } // The children either timed out after previously being visible, or\n              // were restored after previously being hidden. Schedule an effect\n              // to update their visiblity.\n\n\n              if ( //\n              nextDidTimeout !== prevDidTimeout || // Outside concurrent mode, the primary children commit in an\n              // inconsistent state, even if they are hidden. So if they are hidden,\n              // we need to schedule an effect to re-hide them, just in case.\n              (workInProgress.effectTag & ConcurrentMode) === NoContext && nextDidTimeout) {\n                workInProgress.effectTag |= Update;\n              }\n\n              break;\n            }\n\n          case Fragment:\n            break;\n\n          case Mode:\n            break;\n\n          case Profiler:\n            break;\n\n          case HostPortal:\n            popHostContainer(workInProgress);\n            updateHostContainer(workInProgress);\n            break;\n\n          case ContextProvider:\n            // Pop provider fiber\n            popProvider(workInProgress);\n            break;\n\n          case ContextConsumer:\n            break;\n\n          case MemoComponent:\n            break;\n\n          case IncompleteClassComponent:\n            {\n              // Same as class component case. I put it down here so that the tags are\n              // sequential to ensure this switch is compiled to a jump table.\n              var _Component = workInProgress.type;\n\n              if (isContextProvider(_Component)) {\n                popContext(workInProgress);\n              }\n\n              break;\n            }\n\n          default:\n            invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        return null;\n      }\n\n      function shouldCaptureSuspense(current, workInProgress) {\n        // In order to capture, the Suspense component must have a fallback prop.\n        if (workInProgress.memoizedProps.fallback === undefined) {\n          return false;\n        } // If it was the primary children that just suspended, capture and render the\n        // fallback. Otherwise, don't capture and bubble to the next boundary.\n\n\n        var nextState = workInProgress.memoizedState;\n        return nextState === null;\n      }\n\n      function logCapturedError(capturedError) {\n        var error = capturedError.error;\n        {\n          var componentName = capturedError.componentName,\n              componentStack = capturedError.componentStack,\n              errorBoundaryName = capturedError.errorBoundaryName,\n              errorBoundaryFound = capturedError.errorBoundaryFound,\n              willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling\n          // `preventDefault()` in window `error` handler.\n          // We record this information as an expando on the error.\n\n          if (error != null && error._suppressLogging) {\n            if (errorBoundaryFound && willRetry) {\n              // The error is recoverable and was silenced.\n              // Ignore it and don't print the stack addendum.\n              // This is handy for testing error boundaries without noise.\n              return;\n            } // The error is fatal. Since the silencing might have\n            // been accidental, we'll surface it anyway.\n            // However, the browser would have silenced the original error\n            // so we'll print it first, and then print the stack addendum.\n\n\n            console.error(error); // For a more detailed description of this block, see:\n            // https://github.com/facebook/react/pull/13384\n          }\n\n          var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';\n          var errorBoundaryMessage = void 0; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.\n\n          if (errorBoundaryFound && errorBoundaryName) {\n            if (willRetry) {\n              errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');\n            } else {\n              errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';\n            }\n          } else {\n            errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';\n          }\n\n          var combinedMessage = '' + componentNameMessage + componentStack + '\\n\\n' + ('' + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n          // We don't include the original error message and JS stack because the browser\n          // has already printed it. Even if the application swallows the error, it is still\n          // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n          console.error(combinedMessage);\n        }\n      }\n\n      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n      {\n        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n      }\n\n      function logError(boundary, errorInfo) {\n        var source = errorInfo.source;\n        var stack = errorInfo.stack;\n\n        if (stack === null && source !== null) {\n          stack = getStackByFiberInDevAndProd(source);\n        }\n\n        var capturedError = {\n          componentName: source !== null ? getComponentName(source.type) : null,\n          componentStack: stack !== null ? stack : '',\n          error: errorInfo.value,\n          errorBoundary: null,\n          errorBoundaryName: null,\n          errorBoundaryFound: false,\n          willRetry: false\n        };\n\n        if (boundary !== null && boundary.tag === ClassComponent) {\n          capturedError.errorBoundary = boundary.stateNode;\n          capturedError.errorBoundaryName = getComponentName(boundary.type);\n          capturedError.errorBoundaryFound = true;\n          capturedError.willRetry = true;\n        }\n\n        try {\n          logCapturedError(capturedError);\n        } catch (e) {\n          // This method must not throw, or React internal state will get messed up.\n          // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n          // we want to report this error outside of the normal stack as a last resort.\n          // https://github.com/facebook/react/issues/13188\n          setTimeout(function () {\n            throw e;\n          });\n        }\n      }\n\n      var callComponentWillUnmountWithTimer = function (current$$1, instance) {\n        startPhaseTimer(current$$1, 'componentWillUnmount');\n        instance.props = current$$1.memoizedProps;\n        instance.state = current$$1.memoizedState;\n        instance.componentWillUnmount();\n        stopPhaseTimer();\n      }; // Capture errors so they don't interrupt unmounting.\n\n\n      function safelyCallComponentWillUnmount(current$$1, instance) {\n        {\n          invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);\n\n          if (hasCaughtError()) {\n            var unmountError = clearCaughtError();\n            captureCommitPhaseError(current$$1, unmountError);\n          }\n        }\n      }\n\n      function safelyDetachRef(current$$1) {\n        var ref = current$$1.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            {\n              invokeGuardedCallback(null, ref, null, null);\n\n              if (hasCaughtError()) {\n                var refError = clearCaughtError();\n                captureCommitPhaseError(current$$1, refError);\n              }\n            }\n          } else {\n            ref.current = null;\n          }\n        }\n      }\n\n      function safelyCallDestroy(current$$1, destroy) {\n        {\n          invokeGuardedCallback(null, destroy, null);\n\n          if (hasCaughtError()) {\n            var error = clearCaughtError();\n            captureCommitPhaseError(current$$1, error);\n          }\n        }\n      }\n\n      function commitBeforeMutationLifeCycles(current$$1, finishedWork) {\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);\n              return;\n            }\n\n          case ClassComponent:\n            {\n              if (finishedWork.effectTag & Snapshot) {\n                if (current$$1 !== null) {\n                  var prevProps = current$$1.memoizedProps;\n                  var prevState = current$$1.memoizedState;\n                  startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');\n                  var instance = finishedWork.stateNode; // We could update instance props and state here,\n                  // but instead we rely on them being set during last render.\n                  // TODO: revisit this when we implement resuming.\n\n                  {\n                    if (finishedWork.type === finishedWork.elementType) {\n                      !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'getSnapshotBeforeUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;\n                      !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'getSnapshotBeforeUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;\n                    }\n                  }\n                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n                  {\n                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                      didWarnSet.add(finishedWork.type);\n                      warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));\n                    }\n                  }\n                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n                  stopPhaseTimer();\n                }\n              }\n\n              return;\n            }\n\n          case HostRoot:\n          case HostComponent:\n          case HostText:\n          case HostPortal:\n          case IncompleteClassComponent:\n            // Nothing to do for these component types\n            return;\n\n          default:\n            {\n              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');\n            }\n        }\n      }\n\n      function commitHookEffectList(unmountTag, mountTag, finishedWork) {\n        var updateQueue = finishedWork.updateQueue;\n        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n        if (lastEffect !== null) {\n          var firstEffect = lastEffect.next;\n          var effect = firstEffect;\n\n          do {\n            if ((effect.tag & unmountTag) !== NoEffect$1) {\n              // Unmount\n              var destroy = effect.destroy;\n              effect.destroy = null;\n\n              if (destroy !== null) {\n                destroy();\n              }\n            }\n\n            if ((effect.tag & mountTag) !== NoEffect$1) {\n              // Mount\n              var create = effect.create;\n\n              var _destroy = create();\n\n              if (typeof _destroy !== 'function') {\n                {\n                  if (_destroy !== null && _destroy !== undefined) {\n                    warningWithoutStack$1(false, 'useEffect function must return a cleanup function or ' + 'nothing.%s%s', typeof _destroy.then === 'function' ? ' Promises and useEffect(async () => ...) are not ' + 'supported, but you can call an async function inside an ' + 'effect.' : '', getStackByFiberInDevAndProd(finishedWork));\n                  }\n                }\n                _destroy = null;\n              }\n\n              effect.destroy = _destroy;\n            }\n\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n\n      function commitPassiveHookEffects(finishedWork) {\n        commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);\n        commitHookEffectList(NoEffect$1, MountPassive, finishedWork);\n      }\n\n      function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              commitHookEffectList(UnmountLayout, MountLayout, finishedWork);\n              break;\n            }\n\n          case ClassComponent:\n            {\n              var instance = finishedWork.stateNode;\n\n              if (finishedWork.effectTag & Update) {\n                if (current$$1 === null) {\n                  startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,\n                  // but instead we rely on them being set during last render.\n                  // TODO: revisit this when we implement resuming.\n\n                  {\n                    if (finishedWork.type === finishedWork.elementType) {\n                      !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'componentDidMount. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;\n                      !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'componentDidMount. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;\n                    }\n                  }\n                  instance.componentDidMount();\n                  stopPhaseTimer();\n                } else {\n                  var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);\n                  var prevState = current$$1.memoizedState;\n                  startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,\n                  // but instead we rely on them being set during last render.\n                  // TODO: revisit this when we implement resuming.\n\n                  {\n                    if (finishedWork.type === finishedWork.elementType) {\n                      !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'componentDidUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;\n                      !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'componentDidUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;\n                    }\n                  }\n                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                  stopPhaseTimer();\n                }\n              }\n\n              var updateQueue = finishedWork.updateQueue;\n\n              if (updateQueue !== null) {\n                {\n                  if (finishedWork.type === finishedWork.elementType) {\n                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'processing the update queue. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;\n                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'processing the update queue. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;\n                  }\n                } // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);\n              }\n\n              return;\n            }\n\n          case HostRoot:\n            {\n              var _updateQueue = finishedWork.updateQueue;\n\n              if (_updateQueue !== null) {\n                var _instance = null;\n\n                if (finishedWork.child !== null) {\n                  switch (finishedWork.child.tag) {\n                    case HostComponent:\n                      _instance = getPublicInstance(finishedWork.child.stateNode);\n                      break;\n\n                    case ClassComponent:\n                      _instance = finishedWork.child.stateNode;\n                      break;\n                  }\n                }\n\n                commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);\n              }\n\n              return;\n            }\n\n          case HostComponent:\n            {\n              var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n              // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n              // These effects should only be committed when components are first mounted,\n              // aka when there is no current/alternate.\n\n              if (current$$1 === null && finishedWork.effectTag & Update) {\n                var type = finishedWork.type;\n                var props = finishedWork.memoizedProps;\n                commitMount(_instance2, type, props, finishedWork);\n              }\n\n              return;\n            }\n\n          case HostText:\n            {\n              // We have no life-cycles associated with text.\n              return;\n            }\n\n          case HostPortal:\n            {\n              // We have no life-cycles associated with portals.\n              return;\n            }\n\n          case Profiler:\n            {\n              {\n                var onRender = finishedWork.memoizedProps.onRender;\n                {\n                  onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);\n                }\n              }\n              return;\n            }\n\n          case SuspenseComponent:\n            break;\n\n          case IncompleteClassComponent:\n            break;\n\n          default:\n            {\n              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');\n            }\n        }\n      }\n\n      function hideOrUnhideAllChildren(finishedWork, isHidden) {\n        if (supportsMutation) {\n          // We only have the top Fiber that was inserted but we need recurse down its\n          var node = finishedWork;\n\n          while (true) {\n            if (node.tag === HostComponent) {\n              var instance = node.stateNode;\n\n              if (isHidden) {\n                hideInstance(instance);\n              } else {\n                unhideInstance(node.stateNode, node.memoizedProps);\n              }\n            } else if (node.tag === HostText) {\n              var _instance3 = node.stateNode;\n\n              if (isHidden) {\n                hideTextInstance(_instance3);\n              } else {\n                unhideTextInstance(_instance3, node.memoizedProps);\n              }\n            } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {\n              // Found a nested Suspense component that timed out. Skip over the\n              var fallbackChildFragment = node.child.sibling;\n              fallbackChildFragment.return = node;\n              node = fallbackChildFragment;\n              continue;\n            } else if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            }\n\n            if (node === finishedWork) {\n              return;\n            }\n\n            while (node.sibling === null) {\n              if (node.return === null || node.return === finishedWork) {\n                return;\n              }\n\n              node = node.return;\n            }\n\n            node.sibling.return = node.return;\n            node = node.sibling;\n          }\n        }\n      }\n\n      function commitAttachRef(finishedWork) {\n        var ref = finishedWork.ref;\n\n        if (ref !== null) {\n          var instance = finishedWork.stateNode;\n          var instanceToUse = void 0;\n\n          switch (finishedWork.tag) {\n            case HostComponent:\n              instanceToUse = getPublicInstance(instance);\n              break;\n\n            default:\n              instanceToUse = instance;\n          }\n\n          if (typeof ref === 'function') {\n            ref(instanceToUse);\n          } else {\n            {\n              if (!ref.hasOwnProperty('current')) {\n                warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));\n              }\n            }\n            ref.current = instanceToUse;\n          }\n        }\n      }\n\n      function commitDetachRef(current$$1) {\n        var currentRef = current$$1.ref;\n\n        if (currentRef !== null) {\n          if (typeof currentRef === 'function') {\n            currentRef(null);\n          } else {\n            currentRef.current = null;\n          }\n        }\n      } // User-originating errors (lifecycles and refs) should not interrupt\n      // deletion, so don't let them throw. Host-originating errors should\n      // interrupt deletion, so it's okay\n\n\n      function commitUnmount(current$$1) {\n        onCommitUnmount(current$$1);\n\n        switch (current$$1.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              var updateQueue = current$$1.updateQueue;\n\n              if (updateQueue !== null) {\n                var lastEffect = updateQueue.lastEffect;\n\n                if (lastEffect !== null) {\n                  var firstEffect = lastEffect.next;\n                  var effect = firstEffect;\n\n                  do {\n                    var destroy = effect.destroy;\n\n                    if (destroy !== null) {\n                      safelyCallDestroy(current$$1, destroy);\n                    }\n\n                    effect = effect.next;\n                  } while (effect !== firstEffect);\n                }\n              }\n\n              break;\n            }\n\n          case ClassComponent:\n            {\n              safelyDetachRef(current$$1);\n              var instance = current$$1.stateNode;\n\n              if (typeof instance.componentWillUnmount === 'function') {\n                safelyCallComponentWillUnmount(current$$1, instance);\n              }\n\n              return;\n            }\n\n          case HostComponent:\n            {\n              safelyDetachRef(current$$1);\n              return;\n            }\n\n          case HostPortal:\n            {\n              // TODO: this is recursive.\n              // We are also not using this parent because\n              // the portal will get pushed immediately.\n              if (supportsMutation) {\n                unmountHostComponents(current$$1);\n              } else if (supportsPersistence) {\n                emptyPortalContainer(current$$1);\n              }\n\n              return;\n            }\n        }\n      }\n\n      function commitNestedUnmounts(root) {\n        // While we're inside a removed host node we don't want to call\n        // removeChild on the inner nodes because they're removed by the top\n        // call anyway. We also want to call componentWillUnmount on all\n        // composites before this host node is removed from the tree. Therefore\n        var node = root;\n\n        while (true) {\n          commitUnmount(node); // Visit children because they may contain more composite or host nodes.\n          // Skip portals because commitUnmount() currently visits them recursively.\n\n          if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.\n          // If we don't use mutation we drill down into portals here instead.\n          !supportsMutation || node.tag !== HostPortal)) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === root) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === root) {\n              return;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n\n      function detachFiber(current$$1) {\n        // Cut off the return pointers to disconnect it from the tree. Ideally, we\n        // should clear the child pointer of the parent alternate to let this\n        // get GC:ed but we don't know which for sure which parent is the current\n        // one so we'll settle for GC:ing the subtree of this child. This child\n        // itself will be GC:ed when the parent updates the next time.\n        current$$1.return = null;\n        current$$1.child = null;\n\n        if (current$$1.alternate) {\n          current$$1.alternate.child = null;\n          current$$1.alternate.return = null;\n        }\n      }\n\n      function emptyPortalContainer(current$$1) {\n        if (!supportsPersistence) {\n          return;\n        }\n\n        var portal = current$$1.stateNode;\n        var containerInfo = portal.containerInfo;\n        var emptyChildSet = createContainerChildSet(containerInfo);\n        replaceContainerChildren(containerInfo, emptyChildSet);\n      }\n\n      function commitContainer(finishedWork) {\n        if (!supportsPersistence) {\n          return;\n        }\n\n        switch (finishedWork.tag) {\n          case ClassComponent:\n            {\n              return;\n            }\n\n          case HostComponent:\n            {\n              return;\n            }\n\n          case HostText:\n            {\n              return;\n            }\n\n          case HostRoot:\n          case HostPortal:\n            {\n              var portalOrRoot = finishedWork.stateNode;\n              var containerInfo = portalOrRoot.containerInfo,\n                  _pendingChildren = portalOrRoot.pendingChildren;\n              replaceContainerChildren(containerInfo, _pendingChildren);\n              return;\n            }\n\n          default:\n            {\n              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');\n            }\n        }\n      }\n\n      function getHostParentFiber(fiber) {\n        var parent = fiber.return;\n\n        while (parent !== null) {\n          if (isHostParent(parent)) {\n            return parent;\n          }\n\n          parent = parent.return;\n        }\n\n        invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');\n      }\n\n      function isHostParent(fiber) {\n        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n      }\n\n      function getHostSibling(fiber) {\n        // We're going to search forward into the tree until we find a sibling host\n        // node. Unfortunately, if multiple insertions are done in a row we have to\n        // search past them. This leads to exponential search for the next sibling.\n        var node = fiber;\n\n        siblings: while (true) {\n          // If we didn't find anything, let's try the next sibling.\n          while (node.sibling === null) {\n            if (node.return === null || isHostParent(node.return)) {\n              // If we pop out of the root or hit the parent the fiber we are the\n              // last sibling.\n              return null;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n\n          while (node.tag !== HostComponent && node.tag !== HostText) {\n            // If it is not host node and, we might have a host node inside it.\n            // Try to search down until we find one.\n            if (node.effectTag & Placement) {\n              // If we don't have a child, try the siblings instead.\n              continue siblings;\n            } // If we don't have a child, try the siblings instead.\n            // We also skip portals because they are not part of this host tree.\n\n\n            if (node.child === null || node.tag === HostPortal) {\n              continue siblings;\n            } else {\n              node.child.return = node;\n              node = node.child;\n            }\n          } // Check if this host node is stable or about to be placed.\n\n\n          if (!(node.effectTag & Placement)) {\n            // Found it!\n            return node.stateNode;\n          }\n        }\n      }\n\n      function commitPlacement(finishedWork) {\n        if (!supportsMutation) {\n          return;\n        } // Recursively insert all host nodes into the parent.\n\n\n        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n        var parent = void 0;\n        var isContainer = void 0;\n\n        switch (parentFiber.tag) {\n          case HostComponent:\n            parent = parentFiber.stateNode;\n            isContainer = false;\n            break;\n\n          case HostRoot:\n            parent = parentFiber.stateNode.containerInfo;\n            isContainer = true;\n            break;\n\n          case HostPortal:\n            parent = parentFiber.stateNode.containerInfo;\n            isContainer = true;\n            break;\n\n          default:\n            invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        if (parentFiber.effectTag & ContentReset) {\n          // Reset the text content of the parent before doing any insertions\n          resetTextContent(parent); // Clear ContentReset from the effect tag\n\n          parentFiber.effectTag &= ~ContentReset;\n        }\n\n        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need recurse down its\n        // children to find all the terminal nodes.\n\n        var node = finishedWork;\n\n        while (true) {\n          if (node.tag === HostComponent || node.tag === HostText) {\n            if (before) {\n              if (isContainer) {\n                insertInContainerBefore(parent, node.stateNode, before);\n              } else {\n                insertBefore(parent, node.stateNode, before);\n              }\n            } else {\n              if (isContainer) {\n                appendChildToContainer(parent, node.stateNode);\n              } else {\n                appendChild(parent, node.stateNode);\n              }\n            }\n          } else if (node.tag === HostPortal) ;else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === finishedWork) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === finishedWork) {\n              return;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n\n      function unmountHostComponents(current$$1) {\n        // We only have the top Fiber that was deleted but we need recurse down its\n        var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not\n        // currentParentIsValid.\n\n        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.\n\n        var currentParent = void 0;\n        var currentParentIsContainer = void 0;\n\n        while (true) {\n          if (!currentParentIsValid) {\n            var parent = node.return;\n\n            findParent: while (true) {\n              !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n              switch (parent.tag) {\n                case HostComponent:\n                  currentParent = parent.stateNode;\n                  currentParentIsContainer = false;\n                  break findParent;\n\n                case HostRoot:\n                  currentParent = parent.stateNode.containerInfo;\n                  currentParentIsContainer = true;\n                  break findParent;\n\n                case HostPortal:\n                  currentParent = parent.stateNode.containerInfo;\n                  currentParentIsContainer = true;\n                  break findParent;\n              }\n\n              parent = parent.return;\n            }\n\n            currentParentIsValid = true;\n          }\n\n          if (node.tag === HostComponent || node.tag === HostText) {\n            commitNestedUnmounts(node); // After all the children have unmounted, it is now safe to remove the\n            // node from the tree.\n\n            if (currentParentIsContainer) {\n              removeChildFromContainer(currentParent, node.stateNode);\n            } else {\n              removeChild(currentParent, node.stateNode);\n            } // Don't visit children because we already visited them.\n\n          } else if (node.tag === HostPortal) {\n            // When we go into a portal, it becomes the parent to remove from.\n            // We will reassign it back when we pop the portal on the way up.\n            currentParent = node.stateNode.containerInfo;\n            currentParentIsContainer = true; // Visit children because portals might contain host components.\n\n            if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            }\n          } else {\n            commitUnmount(node); // Visit children because we may find more host components below.\n\n            if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            }\n          }\n\n          if (node === current$$1) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === current$$1) {\n              return;\n            }\n\n            node = node.return;\n\n            if (node.tag === HostPortal) {\n              // When we go out of the portal, we need to restore the parent.\n              // Since we don't keep a stack of them, we will search for it.\n              currentParentIsValid = false;\n            }\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n\n      function commitDeletion(current$$1) {\n        if (supportsMutation) {\n          // Recursively delete all host nodes from the parent.\n          // Detach refs and call componentWillUnmount() on the whole subtree.\n          unmountHostComponents(current$$1);\n        } else {\n          // Detach refs and call componentWillUnmount() on the whole subtree.\n          commitNestedUnmounts(current$$1);\n        }\n\n        detachFiber(current$$1);\n      }\n\n      function commitWork(current$$1, finishedWork) {\n        if (!supportsMutation) {\n          switch (finishedWork.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case MemoComponent:\n            case SimpleMemoComponent:\n              {\n                commitHookEffectList(UnmountMutation, MountMutation, finishedWork);\n                return;\n              }\n          }\n\n          commitContainer(finishedWork);\n          return;\n        }\n\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              commitHookEffectList(UnmountMutation, MountMutation, finishedWork);\n              return;\n            }\n\n          case ClassComponent:\n            {\n              return;\n            }\n\n          case HostComponent:\n            {\n              var instance = finishedWork.stateNode;\n\n              if (instance != null) {\n                // Commit the work prepared earlier.\n                var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                // as the newProps. The updatePayload will contain the real change in\n                // this case.\n\n                var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;\n                var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n                var updatePayload = finishedWork.updateQueue;\n                finishedWork.updateQueue = null;\n\n                if (updatePayload !== null) {\n                  commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);\n                }\n              }\n\n              return;\n            }\n\n          case HostText:\n            {\n              !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n              var textInstance = finishedWork.stateNode;\n              var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n              // as the newProps. The updatePayload will contain the real change in\n              // this case.\n\n              var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;\n              commitTextUpdate(textInstance, oldText, newText);\n              return;\n            }\n\n          case HostRoot:\n            {\n              return;\n            }\n\n          case Profiler:\n            {\n              return;\n            }\n\n          case SuspenseComponent:\n            {\n              var newState = finishedWork.memoizedState;\n              var newDidTimeout = void 0;\n              var primaryChildParent = finishedWork;\n\n              if (newState === null) {\n                newDidTimeout = false;\n              } else {\n                newDidTimeout = true;\n                primaryChildParent = finishedWork.child;\n\n                if (newState.timedOutAt === NoWork) {\n                  // If the children had not already timed out, record the time.\n                  // This is used to compute the elapsed time during subsequent\n                  // attempts to render the children.\n                  newState.timedOutAt = requestCurrentTime();\n                }\n              }\n\n              if (primaryChildParent !== null) {\n                hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);\n              }\n\n              return;\n            }\n\n          case IncompleteClassComponent:\n            {\n              return;\n            }\n\n          default:\n            {\n              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');\n            }\n        }\n      }\n\n      function commitResetTextContent(current$$1) {\n        if (!supportsMutation) {\n          return;\n        }\n\n        resetTextContent(current$$1.stateNode);\n      }\n\n      function createRootErrorUpdate(fiber, errorInfo, expirationTime) {\n        var update = createUpdate(expirationTime); // Unmount the root by rendering null.\n\n        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n        // being called \"element\".\n\n        update.payload = {\n          element: null\n        };\n        var error = errorInfo.value;\n\n        update.callback = function () {\n          onUncaughtError(error);\n          logError(fiber, errorInfo);\n        };\n\n        return update;\n      }\n\n      function createClassErrorUpdate(fiber, errorInfo, expirationTime) {\n        var update = createUpdate(expirationTime);\n        update.tag = CaptureUpdate;\n        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n        if (typeof getDerivedStateFromError === 'function') {\n          var error = errorInfo.value;\n\n          update.payload = function () {\n            return getDerivedStateFromError(error);\n          };\n        }\n\n        var inst = fiber.stateNode;\n\n        if (inst !== null && typeof inst.componentDidCatch === 'function') {\n          update.callback = function callback() {\n            if (typeof getDerivedStateFromError !== 'function') {\n              // To preserve the preexisting retry behavior of error boundaries,\n              // we keep track of which ones already failed during this batch.\n              // This gets reset before we yield back to the browser.\n              // TODO: Warn in strict mode if getDerivedStateFromError is\n              // not defined.\n              markLegacyErrorBoundaryAsFailed(this);\n            }\n\n            var error = errorInfo.value;\n            var stack = errorInfo.stack;\n            logError(fiber, errorInfo);\n            this.componentDidCatch(error, {\n              componentStack: stack !== null ? stack : ''\n            });\n            {\n              if (typeof getDerivedStateFromError !== 'function') {\n                // If componentDidCatch is the only error boundary method defined,\n                // then it needs to call setState to recover from errors.\n                // If no state update is scheduled then the boundary will swallow the error.\n                !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;\n              }\n            }\n          };\n        }\n\n        return update;\n      }\n\n      function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {\n        // The source fiber did not complete.\n        sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.\n\n        sourceFiber.firstEffect = sourceFiber.lastEffect = null;\n\n        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n          // This is a thenable.\n          var thenable = value; // Find the earliest timeout threshold of all the placeholders in the\n          // ancestor path. We could avoid this traversal by storing the thresholds on\n          // the stack, but we choose not to because we only hit this path if we're\n          // IO-bound (i.e. if something suspends). Whereas the stack is used even in\n          // the non-IO- bound case.\n\n          var _workInProgress = returnFiber;\n          var earliestTimeoutMs = -1;\n          var startTimeMs = -1;\n\n          do {\n            if (_workInProgress.tag === SuspenseComponent) {\n              var current$$1 = _workInProgress.alternate;\n\n              if (current$$1 !== null) {\n                var currentState = current$$1.memoizedState;\n\n                if (currentState !== null) {\n                  // Reached a boundary that already timed out. Do not search\n                  // any further.\n                  var timedOutAt = currentState.timedOutAt;\n                  startTimeMs = expirationTimeToMs(timedOutAt); // Do not search any further.\n\n                  break;\n                }\n              }\n\n              var timeoutPropMs = _workInProgress.pendingProps.maxDuration;\n\n              if (typeof timeoutPropMs === 'number') {\n                if (timeoutPropMs <= 0) {\n                  earliestTimeoutMs = 0;\n                } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {\n                  earliestTimeoutMs = timeoutPropMs;\n                }\n              }\n            }\n\n            _workInProgress = _workInProgress.return;\n          } while (_workInProgress !== null); // Schedule the nearest Suspense to re-render the timed out view.\n\n\n          _workInProgress = returnFiber;\n\n          do {\n            if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress.alternate, _workInProgress)) {\n              // Found the nearest boundary.\n              // If the boundary is not in concurrent mode, we should not suspend, and\n              // likewise, when the promise resolves, we should ping synchronously.\n              var pingTime = (_workInProgress.mode & ConcurrentMode) === NoEffect ? Sync : renderExpirationTime; // Attach a listener to the promise to \"ping\" the root and retry.\n\n              var onResolveOrReject = retrySuspendedRoot.bind(null, root, _workInProgress, sourceFiber, pingTime);\n              {\n                onResolveOrReject = tracing$$1.unstable_wrap(onResolveOrReject);\n              }\n              thenable.then(onResolveOrReject, onResolveOrReject); // If the boundary is outside of concurrent mode, we should *not*\n              // suspend the commit. Pretend as if the suspended component rendered\n              // null and keep rendering. In the commit phase, we'll schedule a\n              // subsequent synchronous update to re-render the Suspense.\n              //\n              // Note: It doesn't matter whether the component that suspended was\n              // inside a concurrent mode tree. If the Suspense is outside of it, we\n              // should *not* suspend the commit.\n\n              if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {\n                _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.\n                // But we shouldn't call any lifecycle methods or callbacks. Remove\n                // all lifecycle effect tags.\n\n                sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);\n\n                if (sourceFiber.tag === ClassComponent) {\n                  var _current = sourceFiber.alternate;\n\n                  if (_current === null) {\n                    // This is a new mount. Change the tag so it's not mistaken for a\n                    // completed class component. For example, we should not call\n                    // componentWillUnmount if it is deleted.\n                    sourceFiber.tag = IncompleteClassComponent;\n                  }\n                } // The source fiber did not complete. Mark it with the current\n                // render priority to indicate that it still has pending work.\n\n\n                sourceFiber.expirationTime = renderExpirationTime; // Exit without suspending.\n\n                return;\n              } // Confirmed that the boundary is in a concurrent mode tree. Continue\n              // with the normal suspend path.\n\n\n              var absoluteTimeoutMs = void 0;\n\n              if (earliestTimeoutMs === -1) {\n                // If no explicit threshold is given, default to an abitrarily large\n                // value. The actual size doesn't matter because the threshold for the\n                // whole tree will be clamped to the expiration time.\n                absoluteTimeoutMs = maxSigned31BitInt;\n              } else {\n                if (startTimeMs === -1) {\n                  // This suspend happened outside of any already timed-out\n                  // placeholders. We don't know exactly when the update was\n                  // scheduled, but we can infer an approximate start time from the\n                  // expiration time. First, find the earliest uncommitted expiration\n                  // time in the tree, including work that is suspended. Then subtract\n                  // the offset used to compute an async update's expiration time.\n                  // This will cause high priority (interactive) work to expire\n                  // earlier than necessary, but we can account for this by adjusting\n                  // for the Just Noticeable Difference.\n                  var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);\n                  var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);\n                  startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;\n                }\n\n                absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;\n              } // Mark the earliest timeout in the suspended fiber's ancestor path.\n              // After completing the root, we'll take the largest of all the\n              // suspended fiber's timeouts and use it to compute a timeout for the\n              // whole tree.\n\n\n              renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);\n              _workInProgress.effectTag |= ShouldCapture;\n              _workInProgress.expirationTime = renderExpirationTime;\n              return;\n            } // This boundary already captured during this render. Continue to the next\n            // boundary.\n\n\n            _workInProgress = _workInProgress.return;\n          } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.\n          // TODO: Use invariant so the message is stripped in prod?\n\n\n          value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\\n' + '\\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));\n        } // We didn't find a boundary that could handle this type of exception. Start\n        // over and traverse parent path again, this time treating the exception\n        // as an error.\n\n\n        renderDidError();\n        value = createCapturedValue(value, sourceFiber);\n        var workInProgress = returnFiber;\n\n        do {\n          switch (workInProgress.tag) {\n            case HostRoot:\n              {\n                var _errorInfo = value;\n                workInProgress.effectTag |= ShouldCapture;\n                workInProgress.expirationTime = renderExpirationTime;\n                var update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);\n                enqueueCapturedUpdate(workInProgress, update);\n                return;\n              }\n\n            case ClassComponent:\n              // Capture and retry\n              var errorInfo = value;\n              var ctor = workInProgress.type;\n              var instance = workInProgress.stateNode;\n\n              if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n                workInProgress.effectTag |= ShouldCapture;\n                workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state\n\n                var _update = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);\n\n                enqueueCapturedUpdate(workInProgress, _update);\n                return;\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          workInProgress = workInProgress.return;\n        } while (workInProgress !== null);\n      }\n\n      function unwindWork(workInProgress, renderExpirationTime) {\n        switch (workInProgress.tag) {\n          case ClassComponent:\n            {\n              var Component = workInProgress.type;\n\n              if (isContextProvider(Component)) {\n                popContext(workInProgress);\n              }\n\n              var effectTag = workInProgress.effectTag;\n\n              if (effectTag & ShouldCapture) {\n                workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;\n                return workInProgress;\n              }\n\n              return null;\n            }\n\n          case HostRoot:\n            {\n              popHostContainer(workInProgress);\n              popTopLevelContextObject(workInProgress);\n              var _effectTag = workInProgress.effectTag;\n              !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;\n              workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;\n              return workInProgress;\n            }\n\n          case HostComponent:\n            {\n              popHostContext(workInProgress);\n              return null;\n            }\n\n          case SuspenseComponent:\n            {\n              var _effectTag2 = workInProgress.effectTag;\n\n              if (_effectTag2 & ShouldCapture) {\n                workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n                return workInProgress;\n              }\n\n              return null;\n            }\n\n          case HostPortal:\n            popHostContainer(workInProgress);\n            return null;\n\n          case ContextProvider:\n            popProvider(workInProgress);\n            return null;\n\n          default:\n            return null;\n        }\n      }\n\n      function unwindInterruptedWork(interruptedWork) {\n        switch (interruptedWork.tag) {\n          case ClassComponent:\n            {\n              var childContextTypes = interruptedWork.type.childContextTypes;\n\n              if (childContextTypes !== null && childContextTypes !== undefined) {\n                popContext(interruptedWork);\n              }\n\n              break;\n            }\n\n          case HostRoot:\n            {\n              popHostContainer(interruptedWork);\n              popTopLevelContextObject(interruptedWork);\n              break;\n            }\n\n          case HostComponent:\n            {\n              popHostContext(interruptedWork);\n              break;\n            }\n\n          case HostPortal:\n            popHostContainer(interruptedWork);\n            break;\n\n          case ContextProvider:\n            popProvider(interruptedWork);\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      var Dispatcher = {\n        readContext: readContext,\n        useCallback: useCallback,\n        useContext: useContext$$1,\n        useEffect: useEffect$$1,\n        useImperativeMethods: useImperativeMethods,\n        useLayoutEffect: useLayoutEffect,\n        useMemo: useMemo,\n        useMutationEffect: useMutationEffect,\n        useReducer: useReducer,\n        useRef: useRef,\n        useState: useState\n      };\n      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n      var didWarnAboutStateTransition = void 0;\n      var didWarnSetStateChildContext = void 0;\n      var warnAboutUpdateOnUnmounted = void 0;\n      var warnAboutInvalidUpdates = void 0;\n      {\n        // Provide explicit error message when production+profiling bundle of e.g. react-dom\n        // is used with production (non-profiling) bundle of scheduler/tracing\n        !(tracing$$1.__interactionsRef != null && tracing$$1.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;\n      }\n      {\n        didWarnAboutStateTransition = false;\n        didWarnSetStateChildContext = false;\n        var didWarnStateUpdateForUnmountedComponent = {};\n\n        warnAboutUpdateOnUnmounted = function (fiber, isClass) {\n          // We show the whole stack but dedupe on the top component's name because\n          // the problematic code almost always lies inside that component.\n          var componentName = getComponentName(fiber.type) || 'ReactComponent';\n\n          if (didWarnStateUpdateForUnmountedComponent[componentName]) {\n            return;\n          }\n\n          warningWithoutStack$1(false, \"Can't perform a React state update on an unmounted component. This \" + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));\n          didWarnStateUpdateForUnmountedComponent[componentName] = true;\n        };\n\n        warnAboutInvalidUpdates = function (instance) {\n          switch (phase) {\n            case 'getChildContext':\n              if (didWarnSetStateChildContext) {\n                return;\n              }\n\n              warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');\n              didWarnSetStateChildContext = true;\n              break;\n\n            case 'render':\n              if (didWarnAboutStateTransition) {\n                return;\n              }\n\n              warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');\n              didWarnAboutStateTransition = true;\n              break;\n          }\n        };\n      } // Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.\n\n      var lastUniqueAsyncExpiration = Sync - 1; // Represents the expiration time that incoming updates should use. (If this\n      // is NoWork, use the default strategy: async updates in async mode, sync\n      // updates in sync mode.)\n\n      var expirationContext = NoWork;\n      var isWorking = false; // The next work in progress fiber that we're currently working on.\n\n      var nextUnitOfWork = null;\n      var nextRoot = null; // The time at which we're currently rendering work.\n\n      var nextRenderExpirationTime = NoWork;\n      var nextLatestAbsoluteTimeoutMs = -1;\n      var nextRenderDidError = false; // The next fiber with an effect that we're currently committing.\n\n      var nextEffect = null;\n      var isCommitting$1 = false;\n      var rootWithPendingPassiveEffects = null;\n      var passiveEffectCallbackHandle = null;\n      var passiveEffectCallback = null;\n      var legacyErrorBoundariesThatAlreadyFailed = null; // Used for performance tracking.\n\n      var interruptedBy = null;\n      var stashedWorkInProgressProperties = void 0;\n      var replayUnitOfWork = void 0;\n      var mayReplayFailedUnitOfWork = void 0;\n      var isReplayingFailedUnitOfWork = void 0;\n      var originalReplayError = void 0;\n      var rethrowOriginalError = void 0;\n      {\n        stashedWorkInProgressProperties = null;\n        mayReplayFailedUnitOfWork = true;\n        isReplayingFailedUnitOfWork = false;\n        originalReplayError = null;\n\n        replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {\n          if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n            // Don't replay promises. Treat everything else like an error.\n            // TODO: Need to figure out a different strategy if/when we add\n            // support for catching other types.\n            return;\n          } // Restore the original state of the work-in-progress\n\n\n          if (stashedWorkInProgressProperties === null) {\n            // This should never happen. Don't throw because this code is DEV-only.\n            warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');\n            return;\n          }\n\n          assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);\n\n          switch (failedUnitOfWork.tag) {\n            case HostRoot:\n              popHostContainer(failedUnitOfWork);\n              popTopLevelContextObject(failedUnitOfWork);\n              break;\n\n            case HostComponent:\n              popHostContext(failedUnitOfWork);\n              break;\n\n            case ClassComponent:\n              {\n                var Component = failedUnitOfWork.type;\n\n                if (isContextProvider(Component)) {\n                  popContext(failedUnitOfWork);\n                }\n\n                break;\n              }\n\n            case HostPortal:\n              popHostContainer(failedUnitOfWork);\n              break;\n\n            case ContextProvider:\n              popProvider(failedUnitOfWork);\n              break;\n          } // Replay the begin phase.\n\n\n          isReplayingFailedUnitOfWork = true;\n          originalReplayError = thrownValue;\n          invokeGuardedCallback(null, workLoop, null, isYieldy);\n          isReplayingFailedUnitOfWork = false;\n          originalReplayError = null;\n\n          if (hasCaughtError()) {\n            var replayError = clearCaughtError();\n\n            if (replayError != null && thrownValue != null) {\n              try {\n                // Reading the expando property is intentionally\n                // inside `try` because it might be a getter or Proxy.\n                if (replayError._suppressLogging) {\n                  // Also suppress logging for the original error.\n                  thrownValue._suppressLogging = true;\n                }\n              } catch (inner) {// Ignore.\n              }\n            }\n          } else {\n            // If the begin phase did not fail the second time, set this pointer\n            // back to the original value.\n            nextUnitOfWork = failedUnitOfWork;\n          }\n        };\n\n        rethrowOriginalError = function () {\n          throw originalReplayError;\n        };\n      }\n\n      function resetStack() {\n        if (nextUnitOfWork !== null) {\n          var interruptedWork = nextUnitOfWork.return;\n\n          while (interruptedWork !== null) {\n            unwindInterruptedWork(interruptedWork);\n            interruptedWork = interruptedWork.return;\n          }\n        }\n\n        {\n          ReactStrictModeWarnings.discardPendingWarnings();\n          checkThatStackIsEmpty();\n        }\n        nextRoot = null;\n        nextRenderExpirationTime = NoWork;\n        nextLatestAbsoluteTimeoutMs = -1;\n        nextRenderDidError = false;\n        nextUnitOfWork = null;\n      }\n\n      function commitAllHostEffects() {\n        while (nextEffect !== null) {\n          {\n            setCurrentFiber(nextEffect);\n          }\n          recordEffect();\n          var effectTag = nextEffect.effectTag;\n\n          if (effectTag & ContentReset) {\n            commitResetTextContent(nextEffect);\n          }\n\n          if (effectTag & Ref) {\n            var current$$1 = nextEffect.alternate;\n\n            if (current$$1 !== null) {\n              commitDetachRef(current$$1);\n            }\n          } // The following switch statement is only concerned about placement,\n          // updates, and deletions. To avoid needing to add a case for every\n          // possible bitmap value, we remove the secondary effects from the\n          // effect tag and switch on that value.\n\n\n          var primaryEffectTag = effectTag & (Placement | Update | Deletion);\n\n          switch (primaryEffectTag) {\n            case Placement:\n              {\n                commitPlacement(nextEffect); // Clear the \"placement\" from effect tag so that we know that this is inserted, before\n                // any life-cycles like componentDidMount gets called.\n                // TODO: findDOMNode doesn't rely on this any more but isMounted\n                // does and isMounted is deprecated anyway so we should be able\n                // to kill this.\n\n                nextEffect.effectTag &= ~Placement;\n                break;\n              }\n\n            case PlacementAndUpdate:\n              {\n                // Placement\n                commitPlacement(nextEffect); // Clear the \"placement\" from effect tag so that we know that this is inserted, before\n                // any life-cycles like componentDidMount gets called.\n\n                nextEffect.effectTag &= ~Placement; // Update\n\n                var _current = nextEffect.alternate;\n                commitWork(_current, nextEffect);\n                break;\n              }\n\n            case Update:\n              {\n                var _current2 = nextEffect.alternate;\n                commitWork(_current2, nextEffect);\n                break;\n              }\n\n            case Deletion:\n              {\n                commitDeletion(nextEffect);\n                break;\n              }\n          }\n\n          nextEffect = nextEffect.nextEffect;\n        }\n\n        {\n          resetCurrentFiber();\n        }\n      }\n\n      function commitBeforeMutationLifecycles() {\n        while (nextEffect !== null) {\n          {\n            setCurrentFiber(nextEffect);\n          }\n          var effectTag = nextEffect.effectTag;\n\n          if (effectTag & Snapshot) {\n            recordEffect();\n            var current$$1 = nextEffect.alternate;\n            commitBeforeMutationLifeCycles(current$$1, nextEffect);\n          }\n\n          nextEffect = nextEffect.nextEffect;\n        }\n\n        {\n          resetCurrentFiber();\n        }\n      }\n\n      function commitAllLifeCycles(finishedRoot, committedExpirationTime) {\n        {\n          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n          ReactStrictModeWarnings.flushLegacyContextWarning();\n        }\n\n        while (nextEffect !== null) {\n          var effectTag = nextEffect.effectTag;\n\n          if (effectTag & (Update | Callback)) {\n            recordEffect();\n            var current$$1 = nextEffect.alternate;\n            commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);\n          }\n\n          if (effectTag & Ref) {\n            recordEffect();\n            commitAttachRef(nextEffect);\n          }\n\n          if (effectTag & Passive) {\n            rootWithPendingPassiveEffects = finishedRoot;\n          }\n\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n\n      function commitPassiveEffects(root, firstEffect) {\n        rootWithPendingPassiveEffects = null;\n        passiveEffectCallbackHandle = null;\n        passiveEffectCallback = null; // Set this to true to prevent re-entrancy\n\n        var previousIsRendering = isRendering;\n        isRendering = true;\n        var effect = firstEffect;\n\n        do {\n          if (effect.effectTag & Passive) {\n            var didError = false;\n            var error = void 0;\n            {\n              invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);\n\n              if (hasCaughtError()) {\n                didError = true;\n                error = clearCaughtError();\n              }\n            }\n\n            if (didError) {\n              captureCommitPhaseError(effect, error);\n            }\n          }\n\n          effect = effect.nextEffect;\n        } while (effect !== null);\n\n        isRendering = previousIsRendering; // Check if work was scheduled by one of the effects\n\n        var rootExpirationTime = root.expirationTime;\n\n        if (rootExpirationTime !== NoWork) {\n          requestWork(root, rootExpirationTime);\n        }\n      }\n\n      function isAlreadyFailedLegacyErrorBoundary(instance) {\n        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n      }\n\n      function markLegacyErrorBoundaryAsFailed(instance) {\n        if (legacyErrorBoundariesThatAlreadyFailed === null) {\n          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n        } else {\n          legacyErrorBoundariesThatAlreadyFailed.add(instance);\n        }\n      }\n\n      function flushPassiveEffects() {\n        if (passiveEffectCallback !== null) {\n          scheduler$$1.unstable_cancelCallback(passiveEffectCallbackHandle); // We call the scheduled callback instead of commitPassiveEffects directly\n          // to ensure tracing works correctly.\n\n          passiveEffectCallback();\n        }\n      }\n\n      function commitRoot(root, finishedWork) {\n        isWorking = true;\n        isCommitting$1 = true;\n        startCommitTimer();\n        !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        var committedExpirationTime = root.pendingCommitExpirationTime;\n        !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        root.pendingCommitExpirationTime = NoWork; // Update the pending priority levels to account for the work that we are\n        // about to commit. This needs to happen before calling the lifecycles, since\n        // they may schedule additional updates.\n\n        var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;\n        var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;\n        var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;\n        markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);\n        var prevInteractions = null;\n        {\n          // Restore any pending interactions at this point,\n          // So that cascading work triggered during the render phase will be accounted for.\n          prevInteractions = tracing$$1.__interactionsRef.current;\n          tracing$$1.__interactionsRef.current = root.memoizedInteractions;\n        } // Reset this to null before calling lifecycles\n\n        ReactCurrentOwner$1.current = null;\n        var firstEffect = void 0;\n\n        if (finishedWork.effectTag > PerformedWork) {\n          // A fiber's effect list consists only of its children, not itself. So if\n          // the root has an effect, we need to add it to the end of the list. The\n          // resulting list is the set that would belong to the root's parent, if\n          // it had one; that is, all the effects in the tree including the root.\n          if (finishedWork.lastEffect !== null) {\n            finishedWork.lastEffect.nextEffect = finishedWork;\n            firstEffect = finishedWork.firstEffect;\n          } else {\n            firstEffect = finishedWork;\n          }\n        } else {\n          // There is no effect on the root.\n          firstEffect = finishedWork.firstEffect;\n        }\n\n        prepareForCommit(root.containerInfo); // Invoke instances of getSnapshotBeforeUpdate before mutation.\n\n        nextEffect = firstEffect;\n        startCommitSnapshotEffectsTimer();\n\n        while (nextEffect !== null) {\n          var didError = false;\n          var error = void 0;\n          {\n            invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);\n\n            if (hasCaughtError()) {\n              didError = true;\n              error = clearCaughtError();\n            }\n          }\n\n          if (didError) {\n            !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n            captureCommitPhaseError(nextEffect, error); // Clean-up\n\n            if (nextEffect !== null) {\n              nextEffect = nextEffect.nextEffect;\n            }\n          }\n        }\n\n        stopCommitSnapshotEffectsTimer();\n        {\n          // Mark the current commit time to be shared by all Profilers in this batch.\n          // This enables them to be grouped later.\n          recordCommitTime();\n        } // Commit all the side-effects within a tree. We'll do this in two passes.\n        // The first pass performs all the host insertions, updates, deletions and\n        // ref unmounts.\n\n        nextEffect = firstEffect;\n        startCommitHostEffectsTimer();\n\n        while (nextEffect !== null) {\n          var _didError = false;\n\n          var _error = void 0;\n\n          {\n            invokeGuardedCallback(null, commitAllHostEffects, null);\n\n            if (hasCaughtError()) {\n              _didError = true;\n              _error = clearCaughtError();\n            }\n          }\n\n          if (_didError) {\n            !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n            captureCommitPhaseError(nextEffect, _error); // Clean-up\n\n            if (nextEffect !== null) {\n              nextEffect = nextEffect.nextEffect;\n            }\n          }\n        }\n\n        stopCommitHostEffectsTimer();\n        resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n        // the first pass of the commit phase, so that the previous tree is still\n        // current during componentWillUnmount, but before the second pass, so that\n        // the finished work is current during componentDidMount/Update.\n\n        root.current = finishedWork; // In the second pass we'll perform all life-cycles and ref callbacks.\n        // Life-cycles happen as a separate pass so that all placements, updates,\n        // and deletions in the entire tree have already been invoked.\n        // This pass also triggers any renderer-specific initial effects.\n\n        nextEffect = firstEffect;\n        startCommitLifeCyclesTimer();\n\n        while (nextEffect !== null) {\n          var _didError2 = false;\n\n          var _error2 = void 0;\n\n          {\n            invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);\n\n            if (hasCaughtError()) {\n              _didError2 = true;\n              _error2 = clearCaughtError();\n            }\n          }\n\n          if (_didError2) {\n            !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n            captureCommitPhaseError(nextEffect, _error2);\n\n            if (nextEffect !== null) {\n              nextEffect = nextEffect.nextEffect;\n            }\n          }\n        }\n\n        if (firstEffect !== null && rootWithPendingPassiveEffects !== null) {\n          // This commit included a passive effect. These do not need to fire until\n          // after the next paint. Schedule an callback to fire them in an async\n          // event. To ensure serial execution, the callback will be flushed early if\n          // we enter rootWithPendingPassiveEffects commit phase before then.\n          var callback = commitPassiveEffects.bind(null, root, firstEffect);\n          {\n            // TODO: Avoid this extra callback by mutating the tracing ref directly,\n            // like we do at the beginning of commitRoot. I've opted not to do that\n            // here because that code is still in flux.\n            callback = tracing$$1.unstable_wrap(callback);\n          }\n          passiveEffectCallbackHandle = scheduler$$1.unstable_scheduleCallback(callback);\n          passiveEffectCallback = callback;\n        }\n\n        isCommitting$1 = false;\n        isWorking = false;\n        stopCommitLifeCyclesTimer();\n        stopCommitTimer();\n        onCommitRoot(finishedWork.stateNode);\n        var updateExpirationTimeAfterCommit = finishedWork.expirationTime;\n        var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;\n        var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;\n\n        if (earliestRemainingTimeAfterCommit === NoWork) {\n          // If there's no remaining work, we can clear the set of already failed\n          // error boundaries.\n          legacyErrorBoundariesThatAlreadyFailed = null;\n        }\n\n        onCommit(root, earliestRemainingTimeAfterCommit);\n        {\n          tracing$$1.__interactionsRef.current = prevInteractions;\n          var subscriber = void 0;\n\n          try {\n            subscriber = tracing$$1.__subscriberRef.current;\n\n            if (subscriber !== null && root.memoizedInteractions.size > 0) {\n              var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);\n              subscriber.onWorkStopped(root.memoizedInteractions, threadID);\n            }\n          } catch (error) {\n            // It's not safe for commitRoot() to throw.\n            // Store the error for now and we'll re-throw in finishRendering().\n            if (!hasUnhandledError) {\n              hasUnhandledError = true;\n              unhandledError = error;\n            }\n          } finally {\n            // Clear completed interactions from the pending Map.\n            // Unless the render was suspended or cascading work was scheduled,\n            // In which case– leave pending interactions until the subsequent render.\n            var pendingInteractionMap = root.pendingInteractionMap;\n            pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {\n              // Only decrement the pending interaction count if we're done.\n              // If there's still work at the current priority,\n              // That indicates that we are waiting for suspense data.\n              if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {\n                pendingInteractionMap.delete(scheduledExpirationTime);\n                scheduledInteractions.forEach(function (interaction) {\n                  interaction.__count--;\n\n                  if (subscriber !== null && interaction.__count === 0) {\n                    try {\n                      subscriber.onInteractionScheduledWorkCompleted(interaction);\n                    } catch (error) {\n                      // It's not safe for commitRoot() to throw.\n                      // Store the error for now and we'll re-throw in finishRendering().\n                      if (!hasUnhandledError) {\n                        hasUnhandledError = true;\n                        unhandledError = error;\n                      }\n                    }\n                  }\n                });\n              }\n            });\n          }\n        }\n      }\n\n      function resetChildExpirationTime(workInProgress, renderTime) {\n        if (renderTime !== Never && workInProgress.childExpirationTime === Never) {\n          // The children of this component are hidden. Don't bubble their\n          // expiration times.\n          return;\n        }\n\n        var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.\n\n        if (workInProgress.mode & ProfileMode) {\n          // We're in profiling mode.\n          // Let's use this same traversal to update the render durations.\n          var actualDuration = workInProgress.actualDuration;\n          var treeBaseDuration = workInProgress.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0.\n          // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).\n          // When work is done, it should bubble to the parent's actualDuration.\n          // If the fiber has not been cloned though, (meaning no work was done),\n          // Then this value will reflect the amount of time spent working on a previous render.\n          // In that case it should not bubble.\n          // We determine whether it was cloned by comparing the child pointer.\n\n          var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;\n          var child = workInProgress.child;\n\n          while (child !== null) {\n            var childUpdateExpirationTime = child.expirationTime;\n            var childChildExpirationTime = child.childExpirationTime;\n\n            if (childUpdateExpirationTime > newChildExpirationTime) {\n              newChildExpirationTime = childUpdateExpirationTime;\n            }\n\n            if (childChildExpirationTime > newChildExpirationTime) {\n              newChildExpirationTime = childChildExpirationTime;\n            }\n\n            if (shouldBubbleActualDurations) {\n              actualDuration += child.actualDuration;\n            }\n\n            treeBaseDuration += child.treeBaseDuration;\n            child = child.sibling;\n          }\n\n          workInProgress.actualDuration = actualDuration;\n          workInProgress.treeBaseDuration = treeBaseDuration;\n        } else {\n          var _child = workInProgress.child;\n\n          while (_child !== null) {\n            var _childUpdateExpirationTime = _child.expirationTime;\n            var _childChildExpirationTime = _child.childExpirationTime;\n\n            if (_childUpdateExpirationTime > newChildExpirationTime) {\n              newChildExpirationTime = _childUpdateExpirationTime;\n            }\n\n            if (_childChildExpirationTime > newChildExpirationTime) {\n              newChildExpirationTime = _childChildExpirationTime;\n            }\n\n            _child = _child.sibling;\n          }\n        }\n\n        workInProgress.childExpirationTime = newChildExpirationTime;\n      }\n\n      function completeUnitOfWork(workInProgress) {\n        // Attempt to complete the current unit of work, then move to the\n        // next sibling. If there are no more siblings, return to the\n        // parent fiber.\n        while (true) {\n          // The current, flushed, state of this fiber is the alternate.\n          // Ideally nothing should rely on this, but relying on it here\n          // means that we don't need an additional field on the work in\n          // progress.\n          var current$$1 = workInProgress.alternate;\n          {\n            setCurrentFiber(workInProgress);\n          }\n          var returnFiber = workInProgress.return;\n          var siblingFiber = workInProgress.sibling;\n\n          if ((workInProgress.effectTag & Incomplete) === NoEffect) {\n            {\n              // Don't replay if it fails during completion phase.\n              mayReplayFailedUnitOfWork = false;\n            } // This fiber completed.\n            // Remember we're completing this unit so we can find a boundary if it fails.\n\n            nextUnitOfWork = workInProgress;\n            {\n              if (workInProgress.mode & ProfileMode) {\n                startProfilerTimer(workInProgress);\n              }\n\n              nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);\n\n              if (workInProgress.mode & ProfileMode) {\n                // Update render duration assuming we didn't error.\n                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);\n              }\n            }\n            {\n              // We're out of completion phase so replaying is fine now.\n              mayReplayFailedUnitOfWork = true;\n            }\n            stopWorkTimer(workInProgress);\n            resetChildExpirationTime(workInProgress, nextRenderExpirationTime);\n            {\n              resetCurrentFiber();\n            }\n\n            if (nextUnitOfWork !== null) {\n              // Completing this fiber spawned new work. Work on that next.\n              return nextUnitOfWork;\n            }\n\n            if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete\n            (returnFiber.effectTag & Incomplete) === NoEffect) {\n              // Append all the effects of the subtree and this fiber onto the effect\n              // list of the parent. The completion order of the children affects the\n              // side-effect order.\n              if (returnFiber.firstEffect === null) {\n                returnFiber.firstEffect = workInProgress.firstEffect;\n              }\n\n              if (workInProgress.lastEffect !== null) {\n                if (returnFiber.lastEffect !== null) {\n                  returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;\n                }\n\n                returnFiber.lastEffect = workInProgress.lastEffect;\n              } // If this fiber had side-effects, we append it AFTER the children's\n              // side-effects. We can perform certain side-effects earlier if\n              // needed, by doing multiple passes over the effect list. We don't want\n              // to schedule our own side-effect on our own list because if end up\n              // reusing children we'll schedule this effect onto itself since we're\n              // at the end.\n\n\n              var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect list.\n              // PerformedWork effect is read by React DevTools but shouldn't be committed.\n\n              if (effectTag > PerformedWork) {\n                if (returnFiber.lastEffect !== null) {\n                  returnFiber.lastEffect.nextEffect = workInProgress;\n                } else {\n                  returnFiber.firstEffect = workInProgress;\n                }\n\n                returnFiber.lastEffect = workInProgress;\n              }\n            }\n\n            if (siblingFiber !== null) {\n              // If there is more work to do in this returnFiber, do that next.\n              return siblingFiber;\n            } else if (returnFiber !== null) {\n              // If there's no more work in this returnFiber. Complete the returnFiber.\n              workInProgress = returnFiber;\n              continue;\n            } else {\n              // We've reached the root.\n              return null;\n            }\n          } else {\n            if (workInProgress.mode & ProfileMode) {\n              // Record the render duration for the fiber that errored.\n              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.\n\n              var actualDuration = workInProgress.actualDuration;\n              var child = workInProgress.child;\n\n              while (child !== null) {\n                actualDuration += child.actualDuration;\n                child = child.sibling;\n              }\n\n              workInProgress.actualDuration = actualDuration;\n            } // This fiber did not complete because something threw. Pop values off\n            // the stack without entering the complete phase. If this is a boundary,\n            // capture values if possible.\n\n\n            var next = unwindWork(workInProgress, nextRenderExpirationTime); // Because this fiber did not complete, don't reset its expiration time.\n\n            if (workInProgress.effectTag & DidCapture) {\n              // Restarting an error boundary\n              stopFailedWorkTimer(workInProgress);\n            } else {\n              stopWorkTimer(workInProgress);\n            }\n\n            {\n              resetCurrentFiber();\n            }\n\n            if (next !== null) {\n              stopWorkTimer(workInProgress); // If completing this work spawned new work, do that next. We'll come\n              // back here again.\n              // Since we're restarting, remove anything that is not a host effect\n              // from the effect tag.\n\n              next.effectTag &= HostEffectMask;\n              return next;\n            }\n\n            if (returnFiber !== null) {\n              // Mark the parent fiber as incomplete and clear its effect list.\n              returnFiber.firstEffect = returnFiber.lastEffect = null;\n              returnFiber.effectTag |= Incomplete;\n            }\n\n            if (siblingFiber !== null) {\n              // If there is more work to do in this returnFiber, do that next.\n              return siblingFiber;\n            } else if (returnFiber !== null) {\n              // If there's no more work in this returnFiber. Complete the returnFiber.\n              workInProgress = returnFiber;\n              continue;\n            } else {\n              return null;\n            }\n          }\n        } // Without this explicit null return Flow complains of invalid return type\n        // TODO Remove the above while(true) loop\n        // eslint-disable-next-line no-unreachable\n\n\n        return null;\n      }\n\n      function performUnitOfWork(workInProgress) {\n        // The current, flushed, state of this fiber is the alternate.\n        // Ideally nothing should rely on this, but relying on it here\n        // means that we don't need an additional field on the work in\n        // progress.\n        var current$$1 = workInProgress.alternate; // See if beginning this work spawns more work.\n\n        startWorkTimer(workInProgress);\n        {\n          setCurrentFiber(workInProgress);\n        }\n        {\n          stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);\n        }\n        var next = void 0;\n        {\n          if (workInProgress.mode & ProfileMode) {\n            startProfilerTimer(workInProgress);\n          }\n\n          next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);\n          workInProgress.memoizedProps = workInProgress.pendingProps;\n\n          if (workInProgress.mode & ProfileMode) {\n            // Record the render duration assuming we didn't bailout (or error).\n            stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);\n          }\n        }\n        {\n          resetCurrentFiber();\n\n          if (isReplayingFailedUnitOfWork) {\n            // Currently replaying a failed unit of work. This should be unreachable,\n            // because the render phase is meant to be idempotent, and it should\n            // have thrown again. Since it didn't, rethrow the original error, so\n            // React's internal stack is not misaligned.\n            rethrowOriginalError();\n          }\n        }\n\n        if (next === null) {\n          // If this doesn't spawn new work, complete the current work.\n          next = completeUnitOfWork(workInProgress);\n        }\n\n        ReactCurrentOwner$1.current = null;\n        return next;\n      }\n\n      function workLoop(isYieldy) {\n        if (!isYieldy) {\n          // Flush work without yielding\n          while (nextUnitOfWork !== null) {\n            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n          }\n        } else {\n          // Flush asynchronous work until there's a higher priority event\n          while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {\n            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n          }\n        }\n      }\n\n      function renderRoot(root, isYieldy) {\n        !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        flushPassiveEffects();\n        isWorking = true;\n        {\n          ReactCurrentOwner$1.currentDispatcher = Dispatcher;\n        }\n        var expirationTime = root.nextExpirationTimeToWorkOn; // Check if we're starting from a fresh stack, or if we're resuming from\n        // previously yielded work.\n\n        if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {\n          // Reset the stack and start working from the root.\n          resetStack();\n          nextRoot = root;\n          nextRenderExpirationTime = expirationTime;\n          nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);\n          root.pendingCommitExpirationTime = NoWork;\n          {\n            // Determine which interactions this batch of work currently includes,\n            // So that we can accurately attribute time spent working on it,\n            var interactions = new Set();\n            root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {\n              if (scheduledExpirationTime >= expirationTime) {\n                scheduledInteractions.forEach(function (interaction) {\n                  return interactions.add(interaction);\n                });\n              }\n            }); // Store the current set of interactions on the FiberRoot for a few reasons:\n            // We can re-use it in hot functions like renderRoot() without having to recalculate it.\n            // We will also use it in commitWork() to pass to any Profiler onRender() hooks.\n            // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.\n\n            root.memoizedInteractions = interactions;\n\n            if (interactions.size > 0) {\n              var subscriber = tracing$$1.__subscriberRef.current;\n\n              if (subscriber !== null) {\n                var threadID = computeThreadID(expirationTime, root.interactionThreadID);\n\n                try {\n                  subscriber.onWorkStarted(interactions, threadID);\n                } catch (error) {\n                  // Work thrown by an interaction tracing subscriber should be rethrown,\n                  // But only once it's safe (to avoid leaveing the scheduler in an invalid state).\n                  // Store the error for now and we'll re-throw in finishRendering().\n                  if (!hasUnhandledError) {\n                    hasUnhandledError = true;\n                    unhandledError = error;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        var prevInteractions = null;\n        {\n          // We're about to start new traced work.\n          // Restore pending interactions so cascading work triggered during the render phase will be accounted for.\n          prevInteractions = tracing$$1.__interactionsRef.current;\n          tracing$$1.__interactionsRef.current = root.memoizedInteractions;\n        }\n        var didFatal = false;\n        startWorkLoopTimer(nextUnitOfWork);\n\n        do {\n          try {\n            workLoop(isYieldy);\n          } catch (thrownValue) {\n            resetContextDependences();\n            resetHooks(); // Reset in case completion throws.\n            // This is only used in DEV and when replaying is on.\n\n            var mayReplay = void 0;\n            {\n              mayReplay = mayReplayFailedUnitOfWork;\n              mayReplayFailedUnitOfWork = true;\n            }\n\n            if (nextUnitOfWork === null) {\n              // This is a fatal error.\n              didFatal = true;\n              onUncaughtError(thrownValue);\n            } else {\n              if (nextUnitOfWork.mode & ProfileMode) {\n                // Record the time spent rendering before an error was thrown.\n                // This avoids inaccurate Profiler durations in the case of a suspended render.\n                stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);\n              }\n\n              {\n                // Reset global debug state\n                // We assume this is defined in DEV\n                resetCurrentlyProcessingQueue();\n              }\n              {\n                if (mayReplay) {\n                  var failedUnitOfWork = nextUnitOfWork;\n                  replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);\n                }\n              } // TODO: we already know this isn't true in some cases.\n              // At least this shows a nicer error message until we figure out the cause.\n              // https://github.com/facebook/react/issues/12449#issuecomment-386727431\n\n              !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;\n              var sourceFiber = nextUnitOfWork;\n              var returnFiber = sourceFiber.return;\n\n              if (returnFiber === null) {\n                // This is the root. The root could capture its own errors. However,\n                // we don't know if it errors before or after we pushed the host\n                // context. This information is needed to avoid a stack mismatch.\n                // Because we're not sure, treat this as a fatal error. We could track\n                // which phase it fails in, but doesn't seem worth it. At least\n                // for now.\n                didFatal = true;\n                onUncaughtError(thrownValue);\n              } else {\n                throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);\n                nextUnitOfWork = completeUnitOfWork(sourceFiber);\n                continue;\n              }\n            }\n          }\n\n          break;\n        } while (true);\n\n        {\n          // Traced work is done for now; restore the previous interactions.\n          tracing$$1.__interactionsRef.current = prevInteractions;\n        } // We're done performing work. Time to clean up.\n\n        isWorking = false;\n        ReactCurrentOwner$1.currentDispatcher = null;\n        resetContextDependences();\n        resetHooks(); // Yield back to main thread.\n\n        if (didFatal) {\n          var _didCompleteRoot = false;\n          stopWorkLoopTimer(interruptedBy, _didCompleteRoot);\n          interruptedBy = null; // There was a fatal error.\n\n          {\n            resetStackAfterFatalErrorInDev();\n          } // `nextRoot` points to the in-progress root. A non-null value indicates\n          // that we're in the middle of an async render. Set it to null to indicate\n          // there's no more work to be done in the current batch.\n\n          nextRoot = null;\n          onFatal(root);\n          return;\n        }\n\n        if (nextUnitOfWork !== null) {\n          // There's still remaining async work in this tree, but we ran out of time\n          // in the current frame. Yield back to the renderer. Unless we're\n          // interrupted by a higher priority update, we'll continue later from where\n          // we left off.\n          var _didCompleteRoot2 = false;\n          stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);\n          interruptedBy = null;\n          onYield(root);\n          return;\n        } // We completed the whole tree.\n\n\n        var didCompleteRoot = true;\n        stopWorkLoopTimer(interruptedBy, didCompleteRoot);\n        var rootWorkInProgress = root.current.alternate;\n        !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0; // `nextRoot` points to the in-progress root. A non-null value indicates\n        // that we're in the middle of an async render. Set it to null to indicate\n        // there's no more work to be done in the current batch.\n\n        nextRoot = null;\n        interruptedBy = null;\n\n        if (nextRenderDidError) {\n          // There was an error\n          if (hasLowerPriorityWork(root, expirationTime)) {\n            // There's lower priority work. If so, it may have the effect of fixing\n            // the exception that was just thrown. Exit without committing. This is\n            // similar to a suspend, but without a timeout because we're not waiting\n            // for a promise to resolve. React will restart at the lower\n            // priority level.\n            markSuspendedPriorityLevel(root, expirationTime);\n            var suspendedExpirationTime = expirationTime;\n            var rootExpirationTime = root.expirationTime;\n            onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout\n            );\n            return;\n          } else if ( // There's no lower priority work, but we're rendering asynchronously.\n          // Synchronsouly attempt to render the same level one more time. This is\n          // similar to a suspend, but without a timeout because we're not waiting\n          // for a promise to resolve.\n          !root.didError && isYieldy) {\n            root.didError = true;\n\n            var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;\n\n            var _rootExpirationTime = root.expirationTime = Sync;\n\n            onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout\n            );\n            return;\n          }\n        }\n\n        if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {\n          // The tree was suspended.\n          var _suspendedExpirationTime2 = expirationTime;\n          markSuspendedPriorityLevel(root, _suspendedExpirationTime2); // Find the earliest uncommitted expiration time in the tree, including\n          // work that is suspended. The timeout threshold cannot be longer than\n          // the overall expiration.\n\n          var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);\n          var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);\n\n          if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {\n            nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;\n          } // Subtract the current time from the absolute timeout to get the number\n          // of milliseconds until the timeout. In other words, convert an absolute\n          // timestamp to a relative time. This is the value that is passed\n          // to `setTimeout`.\n\n\n          var currentTimeMs = expirationTimeToMs(requestCurrentTime());\n          var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;\n          msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout; // TODO: Account for the Just Noticeable Difference\n\n          var _rootExpirationTime2 = root.expirationTime;\n          onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);\n          return;\n        } // Ready to commit.\n\n\n        onComplete(root, rootWorkInProgress, expirationTime);\n      }\n\n      function captureCommitPhaseError(sourceFiber, value) {\n        var expirationTime = Sync;\n        var fiber = sourceFiber.return;\n\n        while (fiber !== null) {\n          switch (fiber.tag) {\n            case ClassComponent:\n              var ctor = fiber.type;\n              var instance = fiber.stateNode;\n\n              if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n                var errorInfo = createCapturedValue(value, sourceFiber);\n                var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);\n                enqueueUpdate(fiber, update);\n                scheduleWork(fiber, expirationTime);\n                return;\n              }\n\n              break;\n\n            case HostRoot:\n              {\n                var _errorInfo = createCapturedValue(value, sourceFiber);\n\n                var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);\n\n                enqueueUpdate(fiber, _update);\n                scheduleWork(fiber, expirationTime);\n                return;\n              }\n          }\n\n          fiber = fiber.return;\n        }\n\n        if (sourceFiber.tag === HostRoot) {\n          // Error was thrown at the root. There is no parent, so the root\n          // itself should capture it.\n          var rootFiber = sourceFiber;\n\n          var _errorInfo2 = createCapturedValue(value, rootFiber);\n\n          var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);\n\n          enqueueUpdate(rootFiber, _update2);\n          scheduleWork(rootFiber, expirationTime);\n        }\n      }\n\n      function computeThreadID(expirationTime, interactionThreadID) {\n        // Interaction threads are unique per root and expiration time.\n        return expirationTime * 1000 + interactionThreadID;\n      } // Creates a unique async expiration time.\n\n\n      function computeUniqueAsyncExpiration() {\n        var currentTime = requestCurrentTime();\n        var result = computeAsyncExpiration(currentTime);\n\n        if (result >= lastUniqueAsyncExpiration) {\n          // Since we assume the current time monotonically increases, we only hit\n          // this branch when computeUniqueAsyncExpiration is fired multiple times\n          // within a 200ms window (or whatever the async bucket size is).\n          result = lastUniqueAsyncExpiration - 1;\n        }\n\n        lastUniqueAsyncExpiration = result;\n        return lastUniqueAsyncExpiration;\n      }\n\n      function computeExpirationForFiber(currentTime, fiber) {\n        var expirationTime = void 0;\n\n        if (expirationContext !== NoWork) {\n          // An explicit expiration context was set;\n          expirationTime = expirationContext;\n        } else if (isWorking) {\n          if (isCommitting$1) {\n            // Updates that occur during the commit phase should have sync priority\n            // by default.\n            expirationTime = Sync;\n          } else {\n            // Updates during the render phase should expire at the same time as\n            // the work that is being rendered.\n            expirationTime = nextRenderExpirationTime;\n          }\n        } else {\n          // No explicit expiration context was set, and we're not currently\n          // performing work. Calculate a new expiration time.\n          if (fiber.mode & ConcurrentMode) {\n            if (isBatchingInteractiveUpdates) {\n              // This is an interactive update\n              expirationTime = computeInteractiveExpiration(currentTime);\n            } else {\n              // This is an async update\n              expirationTime = computeAsyncExpiration(currentTime);\n            } // If we're in the middle of rendering a tree, do not update at the same\n            // expiration time that is already rendering.\n\n\n            if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {\n              expirationTime -= 1;\n            }\n          } else {\n            // This is a sync update\n            expirationTime = Sync;\n          }\n        }\n\n        if (isBatchingInteractiveUpdates) {\n          // This is an interactive update. Keep track of the lowest pending\n          // interactive expiration time. This allows us to synchronously flush\n          // all interactive updates when needed.\n          if (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime) {\n            lowestPriorityPendingInteractiveExpirationTime = expirationTime;\n          }\n        }\n\n        return expirationTime;\n      }\n\n      function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {\n        // Schedule the timeout.\n        if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {\n          nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;\n        }\n      }\n\n      function renderDidError() {\n        nextRenderDidError = true;\n      }\n\n      function retrySuspendedRoot(root, boundaryFiber, sourceFiber, suspendedTime) {\n        var retryTime = void 0;\n\n        if (isPriorityLevelSuspended(root, suspendedTime)) {\n          // Ping at the original level\n          retryTime = suspendedTime;\n          markPingedPriorityLevel(root, retryTime);\n        } else {\n          // Suspense already timed out. Compute a new expiration time\n          var currentTime = requestCurrentTime();\n          retryTime = computeExpirationForFiber(currentTime, boundaryFiber);\n          markPendingPriorityLevel(root, retryTime);\n        } // TODO: If the suspense fiber has already rendered the primary children\n        // without suspending (that is, all of the promises have already resolved),\n        // we should not trigger another update here. One case this happens is when\n        // we are in sync mode and a single promise is thrown both on initial render\n        // and on update; we attach two .then(retrySuspendedRoot) callbacks and each\n        // one performs Sync work, rerendering the Suspense.\n\n\n        if ((boundaryFiber.mode & ConcurrentMode) !== NoContext) {\n          if (root === nextRoot && nextRenderExpirationTime === suspendedTime) {\n            // Received a ping at the same priority level at which we're currently\n            // rendering. Restart from the root.\n            nextRoot = null;\n          }\n        }\n\n        scheduleWorkToRoot(boundaryFiber, retryTime);\n\n        if ((boundaryFiber.mode & ConcurrentMode) === NoContext) {\n          // Outside of concurrent mode, we must schedule an update on the source\n          // fiber, too, since it already committed in an inconsistent state and\n          // therefore does not have any pending work.\n          scheduleWorkToRoot(sourceFiber, retryTime);\n          var sourceTag = sourceFiber.tag;\n\n          if (sourceTag === ClassComponent && sourceFiber.stateNode !== null) {\n            // When we try rendering again, we should not reuse the current fiber,\n            // since it's known to be in an inconsistent state. Use a force updte to\n            // prevent a bail out.\n            var update = createUpdate(retryTime);\n            update.tag = ForceUpdate;\n            enqueueUpdate(sourceFiber, update);\n          }\n        }\n\n        var rootExpirationTime = root.expirationTime;\n\n        if (rootExpirationTime !== NoWork) {\n          requestWork(root, rootExpirationTime);\n        }\n      }\n\n      function scheduleWorkToRoot(fiber, expirationTime) {\n        recordScheduleUpdate();\n        {\n          if (fiber.tag === ClassComponent) {\n            var instance = fiber.stateNode;\n            warnAboutInvalidUpdates(instance);\n          }\n        } // Update the source fiber's expiration time\n\n        if (fiber.expirationTime < expirationTime) {\n          fiber.expirationTime = expirationTime;\n        }\n\n        var alternate = fiber.alternate;\n\n        if (alternate !== null && alternate.expirationTime < expirationTime) {\n          alternate.expirationTime = expirationTime;\n        } // Walk the parent path to the root and update the child expiration time.\n\n\n        var node = fiber.return;\n        var root = null;\n\n        if (node === null && fiber.tag === HostRoot) {\n          root = fiber.stateNode;\n        } else {\n          while (node !== null) {\n            alternate = node.alternate;\n\n            if (node.childExpirationTime < expirationTime) {\n              node.childExpirationTime = expirationTime;\n\n              if (alternate !== null && alternate.childExpirationTime < expirationTime) {\n                alternate.childExpirationTime = expirationTime;\n              }\n            } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {\n              alternate.childExpirationTime = expirationTime;\n            }\n\n            if (node.return === null && node.tag === HostRoot) {\n              root = node.stateNode;\n              break;\n            }\n\n            node = node.return;\n          }\n        }\n\n        {\n          if (root !== null) {\n            var interactions = tracing$$1.__interactionsRef.current;\n\n            if (interactions.size > 0) {\n              var pendingInteractionMap = root.pendingInteractionMap;\n              var pendingInteractions = pendingInteractionMap.get(expirationTime);\n\n              if (pendingInteractions != null) {\n                interactions.forEach(function (interaction) {\n                  if (!pendingInteractions.has(interaction)) {\n                    // Update the pending async work count for previously unscheduled interaction.\n                    interaction.__count++;\n                  }\n\n                  pendingInteractions.add(interaction);\n                });\n              } else {\n                pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.\n\n                interactions.forEach(function (interaction) {\n                  interaction.__count++;\n                });\n              }\n\n              var subscriber = tracing$$1.__subscriberRef.current;\n\n              if (subscriber !== null) {\n                var threadID = computeThreadID(expirationTime, root.interactionThreadID);\n                subscriber.onWorkScheduled(interactions, threadID);\n              }\n            }\n          }\n        }\n        return root;\n      }\n\n      function scheduleWork(fiber, expirationTime) {\n        var root = scheduleWorkToRoot(fiber, expirationTime);\n\n        if (root === null) {\n          {\n            switch (fiber.tag) {\n              case ClassComponent:\n                warnAboutUpdateOnUnmounted(fiber, true);\n                break;\n\n              case FunctionComponent:\n              case ForwardRef:\n              case MemoComponent:\n              case SimpleMemoComponent:\n                warnAboutUpdateOnUnmounted(fiber, false);\n                break;\n            }\n          }\n          return;\n        }\n\n        if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {\n          // This is an interruption. (Used for performance tracking.)\n          interruptedBy = fiber;\n          resetStack();\n        }\n\n        markPendingPriorityLevel(root, expirationTime);\n\n        if ( // If we're in the render phase, we don't need to schedule this root\n        // for an update, because we'll do it before we exit...\n        !isWorking || isCommitting$1 || // ...unless this is a different root than the one we're rendering.\n        nextRoot !== root) {\n          var rootExpirationTime = root.expirationTime;\n          requestWork(root, rootExpirationTime);\n        }\n\n        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n          // Reset this back to zero so subsequent updates don't throw.\n          nestedUpdateCount = 0;\n          invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');\n        }\n      }\n\n      function deferredUpdates(fn) {\n        var currentTime = requestCurrentTime();\n        var previousExpirationContext = expirationContext;\n        var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;\n        expirationContext = computeAsyncExpiration(currentTime);\n        isBatchingInteractiveUpdates = false;\n\n        try {\n          return fn();\n        } finally {\n          expirationContext = previousExpirationContext;\n          isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;\n        }\n      }\n\n      function syncUpdates(fn, a, b, c, d) {\n        var previousExpirationContext = expirationContext;\n        expirationContext = Sync;\n\n        try {\n          return fn(a, b, c, d);\n        } finally {\n          expirationContext = previousExpirationContext;\n        }\n      } // TODO: Everything below this is written as if it has been lifted to the\n      // renderers. I'll do this in a follow-up.\n      // Linked-list of roots\n\n\n      var firstScheduledRoot = null;\n      var lastScheduledRoot = null;\n      var callbackExpirationTime = NoWork;\n      var callbackID = void 0;\n      var isRendering = false;\n      var nextFlushedRoot = null;\n      var nextFlushedExpirationTime = NoWork;\n      var lowestPriorityPendingInteractiveExpirationTime = NoWork;\n      var hasUnhandledError = false;\n      var unhandledError = null;\n      var isBatchingUpdates = false;\n      var isUnbatchingUpdates = false;\n      var isBatchingInteractiveUpdates = false;\n      var completedBatches = null;\n      var originalStartTimeMs = now();\n      var currentRendererTime = msToExpirationTime(originalStartTimeMs);\n      var currentSchedulerTime = currentRendererTime; // Use these to prevent an infinite loop of nested updates\n\n      var NESTED_UPDATE_LIMIT = 50;\n      var nestedUpdateCount = 0;\n      var lastCommittedRootDuringThisBatch = null;\n\n      function recomputeCurrentRendererTime() {\n        var currentTimeMs = now() - originalStartTimeMs;\n        currentRendererTime = msToExpirationTime(currentTimeMs);\n      }\n\n      function scheduleCallbackWithExpirationTime(root, expirationTime) {\n        if (callbackExpirationTime !== NoWork) {\n          // A callback is already scheduled. Check its expiration time (timeout).\n          if (expirationTime < callbackExpirationTime) {\n            // Existing callback has sufficient timeout. Exit.\n            return;\n          } else {\n            if (callbackID !== null) {\n              // Existing callback has insufficient timeout. Cancel and schedule a\n              // new one.\n              cancelDeferredCallback(callbackID);\n            }\n          } // The request callback timer is already running. Don't start a new one.\n\n        } else {\n          startRequestCallbackTimer();\n        }\n\n        callbackExpirationTime = expirationTime;\n        var currentMs = now() - originalStartTimeMs;\n        var expirationTimeMs = expirationTimeToMs(expirationTime);\n        var timeout = expirationTimeMs - currentMs;\n        callbackID = scheduleDeferredCallback(performAsyncWork, {\n          timeout: timeout\n        });\n      } // For every call to renderRoot, one of onFatal, onComplete, onSuspend, and\n      // onYield is called upon exiting. We use these in lieu of returning a tuple.\n      // I've also chosen not to inline them into renderRoot because these will\n      // eventually be lifted into the renderer.\n\n\n      function onFatal(root) {\n        root.finishedWork = null;\n      }\n\n      function onComplete(root, finishedWork, expirationTime) {\n        root.pendingCommitExpirationTime = expirationTime;\n        root.finishedWork = finishedWork;\n      }\n\n      function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {\n        root.expirationTime = rootExpirationTime;\n\n        if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {\n          // Don't wait an additional tick. Commit the tree immediately.\n          root.pendingCommitExpirationTime = suspendedExpirationTime;\n          root.finishedWork = finishedWork;\n        } else if (msUntilTimeout > 0) {\n          // Wait `msUntilTimeout` milliseconds before committing.\n          root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);\n        }\n      }\n\n      function onYield(root) {\n        root.finishedWork = null;\n      }\n\n      function onTimeout(root, finishedWork, suspendedExpirationTime) {\n        // The root timed out. Commit it.\n        root.pendingCommitExpirationTime = suspendedExpirationTime;\n        root.finishedWork = finishedWork; // Read the current time before entering the commit phase. We can be\n        // certain this won't cause tearing related to batching of event updates\n        // because we're at the top of a timer event.\n\n        recomputeCurrentRendererTime();\n        currentSchedulerTime = currentRendererTime;\n        flushRoot(root, suspendedExpirationTime);\n      }\n\n      function onCommit(root, expirationTime) {\n        root.expirationTime = expirationTime;\n        root.finishedWork = null;\n      }\n\n      function requestCurrentTime() {\n        // requestCurrentTime is called by the scheduler to compute an expiration\n        // time.\n        //\n        // Expiration times are computed by adding to the current time (the start\n        // time). However, if two updates are scheduled within the same event, we\n        // should treat their start times as simultaneous, even if the actual clock\n        // time has advanced between the first and second call.\n        // In other words, because expiration times determine how updates are batched,\n        // we want all updates of like priority that occur within the same event to\n        // receive the same expiration time. Otherwise we get tearing.\n        //\n        // We keep track of two separate times: the current \"renderer\" time and the\n        // current \"scheduler\" time. The renderer time can be updated whenever; it\n        // only exists to minimize the calls performance.now.\n        //\n        // But the scheduler time can only be updated if there's no pending work, or\n        // if we know for certain that we're not in the middle of an event.\n        if (isRendering) {\n          // We're already rendering. Return the most recently read time.\n          return currentSchedulerTime;\n        } // Check if there's pending work.\n\n\n        findHighestPriorityRoot();\n\n        if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {\n          // If there's no pending work, or if the pending work is offscreen, we can\n          // read the current time without risk of tearing.\n          recomputeCurrentRendererTime();\n          currentSchedulerTime = currentRendererTime;\n          return currentSchedulerTime;\n        } // There's already pending work. We might be in the middle of a browser\n        // event. If we were to read the current time, it could cause multiple updates\n        // within the same event to receive different expiration times, leading to\n        // tearing. Return the last read time. During the next idle callback, the\n        // time will be updated.\n\n\n        return currentSchedulerTime;\n      } // requestWork is called by the scheduler whenever a root receives an update.\n      // It's up to the renderer to call renderRoot at some point in the future.\n\n\n      function requestWork(root, expirationTime) {\n        addRootToSchedule(root, expirationTime);\n\n        if (isRendering) {\n          // Prevent reentrancy. Remaining work will be scheduled at the end of\n          // the currently rendering batch.\n          return;\n        }\n\n        if (isBatchingUpdates) {\n          // Flush work at the end of the batch.\n          if (isUnbatchingUpdates) {\n            // ...unless we're inside unbatchedUpdates, in which case we should\n            // flush it now.\n            nextFlushedRoot = root;\n            nextFlushedExpirationTime = Sync;\n            performWorkOnRoot(root, Sync, false);\n          }\n\n          return;\n        } // TODO: Get rid of Sync and use current time?\n\n\n        if (expirationTime === Sync) {\n          performSyncWork();\n        } else {\n          scheduleCallbackWithExpirationTime(root, expirationTime);\n        }\n      }\n\n      function addRootToSchedule(root, expirationTime) {\n        // Add the root to the schedule.\n        // Check if this root is already part of the schedule.\n        if (root.nextScheduledRoot === null) {\n          // This root is not already scheduled. Add it.\n          root.expirationTime = expirationTime;\n\n          if (lastScheduledRoot === null) {\n            firstScheduledRoot = lastScheduledRoot = root;\n            root.nextScheduledRoot = root;\n          } else {\n            lastScheduledRoot.nextScheduledRoot = root;\n            lastScheduledRoot = root;\n            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;\n          }\n        } else {\n          // This root is already scheduled, but its priority may have increased.\n          var remainingExpirationTime = root.expirationTime;\n\n          if (expirationTime > remainingExpirationTime) {\n            // Update the priority.\n            root.expirationTime = expirationTime;\n          }\n        }\n      }\n\n      function findHighestPriorityRoot() {\n        var highestPriorityWork = NoWork;\n        var highestPriorityRoot = null;\n\n        if (lastScheduledRoot !== null) {\n          var previousScheduledRoot = lastScheduledRoot;\n          var root = firstScheduledRoot;\n\n          while (root !== null) {\n            var remainingExpirationTime = root.expirationTime;\n\n            if (remainingExpirationTime === NoWork) {\n              // This root no longer has work. Remove it from the scheduler.\n              // TODO: This check is redudant, but Flow is confused by the branch\n              // below where we set lastScheduledRoot to null, even though we break\n              // from the loop right after.\n              !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n              if (root === root.nextScheduledRoot) {\n                // This is the only root in the list.\n                root.nextScheduledRoot = null;\n                firstScheduledRoot = lastScheduledRoot = null;\n                break;\n              } else if (root === firstScheduledRoot) {\n                // This is the first root in the list.\n                var next = root.nextScheduledRoot;\n                firstScheduledRoot = next;\n                lastScheduledRoot.nextScheduledRoot = next;\n                root.nextScheduledRoot = null;\n              } else if (root === lastScheduledRoot) {\n                // This is the last root in the list.\n                lastScheduledRoot = previousScheduledRoot;\n                lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;\n                root.nextScheduledRoot = null;\n                break;\n              } else {\n                previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;\n                root.nextScheduledRoot = null;\n              }\n\n              root = previousScheduledRoot.nextScheduledRoot;\n            } else {\n              if (remainingExpirationTime > highestPriorityWork) {\n                // Update the priority, if it's higher\n                highestPriorityWork = remainingExpirationTime;\n                highestPriorityRoot = root;\n              }\n\n              if (root === lastScheduledRoot) {\n                break;\n              }\n\n              if (highestPriorityWork === Sync) {\n                // Sync is highest priority by definition so\n                // we can stop searching.\n                break;\n              }\n\n              previousScheduledRoot = root;\n              root = root.nextScheduledRoot;\n            }\n          }\n        }\n\n        nextFlushedRoot = highestPriorityRoot;\n        nextFlushedExpirationTime = highestPriorityWork;\n      } // TODO: This wrapper exists because many of the older tests (the ones that use\n      // flushDeferredPri) rely on the number of times `shouldYield` is called. We\n      // should get rid of it.\n\n\n      var didYield = false;\n\n      function shouldYieldToRenderer() {\n        if (didYield) {\n          return true;\n        }\n\n        if (shouldYield()) {\n          didYield = true;\n          return true;\n        }\n\n        return false;\n      }\n\n      function performAsyncWork() {\n        try {\n          if (!shouldYieldToRenderer()) {\n            // The callback timed out. That means at least one update has expired.\n            // Iterate through the root schedule. If they contain expired work, set\n            // the next render expiration time to the current time. This has the effect\n            // of flushing all expired work in a single batch, instead of flushing each\n            // level one at a time.\n            if (firstScheduledRoot !== null) {\n              recomputeCurrentRendererTime();\n              var root = firstScheduledRoot;\n\n              do {\n                didExpireAtExpirationTime(root, currentRendererTime); // The root schedule is circular, so this is never null.\n\n                root = root.nextScheduledRoot;\n              } while (root !== firstScheduledRoot);\n            }\n          }\n\n          performWork(NoWork, true);\n        } finally {\n          didYield = false;\n        }\n      }\n\n      function performSyncWork() {\n        performWork(Sync, false);\n      }\n\n      function performWork(minExpirationTime, isYieldy) {\n        // Keep working on roots until there's no more work, or until there's a higher\n        // priority event.\n        findHighestPriorityRoot();\n\n        if (isYieldy) {\n          recomputeCurrentRendererTime();\n          currentSchedulerTime = currentRendererTime;\n          {\n            var didExpire = nextFlushedExpirationTime > currentRendererTime;\n            var timeout = expirationTimeToMs(nextFlushedExpirationTime);\n            stopRequestCallbackTimer(didExpire, timeout);\n          }\n\n          while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {\n            performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);\n            findHighestPriorityRoot();\n            recomputeCurrentRendererTime();\n            currentSchedulerTime = currentRendererTime;\n          }\n        } else {\n          while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {\n            performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);\n            findHighestPriorityRoot();\n          }\n        } // We're done flushing work. Either we ran out of time in this callback,\n        // or there's no more work left with sufficient priority.\n        // If we're inside a callback, set this to false since we just completed it.\n\n\n        if (isYieldy) {\n          callbackExpirationTime = NoWork;\n          callbackID = null;\n        } // If there's work left over, schedule a new callback.\n\n\n        if (nextFlushedExpirationTime !== NoWork) {\n          scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);\n        } // Clean-up.\n\n\n        finishRendering();\n      }\n\n      function flushRoot(root, expirationTime) {\n        !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0; // Perform work on root as if the given expiration time is the current time.\n        // This has the effect of synchronously flushing all work up to and\n        // including the given time.\n\n        nextFlushedRoot = root;\n        nextFlushedExpirationTime = expirationTime;\n        performWorkOnRoot(root, expirationTime, false); // Flush any sync work that was scheduled by lifecycles\n\n        performSyncWork();\n      }\n\n      function finishRendering() {\n        nestedUpdateCount = 0;\n        lastCommittedRootDuringThisBatch = null;\n\n        if (completedBatches !== null) {\n          var batches = completedBatches;\n          completedBatches = null;\n\n          for (var i = 0; i < batches.length; i++) {\n            var batch = batches[i];\n\n            try {\n              batch._onComplete();\n            } catch (error) {\n              if (!hasUnhandledError) {\n                hasUnhandledError = true;\n                unhandledError = error;\n              }\n            }\n          }\n        }\n\n        if (hasUnhandledError) {\n          var error = unhandledError;\n          unhandledError = null;\n          hasUnhandledError = false;\n          throw error;\n        }\n      }\n\n      function performWorkOnRoot(root, expirationTime, isYieldy) {\n        !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        isRendering = true; // Check if this is async work or sync/expired work.\n\n        if (!isYieldy) {\n          // Flush work without yielding.\n          // TODO: Non-yieldy work does not necessarily imply expired work. A renderer\n          // may want to perform some work without yielding, but also without\n          // requiring the root to complete (by triggering placeholders).\n          var finishedWork = root.finishedWork;\n\n          if (finishedWork !== null) {\n            // This root is already complete. We can commit it.\n            completeRoot(root, finishedWork, expirationTime);\n          } else {\n            root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since\n            // we're about to try rendering again.\n\n            var timeoutHandle = root.timeoutHandle;\n\n            if (timeoutHandle !== noTimeout) {\n              root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n              cancelTimeout(timeoutHandle);\n            }\n\n            renderRoot(root, isYieldy);\n            finishedWork = root.finishedWork;\n\n            if (finishedWork !== null) {\n              // We've completed the root. Commit it.\n              completeRoot(root, finishedWork, expirationTime);\n            }\n          }\n        } else {\n          // Flush async work.\n          var _finishedWork = root.finishedWork;\n\n          if (_finishedWork !== null) {\n            // This root is already complete. We can commit it.\n            completeRoot(root, _finishedWork, expirationTime);\n          } else {\n            root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since\n            // we're about to try rendering again.\n\n            var _timeoutHandle = root.timeoutHandle;\n\n            if (_timeoutHandle !== noTimeout) {\n              root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n              cancelTimeout(_timeoutHandle);\n            }\n\n            renderRoot(root, isYieldy);\n            _finishedWork = root.finishedWork;\n\n            if (_finishedWork !== null) {\n              // We've completed the root. Check the if we should yield one more time\n              // before committing.\n              if (!shouldYieldToRenderer()) {\n                // Still time left. Commit the root.\n                completeRoot(root, _finishedWork, expirationTime);\n              } else {\n                // There's no time left. Mark this root as complete. We'll come\n                // back and commit it later.\n                root.finishedWork = _finishedWork;\n              }\n            }\n          }\n        }\n\n        isRendering = false;\n      }\n\n      function completeRoot(root, finishedWork, expirationTime) {\n        // Check if there's a batch that matches this expiration time.\n        var firstBatch = root.firstBatch;\n\n        if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {\n          if (completedBatches === null) {\n            completedBatches = [firstBatch];\n          } else {\n            completedBatches.push(firstBatch);\n          }\n\n          if (firstBatch._defer) {\n            // This root is blocked from committing by a batch. Unschedule it until\n            // we receive another update.\n            root.finishedWork = finishedWork;\n            root.expirationTime = NoWork;\n            return;\n          }\n        } // Commit the root.\n\n\n        root.finishedWork = null; // Check if this is a nested update (a sync update scheduled during the\n        // commit phase).\n\n        if (root === lastCommittedRootDuringThisBatch) {\n          // If the next root is the same as the previous root, this is a nested\n          // update. To prevent an infinite loop, increment the nested update count.\n          nestedUpdateCount++;\n        } else {\n          // Reset whenever we switch roots.\n          lastCommittedRootDuringThisBatch = root;\n          nestedUpdateCount = 0;\n        }\n\n        commitRoot(root, finishedWork);\n      }\n\n      function onUncaughtError(error) {\n        !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0; // Unschedule this root so we don't work on it again until there's\n        // another update.\n\n        nextFlushedRoot.expirationTime = NoWork;\n\n        if (!hasUnhandledError) {\n          hasUnhandledError = true;\n          unhandledError = error;\n        }\n      } // TODO: Batching should be implemented at the renderer level, not inside\n      // the reconciler.\n\n\n      function batchedUpdates(fn, a) {\n        var previousIsBatchingUpdates = isBatchingUpdates;\n        isBatchingUpdates = true;\n\n        try {\n          return fn(a);\n        } finally {\n          isBatchingUpdates = previousIsBatchingUpdates;\n\n          if (!isBatchingUpdates && !isRendering) {\n            performSyncWork();\n          }\n        }\n      } // TODO: Batching should be implemented at the renderer level, not inside\n      // the reconciler.\n\n\n      function unbatchedUpdates(fn, a) {\n        if (isBatchingUpdates && !isUnbatchingUpdates) {\n          isUnbatchingUpdates = true;\n\n          try {\n            return fn(a);\n          } finally {\n            isUnbatchingUpdates = false;\n          }\n        }\n\n        return fn(a);\n      } // TODO: Batching should be implemented at the renderer level, not within\n      // the reconciler.\n\n\n      function flushSync(fn, a) {\n        !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;\n        var previousIsBatchingUpdates = isBatchingUpdates;\n        isBatchingUpdates = true;\n\n        try {\n          return syncUpdates(fn, a);\n        } finally {\n          isBatchingUpdates = previousIsBatchingUpdates;\n          performSyncWork();\n        }\n      }\n\n      function interactiveUpdates(fn, a, b) {\n        if (isBatchingInteractiveUpdates) {\n          return fn(a, b);\n        } // If there are any pending interactive updates, synchronously flush them.\n        // This needs to happen before we read any handlers, because the effect of\n        // the previous event may influence which handlers are called during\n        // this event.\n\n\n        if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {\n          // Synchronously flush pending interactive updates.\n          performWork(lowestPriorityPendingInteractiveExpirationTime, false);\n          lowestPriorityPendingInteractiveExpirationTime = NoWork;\n        }\n\n        var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;\n        var previousIsBatchingUpdates = isBatchingUpdates;\n        isBatchingInteractiveUpdates = true;\n        isBatchingUpdates = true;\n\n        try {\n          return fn(a, b);\n        } finally {\n          isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;\n          isBatchingUpdates = previousIsBatchingUpdates;\n\n          if (!isBatchingUpdates && !isRendering) {\n            performSyncWork();\n          }\n        }\n      }\n\n      function flushInteractiveUpdates() {\n        if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {\n          // Synchronously flush pending interactive updates.\n          performWork(lowestPriorityPendingInteractiveExpirationTime, false);\n          lowestPriorityPendingInteractiveExpirationTime = NoWork;\n        }\n      }\n\n      function flushControlled(fn) {\n        var previousIsBatchingUpdates = isBatchingUpdates;\n        isBatchingUpdates = true;\n\n        try {\n          syncUpdates(fn);\n        } finally {\n          isBatchingUpdates = previousIsBatchingUpdates;\n\n          if (!isBatchingUpdates && !isRendering) {\n            performSyncWork();\n          }\n        }\n      } // 0 is PROD, 1 is DEV.\n      // Might add PROFILE later.\n\n\n      var didWarnAboutNestedUpdates = void 0;\n      var didWarnAboutFindNodeInStrictMode = void 0;\n      {\n        didWarnAboutNestedUpdates = false;\n        didWarnAboutFindNodeInStrictMode = {};\n      }\n\n      function getContextForSubtree(parentComponent) {\n        if (!parentComponent) {\n          return emptyContextObject;\n        }\n\n        var fiber = get(parentComponent);\n        var parentContext = findCurrentUnmaskedContext(fiber);\n\n        if (fiber.tag === ClassComponent) {\n          var Component = fiber.type;\n\n          if (isContextProvider(Component)) {\n            return processChildContext(fiber, Component, parentContext);\n          }\n        }\n\n        return parentContext;\n      }\n\n      function scheduleRootUpdate(current$$1, element, expirationTime, callback) {\n        {\n          if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {\n            didWarnAboutNestedUpdates = true;\n            warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');\n          }\n        }\n        var update = createUpdate(expirationTime); // Caution: React DevTools currently depends on this property\n        // being called \"element\".\n\n        update.payload = {\n          element: element\n        };\n        callback = callback === undefined ? null : callback;\n\n        if (callback !== null) {\n          !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;\n          update.callback = callback;\n        }\n\n        flushPassiveEffects();\n        enqueueUpdate(current$$1, update);\n        scheduleWork(current$$1, expirationTime);\n        return expirationTime;\n      }\n\n      function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {\n        // TODO: If this is a nested container, this won't be the root.\n        var current$$1 = container.current;\n        var context = getContextForSubtree(parentComponent);\n\n        if (container.context === null) {\n          container.context = context;\n        } else {\n          container.pendingContext = context;\n        }\n\n        return scheduleRootUpdate(current$$1, element, expirationTime, callback);\n      }\n\n      function findHostInstance(component) {\n        var fiber = get(component);\n\n        if (fiber === undefined) {\n          if (typeof component.render === 'function') {\n            invariant(false, 'Unable to find node on an unmounted component.');\n          } else {\n            invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));\n          }\n        }\n\n        var hostFiber = findCurrentHostFiber(fiber);\n\n        if (hostFiber === null) {\n          return null;\n        }\n\n        return hostFiber.stateNode;\n      }\n\n      function findHostInstanceWithWarning(component, methodName) {\n        {\n          var fiber = get(component);\n\n          if (fiber === undefined) {\n            if (typeof component.render === 'function') {\n              invariant(false, 'Unable to find node on an unmounted component.');\n            } else {\n              invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));\n            }\n          }\n\n          var hostFiber = findCurrentHostFiber(fiber);\n\n          if (hostFiber === null) {\n            return null;\n          }\n\n          if (hostFiber.mode & StrictMode) {\n            var componentName = getComponentName(fiber.type) || 'Component';\n\n            if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n              didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n              if (fiber.mode & StrictMode) {\n                warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\\n%s' + '\\n\\nLearn more about using refs safely here:' + '\\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));\n              } else {\n                warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\\n%s' + '\\n\\nLearn more about using refs safely here:' + '\\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));\n              }\n            }\n          }\n\n          return hostFiber.stateNode;\n        }\n        return findHostInstance(component);\n      }\n\n      function createContainer(containerInfo, isConcurrent, hydrate) {\n        return createFiberRoot(containerInfo, isConcurrent, hydrate);\n      }\n\n      function updateContainer(element, container, parentComponent, callback) {\n        var current$$1 = container.current;\n        var currentTime = requestCurrentTime();\n        var expirationTime = computeExpirationForFiber(currentTime, current$$1);\n        return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);\n      }\n\n      function getPublicRootInstance(container) {\n        var containerFiber = container.current;\n\n        if (!containerFiber.child) {\n          return null;\n        }\n\n        switch (containerFiber.child.tag) {\n          case HostComponent:\n            return getPublicInstance(containerFiber.child.stateNode);\n\n          default:\n            return containerFiber.child.stateNode;\n        }\n      }\n\n      function findHostInstanceWithNoPortals(fiber) {\n        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n        if (hostFiber === null) {\n          return null;\n        }\n\n        return hostFiber.stateNode;\n      }\n\n      function injectIntoDevTools(devToolsConfig) {\n        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n        return injectInternals(_assign({}, devToolsConfig, {\n          findHostInstanceByFiber: function (fiber) {\n            var hostFiber = findCurrentHostFiber(fiber);\n\n            if (hostFiber === null) {\n              return null;\n            }\n\n            return hostFiber.stateNode;\n          },\n          findFiberByHostInstance: function (instance) {\n            if (!findFiberByHostInstance) {\n              // Might not be implemented by the renderer.\n              return null;\n            }\n\n            return findFiberByHostInstance(instance);\n          }\n        }));\n      }\n\n      var ReactFiberReconciler = Object.freeze({\n        updateContainerAtExpirationTime: updateContainerAtExpirationTime,\n        createContainer: createContainer,\n        updateContainer: updateContainer,\n        flushRoot: flushRoot,\n        requestWork: requestWork,\n        computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,\n        batchedUpdates: batchedUpdates,\n        unbatchedUpdates: unbatchedUpdates,\n        deferredUpdates: deferredUpdates,\n        syncUpdates: syncUpdates,\n        interactiveUpdates: interactiveUpdates,\n        flushInteractiveUpdates: flushInteractiveUpdates,\n        flushControlled: flushControlled,\n        flushSync: flushSync,\n        getPublicRootInstance: getPublicRootInstance,\n        findHostInstance: findHostInstance,\n        findHostInstanceWithWarning: findHostInstanceWithWarning,\n        findHostInstanceWithNoPortals: findHostInstanceWithNoPortals,\n        injectIntoDevTools: injectIntoDevTools\n      }); // This entry point is intentionally not typed. It exists only for third-party\n      // renderers. The renderers we ship (such as React DOM) instead import a named\n      // \"inline\" entry point (for example, `react-reconciler/inline.dom`). It uses\n      // the same code, but the Flow configuration redirects the host config to its\n      // real implementation so we can check it against exact intended host types.\n      //\n      // Only one renderer (the one you passed to `yarn flow <renderer>`) is fully\n      // type-checked at any given time. The Flow config maps the\n      // `react-reconciler/inline.<renderer>` import (which is *not* Flow typed) to\n      // `react-reconciler/inline-typed` (which *is*) for the current renderer.\n      // On CI, we run Flow checks for each renderer separately.\n      // TODO: decide on the top-level export form.\n      // This is hacky but makes it work with both Rollup and Jest.\n\n      var reactReconciler = ReactFiberReconciler.default || ReactFiberReconciler;\n      module.exports = reactReconciler;\n      var $$$renderer = module.exports;\n      module.exports = $$$reconciler;\n      return $$$renderer;\n    };\n  }\n});\nvar reactReconciler = createCommonjsModule(function (module) {\n  {\n    module.exports = reactReconciler_development;\n  }\n});\nvar name = \"@inlet/react-pixi\";\nvar version = \"0.4.3\";\nvar description = \"Write PixiJS applications using React declarative style.\";\nvar main = \"index.js\";\nvar module$1 = \"module.js\";\nvar author = \"Patrick Brouwer\";\nvar license = \"MIT\";\nvar repository = \"git+https://github.com/inlet/react-pixi.git\";\nvar scripts = {\n  \"docz:dev\": \"docz dev\",\n  \"docz:build\": \"docz build\",\n  eslint: \"eslint .\",\n  \"build:watch\": \"cross-env NODE_ENV=development rollup -c --watch\",\n  \"build:dev\": \"cross-env NODE_ENV=development rollup -c\",\n  \"build:prod\": \"cross-env NODE_ENV=production rollup -c\",\n  build: \"rimraf ./dist && npm run build:dev && npm run build:prod\",\n  test: \"jest --silent\",\n  \"test:watch\": \"jest --silent --watch\",\n  prepublish: \"if-env CI=true && echo \\\"skip build\\\" || (npm run test && npm run eslint && npm run build)\"\n};\nvar files = [\"dist/\", \"LICENSE\", \"index.d.ts\", \"index.js\", \"umd.js\", \"module.js\"];\nvar typings = \"./index.d.ts\";\nvar devDependencies = {\n  \"@babel/cli\": \"^7.1.5\",\n  \"@babel/core\": \"^7.1.6\",\n  \"@babel/plugin-proposal-class-properties\": \"^7.1.0\",\n  \"@babel/plugin-proposal-decorators\": \"^7.1.6\",\n  \"@babel/plugin-proposal-do-expressions\": \"^7.0.0\",\n  \"@babel/plugin-proposal-export-default-from\": \"^7.0.0\",\n  \"@babel/plugin-proposal-export-namespace-from\": \"^7.0.0\",\n  \"@babel/plugin-proposal-function-bind\": \"^7.0.0\",\n  \"@babel/plugin-proposal-function-sent\": \"^7.1.0\",\n  \"@babel/plugin-proposal-json-strings\": \"^7.0.0\",\n  \"@babel/plugin-proposal-logical-assignment-operators\": \"^7.0.0\",\n  \"@babel/plugin-proposal-nullish-coalescing-operator\": \"^7.0.0\",\n  \"@babel/plugin-proposal-numeric-separator\": \"^7.0.0\",\n  \"@babel/plugin-proposal-optional-chaining\": \"^7.0.0\",\n  \"@babel/plugin-proposal-pipeline-operator\": \"^7.0.0\",\n  \"@babel/plugin-proposal-throw-expressions\": \"^7.0.0\",\n  \"@babel/plugin-syntax-dynamic-import\": \"^7.0.0\",\n  \"@babel/plugin-syntax-import-meta\": \"^7.0.0\",\n  \"@babel/preset-env\": \"^7.1.6\",\n  \"@babel/preset-react\": \"^7.0.0\",\n  \"@types/jest\": \"^23.3.10\",\n  \"@types/pixi.js\": \"^4.8.4\",\n  \"@types/react\": \"^16.7.11\",\n  \"@types/react-dom\": \"^16.0.11\",\n  \"babel-core\": \"^7.0.0-bridge.0\",\n  \"babel-eslint\": \"^10.0.1\",\n  \"babel-jest\": \"^23.6.0\",\n  \"canvas-prebuilt\": \"1\",\n  \"cross-env\": \"^5.2.0\",\n  docz: \"^0.11.1\",\n  eslint: \"^5.9.0\",\n  \"eslint-config-prettier\": \"^3.3.0\",\n  \"eslint-plugin-prettier\": \"^3.0.0\",\n  \"eslint-plugin-react\": \"^7.11.1\",\n  idx: \"^2.5.2\",\n  \"if-env\": \"^1.0.4\",\n  jest: \"^23.5.0\",\n  lodash: \"^4.17.10\",\n  \"pixi.js\": \"^4.8.1\",\n  prettier: \"^1.15.3\",\n  \"prop-types\": \"^15.6.2\",\n  react: \"^16.7.0-alpha.2\",\n  \"react-dom\": \"^16.7.0-alpha.2\",\n  \"react-test-renderer\": \"^16.7.0-alpha.2\",\n  rimraf: \"^2.6.2\",\n  rollup: \"^0.67.4\",\n  \"rollup-plugin-babel\": \"^4.0.0-beta.2\",\n  \"rollup-plugin-commonjs\": \"^9.2.0\",\n  \"rollup-plugin-filesize\": \"^5.0.1\",\n  \"rollup-plugin-json\": \"^3.0.0\",\n  \"rollup-plugin-node-globals\": \"^1.2.1\",\n  \"rollup-plugin-node-resolve\": \"^3.3.0\",\n  \"rollup-plugin-replace\": \"^2.1.0\",\n  \"rollup-plugin-terser\": \"^3.0.0\"\n};\nvar peerDependencies = {\n  \"pixi.js\": \"^4.7.1\",\n  \"prop-types\": \"^15.6.1\",\n  react: \"^16.7.0-alpha.2\",\n  \"react-dom\": \"^16.7.0-alpha.2\"\n};\nvar dependencies = {\n  fbjs: \"^1.0.0\",\n  \"performance-now\": \"^2.1.0\",\n  \"react-reconciler\": \"^0.18.0-alpha.2\"\n};\nvar jest = {\n  collectCoverage: false,\n  setupFiles: [\"./test/bootstrap.js\"],\n  transform: {\n    \"^.+\\\\.jsx?$\": \"babel-jest\"\n  }\n};\nvar pkg = {\n  name: name,\n  version: version,\n  description: description,\n  main: main,\n  \"umd:main\": \"umd.js\",\n  module: module$1,\n  \"jsnext:main\": \"module.js\",\n  author: author,\n  license: license,\n  repository: repository,\n  scripts: scripts,\n  files: files,\n  typings: typings,\n  devDependencies: devDependencies,\n  peerDependencies: peerDependencies,\n  dependencies: dependencies,\n  jest: jest\n};\nvar global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {}; // shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\n\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\n\nif (typeof global$1.setTimeout === 'function') {\n  cachedSetTimeout = setTimeout;\n}\n\nif (typeof global$1.clearTimeout === 'function') {\n  cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  } // if setTimeout wasn't available but was latter defined\n\n\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\n\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  } // if clearTimeout wasn't available but was latter defined\n\n\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\n\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n\n  draining = false;\n\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n\n  if (queue.length) {\n    drainQueue();\n  }\n}\n\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n\n    queueIndex = -1;\n    len = queue.length;\n  }\n\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\n\nfunction nextTick(fun) {\n  var args = new Array(arguments.length - 1);\n\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n\n  queue.push(new Item(fun, args));\n\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n} // v8 likes predictible objects\n\n\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\n\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\n\nvar title = 'browser';\nvar platform = 'browser';\nvar browser = true;\nvar env = {};\nvar argv = [];\nvar version$1 = ''; // empty string to avoid regexp issues\n\nvar versions = {};\nvar release = {};\nvar config = {};\n\nfunction noop() {}\n\nvar on = noop;\nvar addListener = noop;\nvar once = noop;\nvar off = noop;\nvar removeListener = noop;\nvar removeAllListeners = noop;\nvar emit = noop;\n\nfunction binding(name) {\n  throw new Error('process.binding is not supported');\n}\n\nfunction cwd() {\n  return '/';\n}\n\nfunction chdir(dir) {\n  throw new Error('process.chdir is not supported');\n}\n\nfunction umask() {\n  return 0;\n} // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\n\n\nvar performance$1 = global$1.performance || {};\n\nvar performanceNow = performance$1.now || performance$1.mozNow || performance$1.msNow || performance$1.oNow || performance$1.webkitNow || function () {\n  return new Date().getTime();\n}; // generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\n\n\nfunction hrtime(previousTimestamp) {\n  var clocktime = performanceNow.call(performance$1) * 1e-3;\n  var seconds = Math.floor(clocktime);\n  var nanoseconds = Math.floor(clocktime % 1 * 1e9);\n\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0];\n    nanoseconds = nanoseconds - previousTimestamp[1];\n\n    if (nanoseconds < 0) {\n      seconds--;\n      nanoseconds += 1e9;\n    }\n  }\n\n  return [seconds, nanoseconds];\n}\n\nvar startTime = new Date();\n\nfunction uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nvar process = {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version$1,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\nvar performanceNow$1 = createCommonjsModule(function (module) {\n  // Generated by CoffeeScript 1.12.2\n  (function () {\n    var getNanoSeconds, hrtime$$1, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n    if (typeof performance !== \"undefined\" && performance !== null && performance.now) {\n      module.exports = function () {\n        return performance.now();\n      };\n    } else if (typeof process !== \"undefined\" && process !== null && process.hrtime) {\n      module.exports = function () {\n        return (getNanoSeconds() - nodeLoadTime) / 1e6;\n      };\n\n      hrtime$$1 = process.hrtime;\n\n      getNanoSeconds = function () {\n        var hr;\n        hr = hrtime$$1();\n        return hr[0] * 1e9 + hr[1];\n      };\n\n      moduleLoadTime = getNanoSeconds();\n      upTime = process.uptime() * 1e9;\n      nodeLoadTime = moduleLoadTime - upTime;\n    } else if (Date.now) {\n      module.exports = function () {\n        return Date.now() - loadTime;\n      };\n\n      loadTime = Date.now();\n    } else {\n      module.exports = function () {\n        return new Date().getTime() - loadTime;\n      };\n\n      loadTime = new Date().getTime();\n    }\n  }).call(commonjsGlobal);\n});\n/**\n * -------------------------------------------\n * Host Config file.\n *\n * See:\n *   https://github.com/facebook/react/tree/master/packages/react-reconciler\n *   https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\n * -------------------------------------------\n */\n\nfunction appendChild(parent, child) {\n  if (parent.addChild) {\n    parent.addChild(child);\n\n    if (typeof child.didMount === 'function') {\n      child.didMount.call(child, child, parent);\n    }\n  }\n}\n\nfunction removeChild(parent, child) {\n  if (typeof child.willUnmount === 'function') {\n    child.willUnmount.call(child, child, parent);\n  }\n\n  parent.removeChild(child);\n  child.destroy();\n}\n\nfunction insertBefore(parent, child, beforeChild) {\n  invariant_1(child !== beforeChild, 'PixiFiber cannot insert node before itself');\n  var childExists = parent.children.indexOf(child) !== -1;\n  var index = parent.getChildIndex(beforeChild);\n  childExists ? parent.setChildIndex(child, index) : parent.addChildAt(child, index);\n} // get diff between 2 objects\n// https://github.com/facebook/react/blob/97e2911/packages/react-dom/src/client/ReactDOMFiberComponent.js#L546\n\n\nfunction diffProperties(pixiElement, type, lastProps, nextProps, rootContainerElement) {\n  var updatePayload = null;\n\n  for (var propKey in lastProps) {\n    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {\n      continue;\n    }\n\n    if (propKey === CHILDREN) ;else {\n      // For all other deleted properties we add it to the queue. We use\n      // the whitelist in the commit phase instead.\n      if (!updatePayload) {\n        updatePayload = [];\n      }\n\n      updatePayload.push(propKey, null);\n    }\n  }\n\n  for (var _propKey in nextProps) {\n    var nextProp = nextProps[_propKey];\n    var lastProp = lastProps != null ? lastProps[_propKey] : undefined;\n\n    if (!nextProps.hasOwnProperty(_propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {\n      continue;\n    }\n\n    if (_propKey === CHILDREN) ;else {\n      // For any other property we always add it to the queue and then we\n      // filter it out using the whitelist during the commit.\n      if (!updatePayload) {\n        updatePayload = [];\n      }\n\n      updatePayload.push(_propKey, nextProp);\n    }\n  }\n\n  return updatePayload;\n}\n\nvar hostconfig = {\n  getRootHostContext: function getRootHostContext(rootContainerInstance) {\n    return rootContainerInstance;\n  },\n  getChildHostContext: function getChildHostContext() {\n    return {};\n  },\n  getPublicInstance: function getPublicInstance(instance) {\n    return instance;\n  },\n  prepareForCommit: function prepareForCommit() {// noop\n  },\n  resetAfterCommit: function resetAfterCommit() {// noop\n  },\n  createInstance: createElement,\n  appendInitialChild: appendChild,\n  finalizeInitialChildren: function finalizeInitialChildren(wordElement, type, props) {\n    return false;\n  },\n  prepareUpdate: function prepareUpdate(pixiElement, type, oldProps, newProps, rootContainerInstance, hostContext) {\n    return diffProperties(pixiElement, type, oldProps, newProps, rootContainerInstance);\n  },\n  shouldSetTextContent: function shouldSetTextContent(type, props) {\n    return false;\n  },\n  shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {\n    var isAlphaVisible = typeof props.alpha === 'undefined' || props.alpha > 0;\n    var isRenderable = typeof props.renderable === 'undefined' || props.renderable === true;\n    var isVisible = typeof props.visible === 'undefined' || props.visible === true;\n    return !(isAlphaVisible && isRenderable && isVisible);\n  },\n  createTextInstance: function createTextInstance(text, rootContainerInstance, internalInstanceHandler) {\n    invariant_1(false, 'PixiFiber does not support text instances. Use `<Text /> component` instead.');\n  },\n  now: performanceNow$1,\n  isPrimaryRenderer: false,\n  supportsMutation: true,\n\n  /**\n   * -------------------------------------------\n   * Mutation\n   * -------------------------------------------\n   */\n  appendChild: appendChild,\n  appendChildToContainer: appendChild,\n  removeChild: removeChild,\n  removeChildFromContainer: removeChild,\n  insertBefore: insertBefore,\n  insertInContainerBefore: insertBefore,\n  commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n    var applyProps = instance && instance.applyProps;\n\n    if (typeof applyProps !== 'function') {\n      applyProps = applyDefaultProps;\n    }\n\n    applyProps(instance, oldProps, newProps);\n  },\n  commitMount: function commitMount(instance, updatePayload, type, oldProps, newProps) {// noop\n  },\n  commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {// noop\n  },\n  resetTextContent: function resetTextContent(pixiElement) {// noop\n  }\n};\nvar PixiFiber = reactReconciler(hostconfig);\nvar VERSION = pkg.version;\nvar PACKAGE_NAME = pkg.name;\nvar roots = new Map();\n/**\n * Custom Renderer\n * Use this without React-DOM\n *\n * @param {*} element\n * @param {PIXI.Container} container (i.e. the Stage)\n * @param {Function} callback\n */\n\nfunction render(element, container) {\n  var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  invariant_1(Container.prototype.isPrototypeOf(container), 'Invalid argument `container`, expected instance of `PIXI.Container`.');\n  var root = roots.get(container);\n\n  if (!root) {\n    // get the flushed fiber container\n    root = PixiFiber.createContainer(container);\n    roots.set(container, root);\n  } // schedules a top level update\n\n\n  PixiFiber.updateContainer(element, root, undefined, callback); // inject into react devtools\n\n  injectDevtools(); // return the root instance\n\n  return PixiFiber.getPublicRootInstance(root);\n}\n/**\n * Inject into React Devtools\n */\n\n\nfunction injectDevtools() {\n  PixiFiber.injectIntoDevTools({\n    bundleType: 1,\n    version: VERSION,\n    rendererPackageName: PACKAGE_NAME,\n    findHostInstanceByFiber: PixiFiber.findHostInstance\n  });\n}\n\nvar printWarning$1 = function () {};\n\n{\n  printWarning$1 = function (text) {\n    var message = 'Warning: ' + text;\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nvar factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n\n  var ANONYMOUS = '<<anonymous>>'; // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker\n  };\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n\n  /*eslint-disable no-self-compare*/\n\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n\n\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  } // Make `instanceof Error` still work for returned errors.\n\n\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret_1) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n\n          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors\n          manualPropTypeWarningCount < 3) {\n            printWarning$1('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n\n      var propValue = props[propName];\n\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);\n\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      printWarning$1('Invalid argument supplied to oneOf, expected an instance of array.');\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.');\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n\n      if (typeof checker !== 'function') {\n        printWarning$1('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n\n        if (!checker) {\n          continue;\n        }\n\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n\n        if (error) {\n          return error;\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      } // We need to check all keys in case some are required but missing from\n      // props.\n\n\n      var allKeys = objectAssign({}, props[propName], shapeTypes);\n\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n\n        if (!checker) {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));\n        }\n\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n\n        if (error) {\n          return error;\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n\n      case 'boolean':\n        return !propValue;\n\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n\n\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    } // Fallback for non-spec compliant Symbols which are polyfilled.\n\n\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  } // Equivalent of `typeof` but with special handling for array and regexp.\n\n\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n\n    return propType;\n  } // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n\n\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n\n    var propType = getPropType(propValue);\n\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n\n    return propType;\n  } // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n\n\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n\n      default:\n        return type;\n    }\n  } // Returns class name of the object, if any.\n\n\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes_1;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n  return ReactPropTypes;\n};\n\nvar propTypes = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  {\n    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\n\n    var isValidElement = function (object) {\n      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n    }; // By explicitly using `prop-types` you are opting into new development behavior.\n    // http://fb.me/prop-types-in-prod\n\n\n    var throwOnDirectAccess = true;\n    module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);\n  }\n});\nvar Context = React.createContext(null);\nvar AppProvider = Context.Provider;\nvar AppConsumer = Context.Consumer;\n\nvar withPixiApp = function withPixiApp(BaseComponent) {\n  var wrapper = React.forwardRef(function (props, ref) {\n    return React.createElement(AppConsumer, null, function (app) {\n      return React.createElement(BaseComponent, _extends({}, props, {\n        ref: ref,\n        app: app\n      }));\n    });\n  });\n  wrapper.displayName = \"withPIXIApp(\".concat(BaseComponent.displayName || BaseComponent.name, \")\");\n  return wrapper;\n};\n\nvar noop$1 = function noop() {};\n/**\n * -------------------------------------------\n * Stage React Component (use this in react-dom)\n *\n * @usage\n *\n *    const App = () => (\n *      <Stage width={500}\n *             height={500}\n *             options={ backgroundColor: 0xff0000 }\n *             onMount={( renderer, canvas ) => {\n *               console.log('PIXI renderer: ', renderer)\n *               console.log('Canvas element: ', canvas)\n *             }}>\n *    )\n *\n * -------------------------------------------\n */\n\n\nvar propTypes$1 = {\n  // dimensions\n  width: propTypes.number,\n  height: propTypes.number,\n  // will return renderer\n  onMount: propTypes.func,\n  onUnmount: propTypes.func,\n  // run ticker at start?\n  raf: propTypes.bool,\n  // render component on component lifecycle changes?\n  renderOnComponentChange: propTypes.bool,\n  children: propTypes.node,\n  // PIXI options, see http://pixijs.download/dev/docs/PIXI.Application.html\n  options: propTypes.shape({\n    antialias: propTypes.bool,\n    autoStart: propTypes.bool,\n    width: propTypes.number,\n    height: propTypes.number,\n    transparent: propTypes.bool,\n    preserveDrawingBuffer: propTypes.bool,\n    resolution: propTypes.number,\n    forceCanvas: propTypes.bool,\n    backgroundColor: propTypes.number,\n    clearBeforeRender: propTypes.bool,\n    roundPixels: propTypes.bool,\n    forceFXAA: propTypes.bool,\n    legacy: propTypes.bool,\n    powerPreference: propTypes.string,\n    sharedTicker: propTypes.bool,\n    sharedLoader: propTypes.bool,\n    // view is optional, use if provided\n    view: function view(props, propName, componentName) {\n      var el = props[propName];\n\n      if (el === undefined) {\n        return;\n      }\n\n      invariant_1(el instanceof HTMLCanvasElement, \"Invalid prop `view` of type \".concat(_typeof(el), \", supplied to \").concat(componentName, \", expected `<canvas> Element`\"));\n    }\n  })\n};\nvar defaultProps = {\n  width: 800,\n  height: 600,\n  onMount: noop$1,\n  onUnmount: noop$1,\n  raf: true,\n  renderOnComponentChange: true\n};\n\nfunction getCanvasProps(props) {\n  var reserved = _toConsumableArray(Object.keys(propTypes$1)).concat(_toConsumableArray(Object.keys(PROPS_DISPLAY_OBJECT)));\n\n  return Object.keys(props).filter(function (p) {\n    return !reserved.includes(p);\n  }).reduce(function (all, prop) {\n    return _objectSpread({}, all, _defineProperty({}, prop, props[prop]));\n  }, {});\n}\n\nvar Stage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Stage, _React$Component);\n\n  function Stage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Stage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Stage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_canvas\", null);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"app\", null);\n\n    return _this;\n  }\n\n  _createClass(Stage, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      invariant_1(runningInBrowser(), \"Cannot mount Stage, window object is not defined\");\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          onMount = _this$props.onMount,\n          width = _this$props.width,\n          height = _this$props.height,\n          options = _this$props.options,\n          raf = _this$props.raf;\n      this.app = new Application(width, height, _objectSpread({}, options, {\n        view: this._canvas\n      }));\n      this.app.ticker.autoStart = false;\n      this.app.ticker[raf ? 'start' : 'stop']();\n      this.mountNode = PixiFiber.createContainer(this.app.stage);\n      PixiFiber.updateContainer(this.getChildren(), this.mountNode, this);\n      injectDevtools();\n      onMount(this.app);\n      this.renderStage();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, prevContext) {\n      var _this$props2 = this.props,\n          width = _this$props2.width,\n          height = _this$props2.height,\n          raf = _this$props2.raf; // handle resize\n\n      if (prevProps.height !== height || prevProps.width !== width) {\n        this.app.renderer.resize(width, height);\n      } // handle raf change\n\n\n      if (prevProps.raf !== raf) {\n        this.app.ticker[raf ? 'start' : 'stop']();\n      } // handle resolution ?\n      // flush fiber\n\n\n      PixiFiber.updateContainer(this.getChildren(), this.mountNode, this);\n      this.renderStage();\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      var children = this.props.children;\n      return React.createElement(AppProvider, {\n        value: this.app\n      }, children);\n    }\n  }, {\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(error, errorInfo) {\n      console.error(\"Error occurred in `Stage`.\");\n      console.error(error);\n      console.error(errorInfo);\n    }\n  }, {\n    key: \"renderStage\",\n    value: function renderStage() {\n      var _this$props3 = this.props,\n          renderOnComponentChange = _this$props3.renderOnComponentChange,\n          raf = _this$props3.raf;\n\n      if (!raf && renderOnComponentChange) {\n        this.app.renderer.render(this.app.stage);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onUnmount(this.app);\n      PixiFiber.updateContainer(null, this.mountNode, this);\n      this.renderStage();\n      this.app.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render$$1() {\n      var _this2 = this;\n\n      var options = this.props.options;\n\n      if (options && options.view) {\n        invariant_1(options.view instanceof HTMLCanvasElement, 'options.view needs to be a `HTMLCanvasElement`');\n        return null;\n      }\n\n      return React.createElement(\"canvas\", _extends({}, getCanvasProps(this.props), {\n        ref: function ref(c) {\n          return _this2._canvas = c;\n        }\n      }));\n    }\n  }]);\n\n  return Stage;\n}(React.Component);\n\nStage.propTypes = propTypes$1;\nStage.defaultProps = defaultProps;\n\nfunction useTick(fn) {\n  var app = useContext(Context);\n  invariant_1(app instanceof Application, 'No Context found with `%s`. Make sure to wrap component with `%s`', 'PIXI.Application', 'AppProvider');\n  useEffect(function () {\n    app.ticker.add(fn);\n    return function () {\n      return app.ticker.remove(fn);\n    };\n  }, []);\n}\n\nfunction useApp() {\n  return useContext(Context);\n}\n\nvar BitmapText$1 = TYPES.BitmapText;\nvar Container$2 = TYPES.Container;\nvar Graphics$2 = TYPES.Graphics;\nvar NineSlicePlane$1 = TYPES.NineSlicePlane;\nvar ParticleContainer$1 = TYPES.ParticleContainer;\nvar Sprite$2 = TYPES.Sprite;\nvar Text$2 = TYPES.Text;\nvar TilingSprite$1 = TYPES.TilingSprite;\nvar Mesh$1 = TYPES.Mesh;\nvar Rope$1 = TYPES.Rope;\nexport { render, Stage, withPixiApp, PixiComponent, PixiFiber, AppProvider, AppConsumer, Context as AppContext, useTick, useApp, BitmapText$1 as BitmapText, Container$2 as Container, Graphics$2 as Graphics, NineSlicePlane$1 as NineSlicePlane, ParticleContainer$1 as ParticleContainer, Sprite$2 as Sprite, Text$2 as Text, TilingSprite$1 as TilingSprite, Mesh$1 as Mesh, Rope$1 as Rope };","map":null,"metadata":{},"sourceType":"module"}