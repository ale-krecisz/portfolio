{"ast":null,"code":"var _jsxFileName = \"/Users/michalkrecisz/Documents/projects/portfolio/src/components/Bunny.js\";\nimport React, { useRef } from 'react';\nimport * as PIXI from \"pixi.js\";\nimport Bg from '../assets/grunge.jpg';\nimport LoaderPic from '../assets/dis-varOne.png';\n\nconst Bunny = () => {\n  const myCanvas = useRef(null); // VARS STORAGE //\n\n  var rt = [],\n      rts = [],\n      bgs = [],\n      containers = [],\n      channelsContainer = [],\n      displacementFilters = [],\n      brushes = []; // CHANNEL FILTERS //\n\n  var redChannelFilter = new PIXI.filters.ColorMatrixFilter();\n  redChannelFilter.matrix = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0];\n  var greenChannelFilter = new PIXI.filters.ColorMatrixFilter();\n  greenChannelFilter.matrix = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0];\n  var blueChannelFilter = new PIXI.filters.ColorMatrixFilter();\n  blueChannelFilter.matrix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];\n  channelsContainer.push(redChannelFilter, greenChannelFilter, blueChannelFilter);\n  const picture = new PIXI.Application(500, 480, {\n    autoStart: false,\n    view: myCanvas\n  });\n  const bg = PIXI.Sprite.from(Bg); // const one = PIXI.Sprite.from(LoaderPic);\n\n  bg.anchor.set(0.5); // one.anchor.set(0.5);\n\n  bg.x = picture.screen.width / 2;\n  bg.y = picture.screen.height / 2;\n  picture.stage.addChild(bg);\n  picture.ticker.add(() => {\n    bg.rotation += 0.1;\n  }); // // CAPTURING CASHE //\n  // for (var i=0;i<3;i++) {\n  //     rt.push(PIXI.RenderTexture.create(app.screen.width, app.screen.height));\n  //     rts.push(rt);\n  // }\n  // var current = 0;\n  // // CONTAINERS //\n  // var containerRed = new PIXI.Container();\n  //     containerRed.position.x = 0;\n  // var containerGreen = new PIXI.Container();\n  //     containerGreen.position.x = 0;\n  // var containerBlue = new PIXI.Container();\n  //     containerBlue.position.x = 0;\n  // containers.push(containerRed, containerGreen, containerBlue);\n  // // LOADER //\n  // app.loader.load(function(loader, resources) {\n  // var tempBg = new PIXI.Sprite(resources.bg);\n  //     tempBg.width = app.screen.width;\n  //     tempBg.height = app.screen.height;\n  // app.renderer.render(tempBg, rt[0]);\n  // for (var i=0, len=containers.length; i<len; i++) {\n  //     app.stage.addChild(containers[i]);\n  //     brushes.push(new PIXI.Sprite(resources.one));\n  //     displacementFilters.push(new PIXI.filters.DisplacementFilter(brushes[i]));\n  //     bg = new PIXI.Sprite(rts[0][0]);\n  //     bgs.push(bg);\n  //     containers[i].filters = [channelsContainer[i],displacementFilters[i]];\n  //     containers[i].addChild(bgs[i],brushes[i]); \n  // }\n  // brushes[0].anchor.set(0.5); brushes[1].anchor.set(0.6); brushes[2].anchor.set(0.4); \n  // containers[1].filters[1].blendMode = PIXI.BLEND_MODES.ADD;\n  // containers[2].filters[1].blendMode = PIXI.BLEND_MODES.ADD;\n  // app.stage.interactive = true;\n  // app.stage.on('pointermove', onPointerMove);\n  // app.start();\n  // });\n  // function onPointerMove(event) {\n  // const x = event.data.global.x;\n  // const y = event.data.global.y;\n  //     for (var i=0, len=containers.length; i<len; i++) {\n  //         displacementFilters[i].scale.x = Math.atan(x - brushes[i].x)*50; \n  //         displacementFilters[i].scale.y = Math.atan(y - brushes[i].y)*50;\n  //         // brushes[i].position.copy(event.data.global);\n  //     }\n  // }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    id: \"myCanvas\",\n    width: \"500\",\n    height: \"500\",\n    ref: myCanvas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    src: Bg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }));\n};\n\nexport default Bunny;","map":{"version":3,"sources":["/Users/michalkrecisz/Documents/projects/portfolio/src/components/Bunny.js"],"names":["React","useRef","PIXI","Bg","LoaderPic","Bunny","myCanvas","rt","rts","bgs","containers","channelsContainer","displacementFilters","brushes","redChannelFilter","filters","ColorMatrixFilter","matrix","greenChannelFilter","blueChannelFilter","push","picture","Application","autoStart","view","bg","Sprite","from","anchor","set","x","screen","width","y","height","stage","addChild","ticker","add","rotation"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,OAAOC,EAAP,MAAe,sBAAf;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAEhB,QAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAD,CAAvB,CAFgB,CAIhB;;AACA,MAAIM,EAAE,GAAG,EAAT;AAAA,MAAaC,GAAG,GAAG,EAAnB;AAAA,MAAuBC,GAAG,GAAG,EAA7B;AAAA,MAAiCC,UAAU,GAAG,EAA9C;AAAA,MAAkDC,iBAAiB,GAAG,EAAtE;AAAA,MAA0EC,mBAAmB,GAAG,EAAhG;AAAA,MAAoGC,OAAO,GAAG,EAA9G,CALgB,CAOhB;;AACA,MAAIC,gBAAgB,GAAG,IAAIZ,IAAI,CAACa,OAAL,CAAaC,iBAAjB,EAAvB;AACAF,EAAAA,gBAAgB,CAACG,MAAjB,GAA0B,CAC1B,CAD0B,EACvB,CADuB,EACpB,CADoB,EACjB,CADiB,EACd,CADc,EAE1B,CAF0B,EAEvB,CAFuB,EAEpB,CAFoB,EAEjB,CAFiB,EAEd,CAFc,EAG1B,CAH0B,EAGvB,CAHuB,EAGpB,CAHoB,EAGjB,CAHiB,EAGd,CAHc,EAI1B,CAJ0B,EAIvB,CAJuB,EAIpB,CAJoB,EAIjB,CAJiB,EAId,CAJc,CAA1B;AAOA,MAAIC,kBAAkB,GAAG,IAAIhB,IAAI,CAACa,OAAL,CAAaC,iBAAjB,EAAzB;AACAE,EAAAA,kBAAkB,CAACD,MAAnB,GAA4B,CAC5B,CAD4B,EACzB,CADyB,EACtB,CADsB,EACnB,CADmB,EAChB,CADgB,EAE5B,CAF4B,EAEzB,CAFyB,EAEtB,CAFsB,EAEnB,CAFmB,EAEhB,CAFgB,EAG5B,CAH4B,EAGzB,CAHyB,EAGtB,CAHsB,EAGnB,CAHmB,EAGhB,CAHgB,EAI5B,CAJ4B,EAIzB,CAJyB,EAItB,CAJsB,EAInB,CAJmB,EAIhB,CAJgB,CAA5B;AAOA,MAAIE,iBAAiB,GAAG,IAAIjB,IAAI,CAACa,OAAL,CAAaC,iBAAjB,EAAxB;AACAG,EAAAA,iBAAiB,CAACF,MAAlB,GAA2B,CAC3B,CAD2B,EACxB,CADwB,EACrB,CADqB,EAClB,CADkB,EACf,CADe,EAE3B,CAF2B,EAExB,CAFwB,EAErB,CAFqB,EAElB,CAFkB,EAEf,CAFe,EAG3B,CAH2B,EAGxB,CAHwB,EAGrB,CAHqB,EAGlB,CAHkB,EAGf,CAHe,EAI3B,CAJ2B,EAIxB,CAJwB,EAIrB,CAJqB,EAIlB,CAJkB,EAIf,CAJe,CAA3B;AAOAN,EAAAA,iBAAiB,CAACS,IAAlB,CAAuBN,gBAAvB,EAAwCI,kBAAxC,EAA2DC,iBAA3D;AAEA,QAAME,OAAO,GAAG,IAAInB,IAAI,CAACoB,WAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B;AAC3CC,IAAAA,SAAS,EAAE,KADgC;AAE3CC,IAAAA,IAAI,EAAElB;AAFqC,GAA/B,CAAhB;AAMA,QAAMmB,EAAE,GAAGvB,IAAI,CAACwB,MAAL,CAAYC,IAAZ,CAAiBxB,EAAjB,CAAX,CAxCgB,CAyChB;;AAEAsB,EAAAA,EAAE,CAACG,MAAH,CAAUC,GAAV,CAAc,GAAd,EA3CgB,CA4ChB;;AAEAJ,EAAAA,EAAE,CAACK,CAAH,GAAOT,OAAO,CAACU,MAAR,CAAeC,KAAf,GAAuB,CAA9B;AACAP,EAAAA,EAAE,CAACQ,CAAH,GAAOZ,OAAO,CAACU,MAAR,CAAeG,MAAf,GAAwB,CAA/B;AAEAb,EAAAA,OAAO,CAACc,KAAR,CAAcC,QAAd,CAAuBX,EAAvB;AAEAJ,EAAAA,OAAO,CAACgB,MAAR,CAAeC,GAAf,CAAmB,MAAM;AACrBb,IAAAA,EAAE,CAACc,QAAH,IAAe,GAAf;AACH,GAFD,EAnDgB,CAwDhB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,EAAE,EAAC,UAAX;AAAsB,IAAA,KAAK,EAAC,KAA5B;AAAkC,IAAA,MAAM,EAAC,KAAzC;AAA+C,IAAA,GAAG,EAAEjC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,GAAG,EAAEH,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAvHD;;AAyHA,eAAeE,KAAf","sourcesContent":["import React, {useRef} from 'react'\nimport * as PIXI from \"pixi.js\";\nimport Bg from '../assets/grunge.jpg'\nimport LoaderPic from '../assets/dis-varOne.png'\n\n\nconst Bunny = () => {\n\n    const myCanvas = useRef(null);\n\n    // VARS STORAGE //\n    var rt = [], rts = [], bgs = [], containers = [], channelsContainer = [], displacementFilters = [], brushes = [];\n\n    // CHANNEL FILTERS //\n    var redChannelFilter = new PIXI.filters.ColorMatrixFilter();\n    redChannelFilter.matrix = [\n    1, 0, 0, 0, 0, \n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, \n    0, 0, 0, 1, 0\n    ];\n\n    var greenChannelFilter = new PIXI.filters.ColorMatrixFilter();\n    greenChannelFilter.matrix = [\n    0, 0, 0, 0, 0, \n    0, 1, 0, 0, 0, \n    0, 0, 0, 0, 0, \n    0, 0, 0, 1, 0\n    ];\n\n    var blueChannelFilter = new PIXI.filters.ColorMatrixFilter();\n    blueChannelFilter.matrix = [\n    0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, \n    0, 0, 1, 0, 0, \n    0, 0, 0, 1, 0\n    ];\n\n    channelsContainer.push(redChannelFilter,greenChannelFilter,blueChannelFilter);\n\n    const picture = new PIXI.Application(500, 480, {\n        autoStart: false, \n        view: myCanvas\n    });\n\n\n    const bg = PIXI.Sprite.from(Bg);\n    // const one = PIXI.Sprite.from(LoaderPic);\n\n    bg.anchor.set(0.5);\n    // one.anchor.set(0.5);\n\n    bg.x = picture.screen.width / 2;\n    bg.y = picture.screen.height / 2;\n\n    picture.stage.addChild(bg);\n\n    picture.ticker.add(() => {\n        bg.rotation += 0.1;\n    });\n\n\n    // // CAPTURING CASHE //\n    // for (var i=0;i<3;i++) {\n    //     rt.push(PIXI.RenderTexture.create(app.screen.width, app.screen.height));\n    //     rts.push(rt);\n    // }\n    // var current = 0;\n\n    // // CONTAINERS //\n    // var containerRed = new PIXI.Container();\n    //     containerRed.position.x = 0;\n    // var containerGreen = new PIXI.Container();\n    //     containerGreen.position.x = 0;\n    // var containerBlue = new PIXI.Container();\n    //     containerBlue.position.x = 0;\n    // containers.push(containerRed, containerGreen, containerBlue);\n\n    // // LOADER //\n    // app.loader.load(function(loader, resources) {\n    // var tempBg = new PIXI.Sprite(resources.bg);\n    //     tempBg.width = app.screen.width;\n    //     tempBg.height = app.screen.height;\n\n    // app.renderer.render(tempBg, rt[0]);\n    \n    // for (var i=0, len=containers.length; i<len; i++) {\n    //     app.stage.addChild(containers[i]);\n    //     brushes.push(new PIXI.Sprite(resources.one));\n    //     displacementFilters.push(new PIXI.filters.DisplacementFilter(brushes[i]));\n        \n    //     bg = new PIXI.Sprite(rts[0][0]);\n    //     bgs.push(bg);\n    //     containers[i].filters = [channelsContainer[i],displacementFilters[i]];\n    //     containers[i].addChild(bgs[i],brushes[i]); \n    // }\n    \n    // brushes[0].anchor.set(0.5); brushes[1].anchor.set(0.6); brushes[2].anchor.set(0.4); \n    // containers[1].filters[1].blendMode = PIXI.BLEND_MODES.ADD;\n    // containers[2].filters[1].blendMode = PIXI.BLEND_MODES.ADD;\n\n    // app.stage.interactive = true;\n    // app.stage.on('pointermove', onPointerMove);\n    // app.start();\n    // });\n\n    \n    // function onPointerMove(event) {\n    // const x = event.data.global.x;\n    // const y = event.data.global.y;\n    \n    //     for (var i=0, len=containers.length; i<len; i++) {\n    //         displacementFilters[i].scale.x = Math.atan(x - brushes[i].x)*50; \n    //         displacementFilters[i].scale.y = Math.atan(y - brushes[i].y)*50;\n\n    //         // brushes[i].position.copy(event.data.global);\n    //     }\n    // }\n\n    return (\n        <div>\n            <canvas id='myCanvas' width='500' height='500' ref={myCanvas}/>\n            <img src={Bg}/>\n        </div>\n    )\n};\n\nexport default Bunny;"]},"metadata":{},"sourceType":"module"}