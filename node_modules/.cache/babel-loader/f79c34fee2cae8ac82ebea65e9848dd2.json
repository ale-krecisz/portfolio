{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _core = require('../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _utils = require('../core/utils');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles. The tradeoff of the ParticleContainer is that most advanced\n * functionality will not work. ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use :\n *\n * ```js\n * let container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = new PIXI.Sprite.fromImage(\"myImage.png\");\n *     container.addChild(sprite);\n * }\n * ```\n *\n * And here you have a hundred sprites that will be rendered at the speed of light.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI.particles\n */\n\n\nvar ParticleContainer = function (_core$Container) {\n  _inherits(ParticleContainer, _core$Container);\n  /**\n   * @param {number} [maxSize=1500] - The maximum number of particles that can be rendered by the container.\n   *  Affects size of allocated buffers.\n   * @param {object} [properties] - The properties of children that should be uploaded to the gpu and applied.\n   * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n   *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n   * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n   * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n   * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n   * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n   * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n   * @param {boolean} [autoResize=false] If true, container allocates more batches in case\n   *  there are more than `maxSize` particles.\n   */\n\n\n  function ParticleContainer() {\n    var maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1500;\n    var properties = arguments[1];\n    var batchSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16384;\n    var autoResize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    _classCallCheck(this, ParticleContainer); // Making sure the batch size is valid\n    // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n    // so max number of particles is 65536 / 4 = 16384\n\n\n    var _this = _possibleConstructorReturn(this, _core$Container.call(this));\n\n    var maxBatchSize = 16384;\n\n    if (batchSize > maxBatchSize) {\n      batchSize = maxBatchSize;\n    }\n\n    if (batchSize > maxSize) {\n      batchSize = maxSize;\n    }\n    /**\n     * Set properties to be dynamic (true) / static (false)\n     *\n     * @member {boolean[]}\n     * @private\n     */\n\n\n    _this._properties = [false, true, false, false, false];\n    /**\n     * @member {number}\n     * @private\n     */\n\n    _this._maxSize = maxSize;\n    /**\n     * @member {number}\n     * @private\n     */\n\n    _this._batchSize = batchSize;\n    /**\n     * @member {object<number, WebGLBuffer>}\n     * @private\n     */\n\n    _this._glBuffers = {};\n    /**\n     * for every batch stores _updateID corresponding to the last change in that batch\n     * @member {number[]}\n     * @private\n     */\n\n    _this._bufferUpdateIDs = [];\n    /**\n     * when child inserted, removed or changes position this number goes up\n     * @member {number[]}\n     * @private\n     */\n\n    _this._updateID = 0;\n    /**\n     * @member {boolean}\n     *\n     */\n\n    _this.interactiveChildren = false;\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n     * to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n\n    _this.blendMode = core.BLEND_MODES.NORMAL;\n    /**\n     * If true, container allocates more batches in case there are more than `maxSize` particles.\n     * @member {boolean}\n     * @default false\n     */\n\n    _this.autoResize = autoResize;\n    /**\n     * Used for canvas renderering. If true then the elements will be positioned at the\n     * nearest pixel. This provides a nice speed boost.\n     *\n     * @member {boolean}\n     * @default true;\n     */\n\n    _this.roundPixels = true;\n    /**\n     * The texture used to render the children.\n     *\n     * @readonly\n     * @member {BaseTexture}\n     */\n\n    _this.baseTexture = null;\n\n    _this.setProperties(properties);\n    /**\n     * The tint applied to the container.\n     * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @private\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n\n\n    _this._tint = 0;\n    _this.tintRgb = new Float32Array(4);\n    _this.tint = 0xFFFFFF;\n    return _this;\n  }\n  /**\n   * Sets the private properties array to dynamic / static based on the passed properties object\n   *\n   * @param {object} properties - The properties to be uploaded\n   */\n\n\n  ParticleContainer.prototype.setProperties = function setProperties(properties) {\n    if (properties) {\n      this._properties[0] = 'vertices' in properties || 'scale' in properties ? !!properties.vertices || !!properties.scale : this._properties[0];\n      this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n      this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n      this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n      this._properties[4] = 'tint' in properties || 'alpha' in properties ? !!properties.tint || !!properties.alpha : this._properties[4];\n    }\n  };\n  /**\n   * Updates the object transform for rendering\n   *\n   * @private\n   */\n\n\n  ParticleContainer.prototype.updateTransform = function updateTransform() {\n    // TODO don't need to!\n    this.displayObjectUpdateTransform(); //  PIXI.Container.prototype.updateTransform.call( this );\n  };\n  /**\n   * The tint applied to the container. This is a hex value.\n   * A value of 0xFFFFFF will remove any tint effect.\n   ** IMPORTANT: This is a webGL only feature and will be ignored by the canvas renderer.\n   * @member {number}\n   * @default 0xFFFFFF\n   */\n\n  /**\n   * Renders the container using the WebGL renderer\n   *\n   * @private\n   * @param {PIXI.WebGLRenderer} renderer - The webgl renderer\n   */\n\n\n  ParticleContainer.prototype.renderWebGL = function renderWebGL(renderer) {\n    var _this2 = this;\n\n    if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n      return;\n    }\n\n    if (!this.baseTexture) {\n      this.baseTexture = this.children[0]._texture.baseTexture;\n\n      if (!this.baseTexture.hasLoaded) {\n        this.baseTexture.once('update', function () {\n          return _this2.onChildrenChange(0);\n        });\n      }\n    }\n\n    renderer.setObjectRenderer(renderer.plugins.particle);\n    renderer.plugins.particle.render(this);\n  };\n  /**\n   * Set the flag that static data should be updated to true\n   *\n   * @private\n   * @param {number} smallestChildIndex - The smallest child index\n   */\n\n\n  ParticleContainer.prototype.onChildrenChange = function onChildrenChange(smallestChildIndex) {\n    var bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n    while (this._bufferUpdateIDs.length < bufferIndex) {\n      this._bufferUpdateIDs.push(0);\n    }\n\n    this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n  };\n  /**\n   * Renders the object using the Canvas renderer\n   *\n   * @private\n   * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n   */\n\n\n  ParticleContainer.prototype.renderCanvas = function renderCanvas(renderer) {\n    if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n      return;\n    }\n\n    var context = renderer.context;\n    var transform = this.worldTransform;\n    var isRotated = true;\n    var positionX = 0;\n    var positionY = 0;\n    var finalWidth = 0;\n    var finalHeight = 0;\n    renderer.setBlendMode(this.blendMode);\n    context.globalAlpha = this.worldAlpha;\n    this.displayObjectUpdateTransform();\n\n    for (var i = 0; i < this.children.length; ++i) {\n      var child = this.children[i];\n\n      if (!child.visible) {\n        continue;\n      }\n\n      var frame = child._texture.frame;\n      context.globalAlpha = this.worldAlpha * child.alpha;\n\n      if (child.rotation % (Math.PI * 2) === 0) {\n        // this is the fastest  way to optimise! - if rotation is 0 then we can avoid any kind of setTransform call\n        if (isRotated) {\n          context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx * renderer.resolution, transform.ty * renderer.resolution);\n          isRotated = false;\n        }\n\n        positionX = child.anchor.x * (-frame.width * child.scale.x) + child.position.x + 0.5;\n        positionY = child.anchor.y * (-frame.height * child.scale.y) + child.position.y + 0.5;\n        finalWidth = frame.width * child.scale.x;\n        finalHeight = frame.height * child.scale.y;\n      } else {\n        if (!isRotated) {\n          isRotated = true;\n        }\n\n        child.displayObjectUpdateTransform();\n        var childTransform = child.worldTransform;\n\n        if (renderer.roundPixels) {\n          context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx * renderer.resolution | 0, childTransform.ty * renderer.resolution | 0);\n        } else {\n          context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx * renderer.resolution, childTransform.ty * renderer.resolution);\n        }\n\n        positionX = child.anchor.x * -frame.width + 0.5;\n        positionY = child.anchor.y * -frame.height + 0.5;\n        finalWidth = frame.width;\n        finalHeight = frame.height;\n      }\n\n      var resolution = child._texture.baseTexture.resolution;\n      context.drawImage(child._texture.baseTexture.source, frame.x * resolution, frame.y * resolution, frame.width * resolution, frame.height * resolution, positionX * renderer.resolution, positionY * renderer.resolution, finalWidth * renderer.resolution, finalHeight * renderer.resolution);\n    }\n  };\n  /**\n   * Destroys the container\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their\n   *  destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n\n\n  ParticleContainer.prototype.destroy = function destroy(options) {\n    _core$Container.prototype.destroy.call(this, options);\n\n    if (this._buffers) {\n      for (var i = 0; i < this._buffers.length; ++i) {\n        this._buffers[i].destroy();\n      }\n    }\n\n    this._properties = null;\n    this._buffers = null;\n    this._bufferUpdateIDs = null;\n  };\n\n  _createClass(ParticleContainer, [{\n    key: 'tint',\n    get: function get() {\n      return this._tint;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this._tint = value;\n      (0, _utils.hex2rgb)(value, this.tintRgb);\n    }\n  }]);\n\n  return ParticleContainer;\n}(core.Container);\n\nexports.default = ParticleContainer;","map":null,"metadata":{},"sourceType":"script"}