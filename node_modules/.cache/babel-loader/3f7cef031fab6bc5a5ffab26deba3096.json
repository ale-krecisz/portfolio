{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _core = require('../../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _BasePrepare2 = require('../BasePrepare');\n\nvar _BasePrepare3 = _interopRequireDefault(_BasePrepare2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CANVAS_START_SIZE = 16;\n/**\n * The prepare manager provides functionality to upload content to the GPU\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas.\n * This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\n\nvar CanvasPrepare = function (_BasePrepare) {\n  _inherits(CanvasPrepare, _BasePrepare);\n  /**\n   * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n   */\n\n\n  function CanvasPrepare(renderer) {\n    _classCallCheck(this, CanvasPrepare);\n\n    var _this = _possibleConstructorReturn(this, _BasePrepare.call(this, renderer));\n\n    _this.uploadHookHelper = _this;\n    /**\n    * An offline canvas to render textures to\n    * @type {HTMLCanvasElement}\n    * @private\n    */\n\n    _this.canvas = document.createElement('canvas');\n    _this.canvas.width = CANVAS_START_SIZE;\n    _this.canvas.height = CANVAS_START_SIZE;\n    /**\n     * The context to the canvas\n    * @type {CanvasRenderingContext2D}\n    * @private\n    */\n\n    _this.ctx = _this.canvas.getContext('2d'); // Add textures to upload\n\n    _this.registerUploadHook(uploadBaseTextures);\n\n    return _this;\n  }\n  /**\n   * Destroys the plugin, don't use after this.\n   *\n   */\n\n\n  CanvasPrepare.prototype.destroy = function destroy() {\n    _BasePrepare.prototype.destroy.call(this);\n\n    this.ctx = null;\n    this.canvas = null;\n  };\n\n  return CanvasPrepare;\n}(_BasePrepare3.default);\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\n\n\nexports.default = CanvasPrepare;\n\nfunction uploadBaseTextures(prepare, item) {\n  if (item instanceof core.BaseTexture) {\n    var image = item.source; // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n    // So if the width or height is equal to zero then use the canvas size\n    // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n\n    var imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n    var imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height); // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n    // A smaller draw can be faster.\n\n    prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n    return true;\n  }\n\n  return false;\n}\n\ncore.CanvasRenderer.registerPlugin('prepare', CanvasPrepare);","map":null,"metadata":{},"sourceType":"script"}