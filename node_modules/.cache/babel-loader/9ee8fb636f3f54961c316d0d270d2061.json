{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Sprite2 = require('../sprites/Sprite');\n\nvar _Sprite3 = _interopRequireDefault(_Sprite2);\n\nvar _Texture = require('../textures/Texture');\n\nvar _Texture2 = _interopRequireDefault(_Texture);\n\nvar _math = require('../math');\n\nvar _utils = require('../utils');\n\nvar _const = require('../const');\n\nvar _settings = require('../settings');\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nvar _TextStyle = require('./TextStyle');\n\nvar _TextStyle2 = _interopRequireDefault(_TextStyle);\n\nvar _TextMetrics = require('./TextMetrics');\n\nvar _TextMetrics2 = _interopRequireDefault(_TextMetrics);\n\nvar _trimCanvas = require('../utils/trimCanvas');\n\nvar _trimCanvas2 = _interopRequireDefault(_trimCanvas);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint max-depth: [2, 8] */\n\n\nvar defaultDestroyOptions = {\n  texture: true,\n  children: false,\n  baseTexture: true\n};\n/**\n * A Text Object will create a line or multiple lines of text. To split a line you can use '\\n' in your text string,\n * or add a wordWrap property set to true and and wordWrapWidth property with a value in the style object.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\n\nvar Text = function (_Sprite) {\n  _inherits(Text, _Sprite);\n  /**\n   * @param {string} text - The string that you would like the text to display\n   * @param {object|PIXI.TextStyle} [style] - The style parameters\n   * @param {HTMLCanvasElement} [canvas] - The canvas element for drawing text\n   */\n\n\n  function Text(text, style, canvas) {\n    _classCallCheck(this, Text);\n\n    canvas = canvas || document.createElement('canvas');\n    canvas.width = 3;\n    canvas.height = 3;\n\n    var texture = _Texture2.default.fromCanvas(canvas, _settings2.default.SCALE_MODE, 'text');\n\n    texture.orig = new _math.Rectangle();\n    texture.trim = new _math.Rectangle(); // base texture is already automatically added to the cache, now adding the actual texture\n\n    var _this = _possibleConstructorReturn(this, _Sprite.call(this, texture));\n\n    _Texture2.default.addToCache(_this._texture, _this._texture.baseTexture.textureCacheIds[0]);\n    /**\n     * The canvas element that everything is drawn to\n     *\n     * @member {HTMLCanvasElement}\n     */\n\n\n    _this.canvas = canvas;\n    /**\n     * The canvas 2d context that everything is drawn with\n     * @member {CanvasRenderingContext2D}\n     */\n\n    _this.context = _this.canvas.getContext('2d');\n    /**\n     * The resolution / device pixel ratio of the canvas. This is set automatically by the renderer.\n     * @member {number}\n     * @default 1\n     */\n\n    _this.resolution = _settings2.default.RESOLUTION;\n    /**\n     * Private tracker for the current text.\n     *\n     * @member {string}\n     * @private\n     */\n\n    _this._text = null;\n    /**\n     * Private tracker for the current style.\n     *\n     * @member {object}\n     * @private\n     */\n\n    _this._style = null;\n    /**\n     * Private listener to track style changes.\n     *\n     * @member {Function}\n     * @private\n     */\n\n    _this._styleListener = null;\n    /**\n     * Private tracker for the current font.\n     *\n     * @member {string}\n     * @private\n     */\n\n    _this._font = '';\n    _this.text = text;\n    _this.style = style;\n    _this.localStyleID = -1;\n    return _this;\n  }\n  /**\n   * Renders text and updates it when needed.\n   *\n   * @private\n   * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n   */\n\n\n  Text.prototype.updateText = function updateText(respectDirty) {\n    var style = this._style; // check if style has changed..\n\n    if (this.localStyleID !== style.styleID) {\n      this.dirty = true;\n      this.localStyleID = style.styleID;\n    }\n\n    if (!this.dirty && respectDirty) {\n      return;\n    }\n\n    this._font = this._style.toFontString();\n    var context = this.context;\n\n    var measured = _TextMetrics2.default.measureText(this._text, this._style, this._style.wordWrap, this.canvas);\n\n    var width = measured.width;\n    var height = measured.height;\n    var lines = measured.lines;\n    var lineHeight = measured.lineHeight;\n    var lineWidths = measured.lineWidths;\n    var maxLineWidth = measured.maxLineWidth;\n    var fontProperties = measured.fontProperties;\n    this.canvas.width = Math.ceil((Math.max(1, width) + style.padding * 2) * this.resolution);\n    this.canvas.height = Math.ceil((Math.max(1, height) + style.padding * 2) * this.resolution);\n    context.scale(this.resolution, this.resolution);\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    context.font = this._font;\n    context.strokeStyle = style.stroke;\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n    var linePositionX = void 0;\n    var linePositionY = void 0;\n\n    if (style.dropShadow) {\n      context.fillStyle = style.dropShadowColor;\n      context.globalAlpha = style.dropShadowAlpha;\n      context.shadowBlur = style.dropShadowBlur;\n\n      if (style.dropShadowBlur > 0) {\n        context.shadowColor = style.dropShadowColor;\n      }\n\n      var xShadowOffset = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n      var yShadowOffset = Math.sin(style.dropShadowAngle) * style.dropShadowDistance;\n\n      for (var i = 0; i < lines.length; i++) {\n        linePositionX = style.strokeThickness / 2;\n        linePositionY = style.strokeThickness / 2 + i * lineHeight + fontProperties.ascent;\n\n        if (style.align === 'right') {\n          linePositionX += maxLineWidth - lineWidths[i];\n        } else if (style.align === 'center') {\n          linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n        }\n\n        if (style.fill) {\n          this.drawLetterSpacing(lines[i], linePositionX + xShadowOffset + style.padding, linePositionY + yShadowOffset + style.padding);\n\n          if (style.stroke && style.strokeThickness) {\n            context.strokeStyle = style.dropShadowColor;\n            this.drawLetterSpacing(lines[i], linePositionX + xShadowOffset + style.padding, linePositionY + yShadowOffset + style.padding, true);\n            context.strokeStyle = style.stroke;\n          }\n        }\n      }\n    } // reset the shadow blur and alpha that was set by the drop shadow, for the regular text\n\n\n    context.shadowBlur = 0;\n    context.globalAlpha = 1; // set canvas text styles\n\n    context.fillStyle = this._generateFillStyle(style, lines); // draw lines line by line\n\n    for (var _i = 0; _i < lines.length; _i++) {\n      linePositionX = style.strokeThickness / 2;\n      linePositionY = style.strokeThickness / 2 + _i * lineHeight + fontProperties.ascent;\n\n      if (style.align === 'right') {\n        linePositionX += maxLineWidth - lineWidths[_i];\n      } else if (style.align === 'center') {\n        linePositionX += (maxLineWidth - lineWidths[_i]) / 2;\n      }\n\n      if (style.stroke && style.strokeThickness) {\n        this.drawLetterSpacing(lines[_i], linePositionX + style.padding, linePositionY + style.padding, true);\n      }\n\n      if (style.fill) {\n        this.drawLetterSpacing(lines[_i], linePositionX + style.padding, linePositionY + style.padding);\n      }\n    }\n\n    this.updateTexture();\n  };\n  /**\n   * Render the text with letter-spacing.\n   * @param {string} text - The text to draw\n   * @param {number} x - Horizontal position to draw the text\n   * @param {number} y - Vertical position to draw the text\n   * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   * @private\n   */\n\n\n  Text.prototype.drawLetterSpacing = function drawLetterSpacing(text, x, y) {\n    var isStroke = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var style = this._style; // letterSpacing of 0 means normal\n\n    var letterSpacing = style.letterSpacing;\n\n    if (letterSpacing === 0) {\n      if (isStroke) {\n        this.context.strokeText(text, x, y);\n      } else {\n        this.context.fillText(text, x, y);\n      }\n\n      return;\n    }\n\n    var characters = String.prototype.split.call(text, '');\n    var currentPosition = x;\n    var index = 0;\n    var current = '';\n\n    while (index < text.length) {\n      current = characters[index++];\n\n      if (isStroke) {\n        this.context.strokeText(current, currentPosition, y);\n      } else {\n        this.context.fillText(current, currentPosition, y);\n      }\n\n      currentPosition += this.context.measureText(current).width + letterSpacing;\n    }\n  };\n  /**\n   * Updates texture size based on canvas size\n   *\n   * @private\n   */\n\n\n  Text.prototype.updateTexture = function updateTexture() {\n    var canvas = this.canvas;\n\n    if (this._style.trim) {\n      var trimmed = (0, _trimCanvas2.default)(canvas);\n\n      if (trimmed.data) {\n        canvas.width = trimmed.width;\n        canvas.height = trimmed.height;\n        this.context.putImageData(trimmed.data, 0, 0);\n      }\n    }\n\n    var texture = this._texture;\n    var style = this._style;\n    var padding = style.trim ? 0 : style.padding;\n    var baseTexture = texture.baseTexture;\n    baseTexture.hasLoaded = true;\n    baseTexture.resolution = this.resolution;\n    baseTexture.realWidth = canvas.width;\n    baseTexture.realHeight = canvas.height;\n    baseTexture.width = canvas.width / this.resolution;\n    baseTexture.height = canvas.height / this.resolution;\n    texture.trim.width = texture._frame.width = canvas.width / this.resolution;\n    texture.trim.height = texture._frame.height = canvas.height / this.resolution;\n    texture.trim.x = -padding;\n    texture.trim.y = -padding;\n    texture.orig.width = texture._frame.width - padding * 2;\n    texture.orig.height = texture._frame.height - padding * 2; // call sprite onTextureUpdate to update scale if _width or _height were set\n\n    this._onTextureUpdate();\n\n    baseTexture.emit('update', baseTexture);\n    this.dirty = false;\n  };\n  /**\n   * Renders the object using the WebGL renderer\n   *\n   * @param {PIXI.WebGLRenderer} renderer - The renderer\n   */\n\n\n  Text.prototype.renderWebGL = function renderWebGL(renderer) {\n    if (this.resolution !== renderer.resolution) {\n      this.resolution = renderer.resolution;\n      this.dirty = true;\n    }\n\n    this.updateText(true);\n\n    _Sprite.prototype.renderWebGL.call(this, renderer);\n  };\n  /**\n   * Renders the object using the Canvas renderer\n   *\n   * @private\n   * @param {PIXI.CanvasRenderer} renderer - The renderer\n   */\n\n\n  Text.prototype._renderCanvas = function _renderCanvas(renderer) {\n    if (this.resolution !== renderer.resolution) {\n      this.resolution = renderer.resolution;\n      this.dirty = true;\n    }\n\n    this.updateText(true);\n\n    _Sprite.prototype._renderCanvas.call(this, renderer);\n  };\n  /**\n   * Gets the local bounds of the text object.\n   *\n   * @param {Rectangle} rect - The output rectangle.\n   * @return {Rectangle} The bounds.\n   */\n\n\n  Text.prototype.getLocalBounds = function getLocalBounds(rect) {\n    this.updateText(true);\n    return _Sprite.prototype.getLocalBounds.call(this, rect);\n  };\n  /**\n   * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n   */\n\n\n  Text.prototype._calculateBounds = function _calculateBounds() {\n    this.updateText(true);\n    this.calculateVertices(); // if we have already done this on THIS frame.\n\n    this._bounds.addQuad(this.vertexData);\n  };\n  /**\n   * Method to be called upon a TextStyle change.\n   * @private\n   */\n\n\n  Text.prototype._onStyleChange = function _onStyleChange() {\n    this.dirty = true;\n  };\n  /**\n   * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n   *\n   * @private\n   * @param {object} style - The style.\n   * @param {string[]} lines - The lines of text.\n   * @return {string|number|CanvasGradient} The fill style\n   */\n\n\n  Text.prototype._generateFillStyle = function _generateFillStyle(style, lines) {\n    if (!Array.isArray(style.fill)) {\n      return style.fill;\n    } // cocoon on canvas+ cannot generate textures, so use the first colour instead\n\n\n    if (navigator.isCocoonJS) {\n      return style.fill[0];\n    } // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n\n\n    var gradient = void 0;\n    var totalIterations = void 0;\n    var currentIteration = void 0;\n    var stop = void 0;\n    var width = this.canvas.width / this.resolution;\n    var height = this.canvas.height / this.resolution; // make a copy of the style settings, so we can manipulate them later\n\n    var fill = style.fill.slice();\n    var fillGradientStops = style.fillGradientStops.slice(); // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n\n    if (!fillGradientStops.length) {\n      var lengthPlus1 = fill.length + 1;\n\n      for (var i = 1; i < lengthPlus1; ++i) {\n        fillGradientStops.push(i / lengthPlus1);\n      }\n    } // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n\n\n    fill.unshift(style.fill[0]);\n    fillGradientStops.unshift(0);\n    fill.push(style.fill[style.fill.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === _const.TEXT_GRADIENT.LINEAR_VERTICAL) {\n      // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n      gradient = this.context.createLinearGradient(width / 2, 0, width / 2, height); // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n      // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n      totalIterations = (fill.length + 1) * lines.length;\n      currentIteration = 0;\n\n      for (var _i2 = 0; _i2 < lines.length; _i2++) {\n        currentIteration += 1;\n\n        for (var j = 0; j < fill.length; j++) {\n          if (typeof fillGradientStops[j] === 'number') {\n            stop = fillGradientStops[j] / lines.length + _i2 / lines.length;\n          } else {\n            stop = currentIteration / totalIterations;\n          }\n\n          gradient.addColorStop(stop, fill[j]);\n          currentIteration++;\n        }\n      }\n    } else {\n      // start the gradient at the center left of the canvas, and end at the center right of the canvas\n      gradient = this.context.createLinearGradient(0, height / 2, width, height / 2); // can just evenly space out the gradients in this case, as multiple lines makes no difference\n      // to an even left to right gradient\n\n      totalIterations = fill.length + 1;\n      currentIteration = 1;\n\n      for (var _i3 = 0; _i3 < fill.length; _i3++) {\n        if (typeof fillGradientStops[_i3] === 'number') {\n          stop = fillGradientStops[_i3];\n        } else {\n          stop = currentIteration / totalIterations;\n        }\n\n        gradient.addColorStop(stop, fill[_i3]);\n        currentIteration++;\n      }\n    }\n\n    return gradient;\n  };\n  /**\n   * Destroys this text object.\n   * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n   * the majority of the time the texture will not be shared with any other Sprites.\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their\n   *  destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n   */\n\n\n  Text.prototype.destroy = function destroy(options) {\n    if (typeof options === 'boolean') {\n      options = {\n        children: options\n      };\n    }\n\n    options = Object.assign({}, defaultDestroyOptions, options);\n\n    _Sprite.prototype.destroy.call(this, options); // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n\n\n    this.context = null;\n    this.canvas = null;\n    this._style = null;\n  };\n  /**\n   * The width of the Text, setting this will actually modify the scale to achieve the value set\n   *\n   * @member {number}\n   */\n\n\n  _createClass(Text, [{\n    key: 'width',\n    get: function get() {\n      this.updateText(true);\n      return Math.abs(this.scale.x) * this._texture.orig.width;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this.updateText(true);\n      var s = (0, _utils.sign)(this.scale.x) || 1;\n      this.scale.x = s * value / this._texture.orig.width;\n      this._width = value;\n    }\n    /**\n     * The height of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n\n  }, {\n    key: 'height',\n    get: function get() {\n      this.updateText(true);\n      return Math.abs(this.scale.y) * this._texture.orig.height;\n    },\n    set: function set(value) // eslint-disable-line require-jsdoc\n    {\n      this.updateText(true);\n      var s = (0, _utils.sign)(this.scale.y) || 1;\n      this.scale.y = s * value / this._texture.orig.height;\n      this._height = value;\n    }\n    /**\n     * Set the style of the text. Set up an event listener to listen for changes on the style\n     * object and mark the text as dirty.\n     *\n     * @member {object|PIXI.TextStyle}\n     */\n\n  }, {\n    key: 'style',\n    get: function get() {\n      return this._style;\n    },\n    set: function set(style) // eslint-disable-line require-jsdoc\n    {\n      style = style || {};\n\n      if (style instanceof _TextStyle2.default) {\n        this._style = style;\n      } else {\n        this._style = new _TextStyle2.default(style);\n      }\n\n      this.localStyleID = -1;\n      this.dirty = true;\n    }\n    /**\n     * Set the copy for the text object. To split a line you can use '\\n'.\n     *\n     * @member {string}\n     */\n\n  }, {\n    key: 'text',\n    get: function get() {\n      return this._text;\n    },\n    set: function set(text) // eslint-disable-line require-jsdoc\n    {\n      text = String(text === '' || text === null || text === undefined ? ' ' : text);\n\n      if (this._text === text) {\n        return;\n      }\n\n      this._text = text;\n      this.dirty = true;\n    }\n  }]);\n\n  return Text;\n}(_Sprite3.default);\n\nexports.default = Text;","map":null,"metadata":{},"sourceType":"script"}