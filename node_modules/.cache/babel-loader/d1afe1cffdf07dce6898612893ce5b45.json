{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = buildRoundedRectangle;\n\nvar _earcut = require('earcut');\n\nvar _earcut2 = _interopRequireDefault(_earcut);\n\nvar _buildLine = require('./buildLine');\n\nvar _buildLine2 = _interopRequireDefault(_buildLine);\n\nvar _utils = require('../../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Builds a rounded rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\n\n\nfunction buildRoundedRectangle(graphicsData, webGLData, webGLDataNativeLines) {\n  var rrectData = graphicsData.shape;\n  var x = rrectData.x;\n  var y = rrectData.y;\n  var width = rrectData.width;\n  var height = rrectData.height;\n  var radius = rrectData.radius;\n  var recPoints = [];\n  recPoints.push(x, y + radius);\n  quadraticBezierCurve(x, y + height - radius, x, y + height, x + radius, y + height, recPoints);\n  quadraticBezierCurve(x + width - radius, y + height, x + width, y + height, x + width, y + height - radius, recPoints);\n  quadraticBezierCurve(x + width, y + radius, x + width, y, x + width - radius, y, recPoints);\n  quadraticBezierCurve(x + radius, y, x, y, x, y + radius + 0.0000000001, recPoints); // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.\n  // TODO - fix this properly, this is not very elegant.. but it works for now.\n\n  if (graphicsData.fill) {\n    var color = (0, _utils.hex2rgb)(graphicsData.fillColor);\n    var alpha = graphicsData.fillAlpha;\n    var r = color[0] * alpha;\n    var g = color[1] * alpha;\n    var b = color[2] * alpha;\n    var verts = webGLData.points;\n    var indices = webGLData.indices;\n    var vecPos = verts.length / 6;\n    var triangles = (0, _earcut2.default)(recPoints, null, 2);\n\n    for (var i = 0, j = triangles.length; i < j; i += 3) {\n      indices.push(triangles[i] + vecPos);\n      indices.push(triangles[i] + vecPos);\n      indices.push(triangles[i + 1] + vecPos);\n      indices.push(triangles[i + 2] + vecPos);\n      indices.push(triangles[i + 2] + vecPos);\n    }\n\n    for (var _i = 0, _j = recPoints.length; _i < _j; _i++) {\n      verts.push(recPoints[_i], recPoints[++_i], r, g, b, alpha);\n    }\n  }\n\n  if (graphicsData.lineWidth) {\n    var tempPoints = graphicsData.points;\n    graphicsData.points = recPoints;\n    (0, _buildLine2.default)(graphicsData, webGLData, webGLDataNativeLines);\n    graphicsData.points = tempPoints;\n  }\n}\n/**\n * Calculate a single point for a quadratic bezier curve.\n * Utility function used by quadraticBezierCurve.\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} n1 - first number\n * @param {number} n2 - second number\n * @param {number} perc - percentage\n * @return {number} the result\n *\n */\n\n\nfunction getPt(n1, n2, perc) {\n  var diff = n2 - n1;\n  return n1 + diff * perc;\n}\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} fromX - Origin point x\n * @param {number} fromY - Origin point x\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\n\n\nfunction quadraticBezierCurve(fromX, fromY, cpX, cpY, toX, toY) {\n  var out = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  var n = 20;\n  var points = out;\n  var xa = 0;\n  var ya = 0;\n  var xb = 0;\n  var yb = 0;\n  var x = 0;\n  var y = 0;\n\n  for (var i = 0, j = 0; i <= n; ++i) {\n    j = i / n; // The Green Line\n\n    xa = getPt(fromX, cpX, j);\n    ya = getPt(fromY, cpY, j);\n    xb = getPt(cpX, toX, j);\n    yb = getPt(cpY, toY, j); // The Black Dot\n\n    x = getPt(xa, xb, j);\n    y = getPt(ya, yb, j);\n    points.push(x, y);\n  }\n\n  return points;\n}","map":null,"metadata":{},"sourceType":"script"}