{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _const = require('../../const');\n\nvar _RenderTarget = require('./utils/RenderTarget');\n\nvar _RenderTarget2 = _interopRequireDefault(_RenderTarget);\n\nvar _utils = require('../../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Helper class to create a webGL Texture\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar TextureManager = function () {\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n   */\n  function TextureManager(renderer) {\n    _classCallCheck(this, TextureManager);\n    /**\n     * A reference to the current renderer\n     *\n     * @member {PIXI.WebGLRenderer}\n     */\n\n\n    this.renderer = renderer;\n    /**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n\n    this.gl = renderer.gl;\n    /**\n     * Track textures in the renderer so we can no longer listen to them on destruction.\n     *\n     * @member {Array<*>}\n     * @private\n     */\n\n    this._managedTextures = [];\n  }\n  /**\n   * Binds a texture.\n   *\n   */\n\n\n  TextureManager.prototype.bindTexture = function bindTexture() {} // empty\n\n  /**\n   * Gets a texture.\n   *\n   */\n  ;\n\n  TextureManager.prototype.getTexture = function getTexture() {} // empty\n\n  /**\n   * Updates and/or Creates a WebGL texture for the renderer's context.\n   *\n   * @param {PIXI.BaseTexture|PIXI.Texture} texture - the texture to update\n   * @param {number} location - the location the texture will be bound to.\n   * @return {GLTexture} The gl texture.\n   */\n  ;\n\n  TextureManager.prototype.updateTexture = function updateTexture(texture, location) {\n    // assume it good!\n    // texture = texture.baseTexture || texture;\n    var gl = this.gl;\n    var isRenderTexture = !!texture._glRenderTargets;\n\n    if (!texture.hasLoaded) {\n      return null;\n    }\n\n    var boundTextures = this.renderer.boundTextures; // if the location is undefined then this may have been called by n event.\n    // this being the case the texture may already be bound to a slot. As a texture can only be bound once\n    // we need to find its current location if it exists.\n\n    if (location === undefined) {\n      location = 0; // TODO maybe we can use texture bound ids later on...\n      // check if texture is already bound..\n\n      for (var i = 0; i < boundTextures.length; ++i) {\n        if (boundTextures[i] === texture) {\n          location = i;\n          break;\n        }\n      }\n    }\n\n    boundTextures[location] = texture;\n    gl.activeTexture(gl.TEXTURE0 + location);\n    var glTexture = texture._glTextures[this.renderer.CONTEXT_UID];\n\n    if (!glTexture) {\n      if (isRenderTexture) {\n        var renderTarget = new _RenderTarget2.default(this.gl, texture.width, texture.height, texture.scaleMode, texture.resolution);\n        renderTarget.resize(texture.width, texture.height);\n        texture._glRenderTargets[this.renderer.CONTEXT_UID] = renderTarget;\n        glTexture = renderTarget.texture; // framebuffer constructor disactivates current framebuffer\n\n        if (!this.renderer._activeRenderTarget.root) {\n          this.renderer._activeRenderTarget.frameBuffer.bind();\n        }\n      } else {\n        glTexture = new _pixiGlCore.GLTexture(this.gl, null, null, null, null);\n        glTexture.bind(location);\n        glTexture.premultiplyAlpha = true;\n        glTexture.upload(texture.source);\n      }\n\n      texture._glTextures[this.renderer.CONTEXT_UID] = glTexture;\n      texture.on('update', this.updateTexture, this);\n      texture.on('dispose', this.destroyTexture, this);\n\n      this._managedTextures.push(texture);\n\n      if (texture.isPowerOfTwo) {\n        if (texture.mipmap) {\n          glTexture.enableMipmap();\n        }\n\n        if (texture.wrapMode === _const.WRAP_MODES.CLAMP) {\n          glTexture.enableWrapClamp();\n        } else if (texture.wrapMode === _const.WRAP_MODES.REPEAT) {\n          glTexture.enableWrapRepeat();\n        } else {\n          glTexture.enableWrapMirrorRepeat();\n        }\n      } else {\n        glTexture.enableWrapClamp();\n      }\n\n      if (texture.scaleMode === _const.SCALE_MODES.NEAREST) {\n        glTexture.enableNearestScaling();\n      } else {\n        glTexture.enableLinearScaling();\n      }\n    } // the texture already exists so we only need to update it..\n    else if (isRenderTexture) {\n        texture._glRenderTargets[this.renderer.CONTEXT_UID].resize(texture.width, texture.height);\n      } else {\n        glTexture.upload(texture.source);\n      }\n\n    return glTexture;\n  };\n  /**\n   * Deletes the texture from WebGL\n   *\n   * @param {PIXI.BaseTexture|PIXI.Texture} texture - the texture to destroy\n   * @param {boolean} [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\n   */\n\n\n  TextureManager.prototype.destroyTexture = function destroyTexture(texture, skipRemove) {\n    texture = texture.baseTexture || texture;\n\n    if (!texture.hasLoaded) {\n      return;\n    }\n\n    var renderer = this.renderer;\n    var uid = renderer.CONTEXT_UID;\n    var glTextures = texture._glTextures;\n    var glRenderTargets = texture._glRenderTargets;\n\n    if (glTextures[uid]) {\n      renderer.unbindTexture(texture);\n      glTextures[uid].destroy();\n      texture.off('update', this.updateTexture, this);\n      texture.off('dispose', this.destroyTexture, this);\n      delete glTextures[uid];\n\n      if (!skipRemove) {\n        var i = this._managedTextures.indexOf(texture);\n\n        if (i !== -1) {\n          (0, _utils.removeItems)(this._managedTextures, i, 1);\n        }\n      }\n    }\n\n    if (glRenderTargets && glRenderTargets[uid]) {\n      if (renderer._activeRenderTarget === glRenderTargets[uid]) {\n        renderer.bindRenderTarget(renderer.rootRenderTarget);\n      }\n\n      glRenderTargets[uid].destroy();\n      delete glRenderTargets[uid];\n    }\n  };\n  /**\n   * Deletes all the textures from WebGL\n   */\n\n\n  TextureManager.prototype.removeAll = function removeAll() {\n    // empty all the old gl textures as they are useless now\n    for (var i = 0; i < this._managedTextures.length; ++i) {\n      var texture = this._managedTextures[i];\n\n      if (texture._glTextures[this.renderer.CONTEXT_UID]) {\n        delete texture._glTextures[this.renderer.CONTEXT_UID];\n      }\n    }\n  };\n  /**\n   * Destroys this manager and removes all its textures\n   */\n\n\n  TextureManager.prototype.destroy = function destroy() {\n    // destroy managed textures\n    for (var i = 0; i < this._managedTextures.length; ++i) {\n      var texture = this._managedTextures[i];\n      this.destroyTexture(texture, true);\n      texture.off('update', this.updateTexture, this);\n      texture.off('dispose', this.destroyTexture, this);\n    }\n\n    this._managedTextures = null;\n  };\n\n  return TextureManager;\n}();\n\nexports.default = TextureManager;","map":null,"metadata":{},"sourceType":"script"}